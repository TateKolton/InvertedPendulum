
invertedPendulum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080080c4  080080c4  000180c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081f8  080081f8  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  080081f8  080081f8  000181f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008200  08008200  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008200  08008200  00018200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008204  08008204  00018204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08008208  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000133c  200000a0  080082a4  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013dc  080082a4  000213dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f3a  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032a2  00000000  00000000  00036049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  000392f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe3  00000000  00000000  0003a778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029473  00000000  00000000  0003b75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f69  00000000  00000000  00064bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fce00  00000000  00000000  0007bb37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e40  00000000  00000000  00178938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  0017e778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080ac 	.word	0x080080ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	080080ac 	.word	0x080080ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b970 	b.w	8000e64 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	460d      	mov	r5, r1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	460f      	mov	r7, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14a      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4694      	mov	ip, r2
 8000bb0:	d965      	bls.n	8000c7e <__udivmoddi4+0xe2>
 8000bb2:	fab2 f382 	clz	r3, r2
 8000bb6:	b143      	cbz	r3, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bbc:	f1c3 0220 	rsb	r2, r3, #32
 8000bc0:	409f      	lsls	r7, r3
 8000bc2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc6:	4317      	orrs	r7, r2
 8000bc8:	409c      	lsls	r4, r3
 8000bca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bce:	fa1f f58c 	uxth.w	r5, ip
 8000bd2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bd6:	0c22      	lsrs	r2, r4, #16
 8000bd8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bdc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000be0:	fb01 f005 	mul.w	r0, r1, r5
 8000be4:	4290      	cmp	r0, r2
 8000be6:	d90a      	bls.n	8000bfe <__udivmoddi4+0x62>
 8000be8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bf0:	f080 811c 	bcs.w	8000e2c <__udivmoddi4+0x290>
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	f240 8119 	bls.w	8000e2c <__udivmoddi4+0x290>
 8000bfa:	3902      	subs	r1, #2
 8000bfc:	4462      	add	r2, ip
 8000bfe:	1a12      	subs	r2, r2, r0
 8000c00:	b2a4      	uxth	r4, r4
 8000c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c0e:	fb00 f505 	mul.w	r5, r0, r5
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c16:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c1e:	f080 8107 	bcs.w	8000e30 <__udivmoddi4+0x294>
 8000c22:	42a5      	cmp	r5, r4
 8000c24:	f240 8104 	bls.w	8000e30 <__udivmoddi4+0x294>
 8000c28:	4464      	add	r4, ip
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c30:	1b64      	subs	r4, r4, r5
 8000c32:	2100      	movs	r1, #0
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40dc      	lsrs	r4, r3
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0xbc>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f000 80ed 	beq.w	8000e26 <__udivmoddi4+0x28a>
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c52:	4608      	mov	r0, r1
 8000c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c58:	fab3 f183 	clz	r1, r3
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	d149      	bne.n	8000cf4 <__udivmoddi4+0x158>
 8000c60:	42ab      	cmp	r3, r5
 8000c62:	d302      	bcc.n	8000c6a <__udivmoddi4+0xce>
 8000c64:	4282      	cmp	r2, r0
 8000c66:	f200 80f8 	bhi.w	8000e5a <__udivmoddi4+0x2be>
 8000c6a:	1a84      	subs	r4, r0, r2
 8000c6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c70:	2001      	movs	r0, #1
 8000c72:	4617      	mov	r7, r2
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d0e2      	beq.n	8000c3e <__udivmoddi4+0xa2>
 8000c78:	e9c6 4700 	strd	r4, r7, [r6]
 8000c7c:	e7df      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xe6>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f382 	clz	r3, r2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8090 	bne.w	8000dac <__udivmoddi4+0x210>
 8000c8c:	1a8a      	subs	r2, r1, r2
 8000c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c92:	fa1f fe8c 	uxth.w	lr, ip
 8000c96:	2101      	movs	r1, #1
 8000c98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ca0:	0c22      	lsrs	r2, r4, #16
 8000ca2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ca6:	fb0e f005 	mul.w	r0, lr, r5
 8000caa:	4290      	cmp	r0, r2
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x124>
 8000cae:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x122>
 8000cb8:	4290      	cmp	r0, r2
 8000cba:	f200 80cb 	bhi.w	8000e54 <__udivmoddi4+0x2b8>
 8000cbe:	4645      	mov	r5, r8
 8000cc0:	1a12      	subs	r2, r2, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000ccc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x14e>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ce0:	d202      	bcs.n	8000ce8 <__udivmoddi4+0x14c>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f200 80bb 	bhi.w	8000e5e <__udivmoddi4+0x2c2>
 8000ce8:	4610      	mov	r0, r2
 8000cea:	eba4 040e 	sub.w	r4, r4, lr
 8000cee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cf2:	e79f      	b.n	8000c34 <__udivmoddi4+0x98>
 8000cf4:	f1c1 0720 	rsb	r7, r1, #32
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa05 f401 	lsl.w	r4, r5, r1
 8000d06:	fa20 f307 	lsr.w	r3, r0, r7
 8000d0a:	40fd      	lsrs	r5, r7
 8000d0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d10:	4323      	orrs	r3, r4
 8000d12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d1e:	0c1c      	lsrs	r4, r3, #16
 8000d20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d24:	fb08 f50e 	mul.w	r5, r8, lr
 8000d28:	42a5      	cmp	r5, r4
 8000d2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b0>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d3c:	f080 8088 	bcs.w	8000e50 <__udivmoddi4+0x2b4>
 8000d40:	42a5      	cmp	r5, r4
 8000d42:	f240 8085 	bls.w	8000e50 <__udivmoddi4+0x2b4>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4464      	add	r4, ip
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	b29d      	uxth	r5, r3
 8000d50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d54:	fb09 4413 	mls	r4, r9, r3, r4
 8000d58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1da>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d6c:	d26c      	bcs.n	8000e48 <__udivmoddi4+0x2ac>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	d96a      	bls.n	8000e48 <__udivmoddi4+0x2ac>
 8000d72:	3b02      	subs	r3, #2
 8000d74:	4464      	add	r4, ip
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	42ac      	cmp	r4, r5
 8000d84:	46c8      	mov	r8, r9
 8000d86:	46ae      	mov	lr, r5
 8000d88:	d356      	bcc.n	8000e38 <__udivmoddi4+0x29c>
 8000d8a:	d053      	beq.n	8000e34 <__udivmoddi4+0x298>
 8000d8c:	b156      	cbz	r6, 8000da4 <__udivmoddi4+0x208>
 8000d8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d92:	eb64 040e 	sbc.w	r4, r4, lr
 8000d96:	fa04 f707 	lsl.w	r7, r4, r7
 8000d9a:	40ca      	lsrs	r2, r1
 8000d9c:	40cc      	lsrs	r4, r1
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	e9c6 7400 	strd	r7, r4, [r6]
 8000da4:	4618      	mov	r0, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dac:	f1c3 0120 	rsb	r1, r3, #32
 8000db0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db4:	fa20 f201 	lsr.w	r2, r0, r1
 8000db8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dbc:	409d      	lsls	r5, r3
 8000dbe:	432a      	orrs	r2, r5
 8000dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dd0:	0c11      	lsrs	r1, r2, #16
 8000dd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dda:	428d      	cmp	r5, r1
 8000ddc:	fa04 f403 	lsl.w	r4, r4, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x258>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dea:	d22f      	bcs.n	8000e4c <__udivmoddi4+0x2b0>
 8000dec:	428d      	cmp	r5, r1
 8000dee:	d92d      	bls.n	8000e4c <__udivmoddi4+0x2b0>
 8000df0:	3802      	subs	r0, #2
 8000df2:	4461      	add	r1, ip
 8000df4:	1b49      	subs	r1, r1, r5
 8000df6:	b292      	uxth	r2, r2
 8000df8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000e00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e04:	fb05 f10e 	mul.w	r1, r5, lr
 8000e08:	4291      	cmp	r1, r2
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x282>
 8000e0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e14:	d216      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000e16:	4291      	cmp	r1, r2
 8000e18:	d914      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000e1a:	3d02      	subs	r5, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a52      	subs	r2, r2, r1
 8000e20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e24:	e738      	b.n	8000c98 <__udivmoddi4+0xfc>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e708      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000e2c:	4639      	mov	r1, r7
 8000e2e:	e6e6      	b.n	8000bfe <__udivmoddi4+0x62>
 8000e30:	4610      	mov	r0, r2
 8000e32:	e6fb      	b.n	8000c2c <__udivmoddi4+0x90>
 8000e34:	4548      	cmp	r0, r9
 8000e36:	d2a9      	bcs.n	8000d8c <__udivmoddi4+0x1f0>
 8000e38:	ebb9 0802 	subs.w	r8, r9, r2
 8000e3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e40:	3b01      	subs	r3, #1
 8000e42:	e7a3      	b.n	8000d8c <__udivmoddi4+0x1f0>
 8000e44:	4645      	mov	r5, r8
 8000e46:	e7ea      	b.n	8000e1e <__udivmoddi4+0x282>
 8000e48:	462b      	mov	r3, r5
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1da>
 8000e4c:	4640      	mov	r0, r8
 8000e4e:	e7d1      	b.n	8000df4 <__udivmoddi4+0x258>
 8000e50:	46d0      	mov	r8, sl
 8000e52:	e77b      	b.n	8000d4c <__udivmoddi4+0x1b0>
 8000e54:	3d02      	subs	r5, #2
 8000e56:	4462      	add	r2, ip
 8000e58:	e732      	b.n	8000cc0 <__udivmoddi4+0x124>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e70a      	b.n	8000c74 <__udivmoddi4+0xd8>
 8000e5e:	4464      	add	r4, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e742      	b.n	8000cea <__udivmoddi4+0x14e>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <Controller_Init>:
 *********************************************************************************/

#include <PID_control.h>

// Initialize controller structure
void Controller_Init(PID_Controller* controller, double* input, double* output, double* setpoint, double kp, double ki, double kd, int sampleTime) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08c      	sub	sp, #48	; 0x30
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6278      	str	r0, [r7, #36]	; 0x24
 8000e70:	6239      	str	r1, [r7, #32]
 8000e72:	61fa      	str	r2, [r7, #28]
 8000e74:	61bb      	str	r3, [r7, #24]
 8000e76:	ed87 0b04 	vstr	d0, [r7, #16]
 8000e7a:	ed87 1b02 	vstr	d1, [r7, #8]
 8000e7e:	ed87 2b00 	vstr	d2, [r7]

	if (kp<0 || ki<0 || kd<0) return;
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	f04f 0300 	mov.w	r3, #0
 8000e8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e8e:	f7ff fe1d 	bl	8000acc <__aeabi_dcmplt>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d161      	bne.n	8000f5c <Controller_Init+0xf4>
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ea4:	f7ff fe12 	bl	8000acc <__aeabi_dcmplt>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d156      	bne.n	8000f5c <Controller_Init+0xf4>
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	f04f 0300 	mov.w	r3, #0
 8000eb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000eba:	f7ff fe07 	bl	8000acc <__aeabi_dcmplt>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d14b      	bne.n	8000f5c <Controller_Init+0xf4>

	double sampleTimeSec = sampleTime/1000.0;
 8000ec4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000ec6:	f7ff fb25 	bl	8000514 <__aeabi_i2d>
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <Controller_Init+0xfc>)
 8000ed0:	f7ff fcb4 	bl	800083c <__aeabi_ddiv>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	controller->Input = input;
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	6a3a      	ldr	r2, [r7, #32]
 8000ee0:	601a      	str	r2, [r3, #0]
	controller->Output = output;
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	69fa      	ldr	r2, [r7, #28]
 8000ee6:	605a      	str	r2, [r3, #4]
	controller->Setpoint = setpoint;
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	609a      	str	r2, [r3, #8]
	controller->Kp = kp;
 8000eee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ef0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ef4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	controller->Ki = ki*sampleTimeSec;
 8000ef8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000efc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f00:	f7ff fb72 	bl	80005e8 <__aeabi_dmul>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f0a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	controller->Kd = kd/sampleTimeSec;
 8000f0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f16:	f7ff fc91 	bl	800083c <__aeabi_ddiv>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f20:	e9c1 2308 	strd	r2, r3, [r1, #32]
	controller->LastInput = 0.00;
 8000f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	controller->DInputPrev = 0.00;
 8000f32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	controller->FilterPeriod = 0.5;
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	2200      	movs	r2, #0
 8000f44:	62da      	str	r2, [r3, #44]	; 0x2c
	controller->SampleTime = sampleTime;
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
	controller->OutputSum = 0.00;
 8000f4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8000f5a:	e000      	b.n	8000f5e <Controller_Init+0xf6>
	if (kp<0 || ki<0 || kd<0) return;
 8000f5c:	bf00      	nop
}
 8000f5e:	3730      	adds	r7, #48	; 0x30
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	408f4000 	.word	0x408f4000

08000f68 <Controller_Compute>:

void Controller_Compute(PID_Controller* controller) {
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

	/*Compute all the working error variables*/
	  double input = *(controller->Input);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  double error = *(controller->Setpoint) - input;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f88:	f7ff f976 	bl	8000278 <__aeabi_dsub>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  double dInput = (input - controller->LastInput);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000f9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f9e:	f7ff f96b 	bl	8000278 <__aeabi_dsub>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  controller->OutputSum += (controller->Ki * error);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000fb6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fba:	f7ff fb15 	bl	80005e8 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	4629      	mov	r1, r5
 8000fc6:	f7ff f959 	bl	800027c <__adddf3>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
//	  else if(outputSum < -0.3)  {
//		  outputSum= -0.3;
//	  }

	  /*Proportional Controller Contribution*/
	  double output = controller->Kp * error + controller->OutputSum - controller->Kd * dInput;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fde:	f7ff fb03 	bl	80005e8 <__aeabi_dmul>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8000ff0:	f7ff f944 	bl	800027c <__adddf3>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4614      	mov	r4, r2
 8000ffa:	461d      	mov	r5, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001002:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001006:	f7ff faef 	bl	80005e8 <__aeabi_dmul>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4620      	mov	r0, r4
 8001010:	4629      	mov	r1, r5
 8001012:	f7ff f931 	bl	8000278 <__aeabi_dsub>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	  /*Check for output saturation */
	  if(output > controller->OutMax) {
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001024:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001028:	f7ff fd6e 	bl	8000b08 <__aeabi_dcmpgt>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <Controller_Compute+0xd6>
		  output = controller->OutMax;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001038:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800103c:	e00e      	b.n	800105c <Controller_Compute+0xf4>
	  }

	  else if(output < controller->OutMin) {
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001044:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001048:	f7ff fd40 	bl	8000acc <__aeabi_dcmplt>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d004      	beq.n	800105c <Controller_Compute+0xf4>
		  output = controller->OutMin;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001058:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  }

	  /*Populate controller output effort */
	  *(controller->Output) = output;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6859      	ldr	r1, [r3, #4]
 8001060:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001064:	e9c1 2300 	strd	r2, r3, [r1]

	  /*Remember some variables for next time*/
	  controller->LastInput = input;
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800106e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	  controller->DInputPrev = dInput;
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001078:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	; 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bdb0      	pop	{r4, r5, r7, pc}

08001084 <Controller_SetOutputLimits>:

void Controller_SetOutputLimits(PID_Controller* controller, double min, double max) {
 8001084:	b480      	push	{r7}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6178      	str	r0, [r7, #20]
 800108c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001090:	ed87 1b00 	vstr	d1, [r7]
	controller->OutMin = min;
 8001094:	6979      	ldr	r1, [r7, #20]
 8001096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800109a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	controller->OutMax = max;
 800109e:	6979      	ldr	r1, [r7, #20]
 80010a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010a4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80010a8:	bf00      	nop
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80010c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <vApplicationGetIdleTaskMemory+0x30>)
 80010ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2280      	movs	r2, #128	; 0x80
 80010d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	200000bc 	.word	0x200000bc
 80010e4:	20000110 	.word	0x20000110

080010e8 <updatePosition>:

/* Private user code ---------------------------------------------------------*/

/* USER CODE BEGIN 0 */

void updatePosition(uint32_t currentCounter) {
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    // Calculate the change in counter value since the last callback
    int32_t counterChange = currentCounter - previousCounter;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <updatePosition+0x54>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	60fb      	str	r3, [r7, #12]

    // Update the previous counter value for the next iteration
    previousCounter = currentCounter;
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <updatePosition+0x54>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6013      	str	r3, [r2, #0]

    // Handle wrap-around by checking if the change is larger than half the range
    if (counterChange > MAX_COUNTER_VALUE / 2) {
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <updatePosition+0x58>)
 8001104:	4293      	cmp	r3, r2
 8001106:	dd04      	ble.n	8001112 <updatePosition+0x2a>
        counterChange -= MAX_COUNTER_VALUE + 1;  // Handle wrap from high to low
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <updatePosition+0x5c>)
 800110c:	4413      	add	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	e007      	b.n	8001122 <updatePosition+0x3a>
    } else if (counterChange < -MAX_COUNTER_VALUE / 2) {
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <updatePosition+0x60>)
 8001116:	4293      	cmp	r3, r2
 8001118:	da03      	bge.n	8001122 <updatePosition+0x3a>
        counterChange += MAX_COUNTER_VALUE + 1;  // Handle wrap from low to high
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <updatePosition+0x64>)
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
    }

    // Update the net position
    netPosition += counterChange;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <updatePosition+0x68>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4413      	add	r3, r2
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <updatePosition+0x68>)
 800112c:	6013      	str	r3, [r2, #0]
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	200004f0 	.word	0x200004f0
 8001140:	004c4b40 	.word	0x004c4b40
 8001144:	ff67697f 	.word	0xff67697f
 8001148:	ffb3b4c0 	.word	0xffb3b4c0
 800114c:	00989681 	.word	0x00989681
 8001150:	200004f4 	.word	0x200004f4
 8001154:	00000000 	.word	0x00000000

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b098      	sub	sp, #96	; 0x60
 800115c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115e:	f000 ff0f 	bl	8001f80 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Initialize PID Controllers for Pendulum angle and Motor Arm Angle */
  Controller_Init(&pend_controller, &pendCurrPos, &pendOutCmd, &pendSetPoint, P1, I1, D1, SAMPLE_PERIOD);
 8001162:	4b65      	ldr	r3, [pc, #404]	; (80012f8 <main+0x1a0>)
 8001164:	ed93 7b00 	vldr	d7, [r3]
 8001168:	4b64      	ldr	r3, [pc, #400]	; (80012fc <main+0x1a4>)
 800116a:	ed93 6b00 	vldr	d6, [r3]
 800116e:	4b64      	ldr	r3, [pc, #400]	; (8001300 <main+0x1a8>)
 8001170:	ed93 5b00 	vldr	d5, [r3]
 8001174:	2301      	movs	r3, #1
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	eeb0 2a45 	vmov.f32	s4, s10
 800117c:	eef0 2a65 	vmov.f32	s5, s11
 8001180:	eeb0 1a46 	vmov.f32	s2, s12
 8001184:	eef0 1a66 	vmov.f32	s3, s13
 8001188:	eeb0 0a47 	vmov.f32	s0, s14
 800118c:	eef0 0a67 	vmov.f32	s1, s15
 8001190:	4b5c      	ldr	r3, [pc, #368]	; (8001304 <main+0x1ac>)
 8001192:	4a5d      	ldr	r2, [pc, #372]	; (8001308 <main+0x1b0>)
 8001194:	495d      	ldr	r1, [pc, #372]	; (800130c <main+0x1b4>)
 8001196:	485e      	ldr	r0, [pc, #376]	; (8001310 <main+0x1b8>)
 8001198:	f7ff fe66 	bl	8000e68 <Controller_Init>
  Controller_Init(&arm_controller, &armCurrPos, &armOutCmd, &armSetPoint, P2, I2, D2, SAMPLE_PERIOD);
 800119c:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <main+0x1bc>)
 800119e:	ed93 7b00 	vldr	d7, [r3]
 80011a2:	4b5d      	ldr	r3, [pc, #372]	; (8001318 <main+0x1c0>)
 80011a4:	ed93 6b00 	vldr	d6, [r3]
 80011a8:	4b5c      	ldr	r3, [pc, #368]	; (800131c <main+0x1c4>)
 80011aa:	ed93 5b00 	vldr	d5, [r3]
 80011ae:	2301      	movs	r3, #1
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	eeb0 2a45 	vmov.f32	s4, s10
 80011b6:	eef0 2a65 	vmov.f32	s5, s11
 80011ba:	eeb0 1a46 	vmov.f32	s2, s12
 80011be:	eef0 1a66 	vmov.f32	s3, s13
 80011c2:	eeb0 0a47 	vmov.f32	s0, s14
 80011c6:	eef0 0a67 	vmov.f32	s1, s15
 80011ca:	4b55      	ldr	r3, [pc, #340]	; (8001320 <main+0x1c8>)
 80011cc:	4a55      	ldr	r2, [pc, #340]	; (8001324 <main+0x1cc>)
 80011ce:	4956      	ldr	r1, [pc, #344]	; (8001328 <main+0x1d0>)
 80011d0:	4856      	ldr	r0, [pc, #344]	; (800132c <main+0x1d4>)
 80011d2:	f7ff fe49 	bl	8000e68 <Controller_Init>

  /* Set Saturation Limits on Control Output */
  Controller_SetOutputLimits(&pend_controller, -VOLTAGE_LIMIT, VOLTAGE_LIMIT);
 80011d6:	ed9f 1b44 	vldr	d1, [pc, #272]	; 80012e8 <main+0x190>
 80011da:	ed9f 0b45 	vldr	d0, [pc, #276]	; 80012f0 <main+0x198>
 80011de:	484c      	ldr	r0, [pc, #304]	; (8001310 <main+0x1b8>)
 80011e0:	f7ff ff50 	bl	8001084 <Controller_SetOutputLimits>
  Controller_SetOutputLimits(&arm_controller, -VOLTAGE_LIMIT, VOLTAGE_LIMIT);
 80011e4:	ed9f 1b40 	vldr	d1, [pc, #256]	; 80012e8 <main+0x190>
 80011e8:	ed9f 0b41 	vldr	d0, [pc, #260]	; 80012f0 <main+0x198>
 80011ec:	484f      	ldr	r0, [pc, #316]	; (800132c <main+0x1d4>)
 80011ee:	f7ff ff49 	bl	8001084 <Controller_SetOutputLimits>

  /* Get initial positions for pendulum and arm */
  stateFeedback(&pend_controller, &arm_controller);
 80011f2:	494e      	ldr	r1, [pc, #312]	; (800132c <main+0x1d4>)
 80011f4:	4846      	ldr	r0, [pc, #280]	; (8001310 <main+0x1b8>)
 80011f6:	f000 fbd8 	bl	80019aa <stateFeedback>

  /* Initialize Variables */
  pendCurrPos = 0;
 80011fa:	4944      	ldr	r1, [pc, #272]	; (800130c <main+0x1b4>)
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9c1 2300 	strd	r2, r3, [r1]
  pendOutCmd = 0;
 8001208:	493f      	ldr	r1, [pc, #252]	; (8001308 <main+0x1b0>)
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	e9c1 2300 	strd	r2, r3, [r1]
  armCurrPos = 0;
 8001216:	4944      	ldr	r1, [pc, #272]	; (8001328 <main+0x1d0>)
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	e9c1 2300 	strd	r2, r3, [r1]
  armOutCmd = 0;
 8001224:	493f      	ldr	r1, [pc, #252]	; (8001324 <main+0x1cc>)
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	e9c1 2300 	strd	r2, r3, [r1]
  pendSetPoint = 0;
 8001232:	4934      	ldr	r1, [pc, #208]	; (8001304 <main+0x1ac>)
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	e9c1 2300 	strd	r2, r3, [r1]
  armSetPoint = 0;
 8001240:	4937      	ldr	r1, [pc, #220]	; (8001320 <main+0x1c8>)
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	e9c1 2300 	strd	r2, r3, [r1]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 f87f 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f000 fa01 	bl	8001658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001256:	f000 f9cf 	bl	80015f8 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 800125a:	f000 f921 	bl	80014a0 <MX_TIM8_Init>
  MX_TIM2_Init();
 800125e:	f000 f8c9 	bl	80013f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Start PWM for DC Motor */
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001262:	2104      	movs	r1, #4
 8001264:	4832      	ldr	r0, [pc, #200]	; (8001330 <main+0x1d8>)
 8001266:	f002 fdeb 	bl	8003e40 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800126a:	213c      	movs	r1, #60	; 0x3c
 800126c:	4831      	ldr	r0, [pc, #196]	; (8001334 <main+0x1dc>)
 800126e:	f002 ff93 	bl	8004198 <HAL_TIM_Encoder_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of controlAlgo */
  osThreadDef(controlAlgo, computeControlEffort, osPriorityNormal, 0, 128);
 8001272:	4b31      	ldr	r3, [pc, #196]	; (8001338 <main+0x1e0>)
 8001274:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001278:	461d      	mov	r5, r3
 800127a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800127c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800127e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001282:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlAlgoHandle = osThreadCreate(osThread(controlAlgo), NULL);
 8001286:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f004 fda7 	bl	8005de0 <osThreadCreate>
 8001292:	4603      	mov	r3, r0
 8001294:	4a29      	ldr	r2, [pc, #164]	; (800133c <main+0x1e4>)
 8001296:	6013      	str	r3, [r2, #0]

  /* definition and creation of sendUARTData */
  osThreadDef(sendUARTData, sendData, osPriorityNormal, 0, 128);
 8001298:	4b29      	ldr	r3, [pc, #164]	; (8001340 <main+0x1e8>)
 800129a:	f107 0420 	add.w	r4, r7, #32
 800129e:	461d      	mov	r5, r3
 80012a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendUARTDataHandle = osThreadCreate(osThread(sendUARTData), NULL);
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 fd94 	bl	8005de0 <osThreadCreate>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a22      	ldr	r2, [pc, #136]	; (8001344 <main+0x1ec>)
 80012bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of recieveUARTData */
  osThreadDef(recieveUARTData, recieveData, osPriorityNormal, 0, 128);
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <main+0x1f0>)
 80012c0:	1d3c      	adds	r4, r7, #4
 80012c2:	461d      	mov	r5, r3
 80012c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  recieveUARTDataHandle = osThreadCreate(osThread(recieveUARTData), NULL);
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 fd83 	bl	8005de0 <osThreadCreate>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <main+0x1f4>)
 80012de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80012e0:	f004 fd77 	bl	8005dd2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <main+0x18c>
 80012e6:	bf00      	nop
 80012e8:	00000000 	.word	0x00000000
 80012ec:	40380000 	.word	0x40380000
 80012f0:	00000000 	.word	0x00000000
 80012f4:	c0380000 	.word	0xc0380000
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000528 	.word	0x20000528
 8001300:	20000008 	.word	0x20000008
 8001304:	20000518 	.word	0x20000518
 8001308:	20000508 	.word	0x20000508
 800130c:	200004f8 	.word	0x200004f8
 8001310:	20000440 	.word	0x20000440
 8001314:	20000010 	.word	0x20000010
 8001318:	20000018 	.word	0x20000018
 800131c:	20000020 	.word	0x20000020
 8001320:	20000520 	.word	0x20000520
 8001324:	20000510 	.word	0x20000510
 8001328:	20000500 	.word	0x20000500
 800132c:	20000498 	.word	0x20000498
 8001330:	2000035c 	.word	0x2000035c
 8001334:	20000310 	.word	0x20000310
 8001338:	080080d0 	.word	0x080080d0
 800133c:	20000430 	.word	0x20000430
 8001340:	080080fc 	.word	0x080080fc
 8001344:	20000434 	.word	0x20000434
 8001348:	08008128 	.word	0x08008128
 800134c:	20000438 	.word	0x20000438

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b096      	sub	sp, #88	; 0x58
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	2244      	movs	r2, #68	; 0x44
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f006 f883 	bl	800746a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001372:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001376:	f001 f8f5 	bl	8002564 <HAL_PWREx_ControlVoltageScaling>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001380:	f000 fb0e 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001384:	2302      	movs	r3, #2
 8001386:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800138e:	2310      	movs	r3, #16
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001392:	2302      	movs	r3, #2
 8001394:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001396:	2302      	movs	r3, #2
 8001398:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800139a:	2301      	movs	r3, #1
 800139c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800139e:	230a      	movs	r3, #10
 80013a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013a2:	2307      	movs	r3, #7
 80013a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013a6:	2302      	movs	r3, #2
 80013a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 f92c 	bl	8002610 <HAL_RCC_OscConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013be:	f000 faef 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c2:	230f      	movs	r3, #15
 80013c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c6:	2303      	movs	r3, #3
 80013c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013d6:	463b      	mov	r3, r7
 80013d8:	2104      	movs	r1, #4
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 fcf4 	bl	8002dc8 <HAL_RCC_ClockConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013e6:	f000 fadb 	bl	80019a0 <Error_Handler>
  }
}
 80013ea:	bf00      	nop
 80013ec:	3758      	adds	r7, #88	; 0x58
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2224      	movs	r2, #36	; 0x24
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f006 f831 	bl	800746a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	463b      	mov	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <MX_TIM2_Init+0xa4>)
 8001414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001418:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <MX_TIM2_Init+0xa4>)
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <MX_TIM2_Init+0xa4>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000000;
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <MX_TIM2_Init+0xa4>)
 8001428:	4a1c      	ldr	r2, [pc, #112]	; (800149c <MX_TIM2_Init+0xa8>)
 800142a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <MX_TIM2_Init+0xa4>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <MX_TIM2_Init+0xa4>)
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001438:	2303      	movs	r3, #3
 800143a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001440:	2301      	movs	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001450:	2301      	movs	r3, #1
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4619      	mov	r1, r3
 8001462:	480d      	ldr	r0, [pc, #52]	; (8001498 <MX_TIM2_Init+0xa4>)
 8001464:	f002 fdf2 	bl	800404c <HAL_TIM_Encoder_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800146e:	f000 fa97 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	; (8001498 <MX_TIM2_Init+0xa4>)
 8001480:	f003 fe50 	bl	8005124 <HAL_TIMEx_MasterConfigSynchronization>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800148a:	f000 fa89 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	3730      	adds	r7, #48	; 0x30
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000310 	.word	0x20000310
 800149c:	00989680 	.word	0x00989680

080014a0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b09a      	sub	sp, #104	; 0x68
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
 80014d0:	615a      	str	r2, [r3, #20]
 80014d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	222c      	movs	r2, #44	; 0x2c
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f005 ffc5 	bl	800746a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014e0:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <MX_TIM8_Init+0x150>)
 80014e2:	4a44      	ldr	r2, [pc, #272]	; (80015f4 <MX_TIM8_Init+0x154>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80014e6:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <MX_TIM8_Init+0x150>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	4b40      	ldr	r3, [pc, #256]	; (80015f0 <MX_TIM8_Init+0x150>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000;
 80014f2:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <MX_TIM8_Init+0x150>)
 80014f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80014f8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fa:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <MX_TIM8_Init+0x150>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001500:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <MX_TIM8_Init+0x150>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001506:	4b3a      	ldr	r3, [pc, #232]	; (80015f0 <MX_TIM8_Init+0x150>)
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800150c:	4838      	ldr	r0, [pc, #224]	; (80015f0 <MX_TIM8_Init+0x150>)
 800150e:	f002 fb6d 	bl	8003bec <HAL_TIM_Base_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001518:	f000 fa42 	bl	80019a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001520:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001522:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001526:	4619      	mov	r1, r3
 8001528:	4831      	ldr	r0, [pc, #196]	; (80015f0 <MX_TIM8_Init+0x150>)
 800152a:	f003 f8d9 	bl	80046e0 <HAL_TIM_ConfigClockSource>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001534:	f000 fa34 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001538:	482d      	ldr	r0, [pc, #180]	; (80015f0 <MX_TIM8_Init+0x150>)
 800153a:	f002 fc1f 	bl	8003d7c <HAL_TIM_PWM_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001544:	f000 fa2c 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001554:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001558:	4619      	mov	r1, r3
 800155a:	4825      	ldr	r0, [pc, #148]	; (80015f0 <MX_TIM8_Init+0x150>)
 800155c:	f003 fde2 	bl	8005124 <HAL_TIMEx_MasterConfigSynchronization>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001566:	f000 fa1b 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156a:	2360      	movs	r3, #96	; 0x60
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001572:	2300      	movs	r3, #0
 8001574:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001576:	2300      	movs	r3, #0
 8001578:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001586:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800158a:	2204      	movs	r2, #4
 800158c:	4619      	mov	r1, r3
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <MX_TIM8_Init+0x150>)
 8001590:	f002 ff92 	bl	80044b8 <HAL_TIM_PWM_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800159a:	f000 fa01 	bl	80019a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_TIM8_Init+0x150>)
 80015d4:	f003 fe2e 	bl	8005234 <HAL_TIMEx_ConfigBreakDeadTime>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80015de:	f000 f9df 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80015e2:	4803      	ldr	r0, [pc, #12]	; (80015f0 <MX_TIM8_Init+0x150>)
 80015e4:	f000 fa8c 	bl	8001b00 <HAL_TIM_MspPostInit>

}
 80015e8:	bf00      	nop
 80015ea:	3768      	adds	r7, #104	; 0x68
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000035c 	.word	0x2000035c
 80015f4:	40013400 	.word	0x40013400

080015f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_USART2_UART_Init+0x58>)
 80015fe:	4a15      	ldr	r2, [pc, #84]	; (8001654 <MX_USART2_UART_Init+0x5c>)
 8001600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_USART2_UART_Init+0x58>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_USART2_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_USART2_UART_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_USART2_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USART2_UART_Init+0x58>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_USART2_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USART2_UART_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_USART2_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_USART2_UART_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USART2_UART_Init+0x58>)
 800163c:	f003 fe96 	bl	800536c <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001646:	f000 f9ab 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200003a8 	.word	0x200003a8
 8001654:	40004400 	.word	0x40004400

08001658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <MX_GPIO_Init+0xac>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	4a24      	ldr	r2, [pc, #144]	; (8001704 <MX_GPIO_Init+0xac>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167a:	4b22      	ldr	r3, [pc, #136]	; (8001704 <MX_GPIO_Init+0xac>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <MX_GPIO_Init+0xac>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4a1e      	ldr	r2, [pc, #120]	; (8001704 <MX_GPIO_Init+0xac>)
 800168c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <MX_GPIO_Init+0xac>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <MX_GPIO_Init+0xac>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	4a18      	ldr	r2, [pc, #96]	; (8001704 <MX_GPIO_Init+0xac>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <MX_GPIO_Init+0xac>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <MX_GPIO_Init+0xac>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <MX_GPIO_Init+0xac>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <MX_GPIO_Init+0xac>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN_1_Pin|IN_2_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80016d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d8:	f000 ff1e 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN_1_Pin IN_2_Pin */
  GPIO_InitStruct.Pin = IN_1_Pin|IN_2_Pin;
 80016dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f8:	f000 fd64 	bl	80021c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000

08001708 <computeControlEffort>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_computeControlEffort */
void computeControlEffort(void const * argument)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
//}

	  for(;;)
	  {
		/* Thread sleep for sample time */
		osDelay(SAMPLE_PERIOD);
 8001710:	2001      	movs	r0, #1
 8001712:	f004 fbb1 	bl	8005e78 <osDelay>

		// Updates the encoder;
		updatePosition(TIM2->CNT);
 8001716:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fce3 	bl	80010e8 <updatePosition>

		armCurrPos = netPosition*STEPS_TO_DEG;
 8001722:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <computeControlEffort+0x110>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fef4 	bl	8000514 <__aeabi_i2d>
 800172c:	a336      	add	r3, pc, #216	; (adr r3, 8001808 <computeControlEffort+0x100>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7fe ff59 	bl	80005e8 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4938      	ldr	r1, [pc, #224]	; (800181c <computeControlEffort+0x114>)
 800173c:	e9c1 2300 	strd	r2, r3, [r1]

		 /* Read current pendulum position state */
		 //stateFeedback(&pend_controller, &arm_controller);

			/* Update Pendulum Control Effort */
		 updateControllers(&pend_controller, &arm_controller);
 8001740:	4937      	ldr	r1, [pc, #220]	; (8001820 <computeControlEffort+0x118>)
 8001742:	4838      	ldr	r0, [pc, #224]	; (8001824 <computeControlEffort+0x11c>)
 8001744:	f000 f93c 	bl	80019c0 <updateControllers>

		 double outVoltage = *arm_controller.Output;
 8001748:	4b35      	ldr	r3, [pc, #212]	; (8001820 <computeControlEffort+0x118>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	e9c7 2304 	strd	r2, r3, [r7, #16]

		/* Set Motor Direction */
		if(outVoltage < 0)
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001760:	f7ff f9b4 	bl	8000acc <__aeabi_dcmplt>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00e      	beq.n	8001788 <computeControlEffort+0x80>
		{

			HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001774:	f000 fed0 	bl	8002518 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800177e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001782:	f000 fec9 	bl	8002518 <HAL_GPIO_WritePin>
 8001786:	e00d      	b.n	80017a4 <computeControlEffort+0x9c>
		}

		else
		{
			HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f000 fec1 	bl	8002518 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_SET);
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800179c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a0:	f000 feba 	bl	8002518 <HAL_GPIO_WritePin>
		}

		/* Calculate PWM counter for given voltage */
		int dutyCycle = (abs(outVoltage) + dz)* MAX_PWM / MAX_MOTOR_VOLTAGE;
 80017a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017a8:	f7ff f9b8 	bl	8000b1c <__aeabi_d2iz>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bfb8      	it	lt
 80017b2:	425b      	neglt	r3, r3
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fead 	bl	8000514 <__aeabi_i2d>
 80017ba:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <computeControlEffort+0x120>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7fe fd5c 	bl	800027c <__adddf3>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	a310      	add	r3, pc, #64	; (adr r3, 8001810 <computeControlEffort+0x108>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7fe ff09 	bl	80005e8 <__aeabi_dmul>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <computeControlEffort+0x124>)
 80017e4:	f7ff f82a 	bl	800083c <__aeabi_ddiv>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f994 	bl	8000b1c <__aeabi_d2iz>
 80017f4:	4603      	mov	r3, r0
 80017f6:	60fb      	str	r3, [r7, #12]

		/* Set Motor PWM Cycle */
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dutyCycle);
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <computeControlEffort+0x128>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	639a      	str	r2, [r3, #56]	; 0x38
	  {
 8001800:	e786      	b.n	8001710 <computeControlEffort+0x8>
 8001802:	bf00      	nop
 8001804:	f3af 8000 	nop.w
 8001808:	ea86711e 	.word	0xea86711e
 800180c:	3fa67fff 	.word	0x3fa67fff
 8001810:	00000000 	.word	0x00000000
 8001814:	40c38800 	.word	0x40c38800
 8001818:	200004f4 	.word	0x200004f4
 800181c:	20000500 	.word	0x20000500
 8001820:	20000498 	.word	0x20000498
 8001824:	20000440 	.word	0x20000440
 8001828:	20000028 	.word	0x20000028
 800182c:	40380000 	.word	0x40380000
 8001830:	2000035c 	.word	0x2000035c

08001834 <sendData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendData */
void sendData(void const * argument)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendData */
  /* Infinite loop */
  for(;;)
  {
    for(int32_t i=0; i<1000; i++) {
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	e02a      	b.n	8001898 <sendData+0x64>
    	armSetPoint = 8*i;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe64 	bl	8000514 <__aeabi_i2d>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	492d      	ldr	r1, [pc, #180]	; (8001908 <sendData+0xd4>)
 8001852:	e9c1 2300 	strd	r2, r3, [r1]
    	osDelay(35);
 8001856:	2023      	movs	r0, #35	; 0x23
 8001858:	f004 fb0e 	bl	8005e78 <osDelay>
    	armSetPoint = 8*i + 5;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	3305      	adds	r3, #5
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe56 	bl	8000514 <__aeabi_i2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4926      	ldr	r1, [pc, #152]	; (8001908 <sendData+0xd4>)
 800186e:	e9c1 2300 	strd	r2, r3, [r1]
    	osDelay(35);
 8001872:	2023      	movs	r0, #35	; 0x23
 8001874:	f004 fb00 	bl	8005e78 <osDelay>
    	armSetPoint = 8*i;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe49 	bl	8000514 <__aeabi_i2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4920      	ldr	r1, [pc, #128]	; (8001908 <sendData+0xd4>)
 8001888:	e9c1 2300 	strd	r2, r3, [r1]
    	osDelay(35);
 800188c:	2023      	movs	r0, #35	; 0x23
 800188e:	f004 faf3 	bl	8005e78 <osDelay>
    for(int32_t i=0; i<1000; i++) {
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3301      	adds	r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800189e:	dbd0      	blt.n	8001842 <sendData+0xe>
    }

    for(int32_t i=1000; i<0; i--) {
 80018a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	e02a      	b.n	80018fe <sendData+0xca>
    	armSetPoint = 8*i;
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe31 	bl	8000514 <__aeabi_i2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4914      	ldr	r1, [pc, #80]	; (8001908 <sendData+0xd4>)
 80018b8:	e9c1 2300 	strd	r2, r3, [r1]
    	osDelay(35);
 80018bc:	2023      	movs	r0, #35	; 0x23
 80018be:	f004 fadb 	bl	8005e78 <osDelay>
    	armSetPoint = 8*i + 5;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	3305      	adds	r3, #5
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe23 	bl	8000514 <__aeabi_i2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	490d      	ldr	r1, [pc, #52]	; (8001908 <sendData+0xd4>)
 80018d4:	e9c1 2300 	strd	r2, r3, [r1]
    	osDelay(35);
 80018d8:	2023      	movs	r0, #35	; 0x23
 80018da:	f004 facd 	bl	8005e78 <osDelay>
    	armSetPoint = 8*i;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fe16 	bl	8000514 <__aeabi_i2d>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4906      	ldr	r1, [pc, #24]	; (8001908 <sendData+0xd4>)
 80018ee:	e9c1 2300 	strd	r2, r3, [r1]
    	osDelay(35);
 80018f2:	2023      	movs	r0, #35	; 0x23
 80018f4:	f004 fac0 	bl	8005e78 <osDelay>
    for(int32_t i=1000; i<0; i--) {
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	dbd1      	blt.n	80018a8 <sendData+0x74>
    for(int32_t i=0; i<1000; i++) {
 8001904:	e79a      	b.n	800183c <sendData+0x8>
 8001906:	bf00      	nop
 8001908:	20000520 	.word	0x20000520

0800190c <recieveData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_recieveData */
void recieveData(void const * argument)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN recieveData */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001914:	2001      	movs	r0, #1
 8001916:	f004 faaf 	bl	8005e78 <osDelay>
    printf("NET POS: %d ", (int)*arm_controller.Input);
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <recieveData+0x60>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff f8f9 	bl	8000b1c <__aeabi_d2iz>
 800192a:	4603      	mov	r3, r0
 800192c:	4619      	mov	r1, r3
 800192e:	4810      	ldr	r0, [pc, #64]	; (8001970 <recieveData+0x64>)
 8001930:	f005 fd46 	bl	80073c0 <iprintf>
    printf("SETPOINT: %d ", (int)*arm_controller.Setpoint);
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <recieveData+0x60>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f8ec 	bl	8000b1c <__aeabi_d2iz>
 8001944:	4603      	mov	r3, r0
 8001946:	4619      	mov	r1, r3
 8001948:	480a      	ldr	r0, [pc, #40]	; (8001974 <recieveData+0x68>)
 800194a:	f005 fd39 	bl	80073c0 <iprintf>
    printf("VOLTAGE: %d\n", (int)*arm_controller.Output);
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <recieveData+0x60>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f8df 	bl	8000b1c <__aeabi_d2iz>
 800195e:	4603      	mov	r3, r0
 8001960:	4619      	mov	r1, r3
 8001962:	4805      	ldr	r0, [pc, #20]	; (8001978 <recieveData+0x6c>)
 8001964:	f005 fd2c 	bl	80073c0 <iprintf>
    osDelay(1);
 8001968:	e7d4      	b.n	8001914 <recieveData+0x8>
 800196a:	bf00      	nop
 800196c:	20000498 	.word	0x20000498
 8001970:	08008144 	.word	0x08008144
 8001974:	08008154 	.word	0x08008154
 8001978:	08008164 	.word	0x08008164

0800197c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d101      	bne.n	8001992 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800198e:	f000 fb17 	bl	8001fc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40001000 	.word	0x40001000

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>

080019aa <stateFeedback>:
double dz = 2.75;
double parsedValues[9];


void stateFeedback(PID_Controller * pend_PID, PID_Controller * arm_PID)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
//  armCurrPos = FILL;
//  pendCurrPos = FILL;
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <updateControllers>:

void updateControllers(PID_Controller * pend_PID, PID_Controller * arm_PID) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]

	 /* Update Control effort based on current state */
	 Controller_Compute(arm_PID);
 80019ca:	6838      	ldr	r0, [r7, #0]
 80019cc:	f7ff facc 	bl	8000f68 <Controller_Compute>
	 Controller_Compute(pend_PID);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fac9 	bl	8000f68 <Controller_Compute>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_MspInit+0x4c>)
 80019e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ea:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <HAL_MspInit+0x4c>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6613      	str	r3, [r2, #96]	; 0x60
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_MspInit+0x4c>)
 80019f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a08:	6593      	str	r3, [r2, #88]	; 0x58
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	210f      	movs	r1, #15
 8001a1a:	f06f 0001 	mvn.w	r0, #1
 8001a1e:	f000 fba7 	bl	8002170 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000

08001a30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a50:	d130      	bne.n	8001ab4 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	4a19      	ldr	r2, [pc, #100]	; (8001abc <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4a13      	ldr	r2, [pc, #76]	; (8001abc <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a82:	2303      	movs	r3, #3
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a92:	2301      	movs	r3, #1
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa0:	f000 fb90 	bl	80021c4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2105      	movs	r1, #5
 8001aa8:	201c      	movs	r0, #28
 8001aaa:	f000 fb61 	bl	8002170 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001aae:	201c      	movs	r0, #28
 8001ab0:	f000 fb7a 	bl	80021a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ab4:	bf00      	nop
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000

08001ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_TIM_Base_MspInit+0x38>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d10b      	bne.n	8001aea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_TIM_Base_MspInit+0x3c>)
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <HAL_TIM_Base_MspInit+0x3c>)
 8001ad8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001adc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <HAL_TIM_Base_MspInit+0x3c>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40013400 	.word	0x40013400
 8001afc:	40021000 	.word	0x40021000

08001b00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <HAL_TIM_MspPostInit+0x64>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d11b      	bne.n	8001b5a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <HAL_TIM_MspPostInit+0x68>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	4a10      	ldr	r2, [pc, #64]	; (8001b68 <HAL_TIM_MspPostInit+0x68>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_TIM_MspPostInit+0x68>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	; (8001b6c <HAL_TIM_MspPostInit+0x6c>)
 8001b56:	f000 fb35 	bl	80021c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40013400 	.word	0x40013400
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	48000800 	.word	0x48000800

08001b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b0ac      	sub	sp, #176	; 0xb0
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2288      	movs	r2, #136	; 0x88
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f005 fc6a 	bl	800746a <memset>
  if(huart->Instance==USART2)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a21      	ldr	r2, [pc, #132]	; (8001c20 <HAL_UART_MspInit+0xb0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d13b      	bne.n	8001c18 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4618      	mov	r0, r3
 8001bae:	f001 fb61 	bl	8003274 <HAL_RCCEx_PeriphCLKConfig>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bb8:	f7ff fef2 	bl	80019a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_UART_MspInit+0xb4>)
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc0:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <HAL_UART_MspInit+0xb4>)
 8001bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <HAL_UART_MspInit+0xb4>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_UART_MspInit+0xb4>)
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd8:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <HAL_UART_MspInit+0xb4>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_UART_MspInit+0xb4>)
 8001be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bec:	230c      	movs	r3, #12
 8001bee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c04:	2307      	movs	r3, #7
 8001c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c14:	f000 fad6 	bl	80021c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c18:	bf00      	nop
 8001c1a:	37b0      	adds	r7, #176	; 0xb0
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40004400 	.word	0x40004400
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08e      	sub	sp, #56	; 0x38
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c36:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <HAL_InitTick+0xe0>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	4a33      	ldr	r2, [pc, #204]	; (8001d08 <HAL_InitTick+0xe0>)
 8001c3c:	f043 0310 	orr.w	r3, r3, #16
 8001c40:	6593      	str	r3, [r2, #88]	; 0x58
 8001c42:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <HAL_InitTick+0xe0>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c4e:	f107 0210 	add.w	r2, r7, #16
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f001 fa79 	bl	8003150 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d103      	bne.n	8001c70 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c68:	f001 fa46 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 8001c6c:	6378      	str	r0, [r7, #52]	; 0x34
 8001c6e:	e004      	b.n	8001c7a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c70:	f001 fa42 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 8001c74:	4603      	mov	r3, r0
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7c:	4a23      	ldr	r2, [pc, #140]	; (8001d0c <HAL_InitTick+0xe4>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0c9b      	lsrs	r3, r3, #18
 8001c84:	3b01      	subs	r3, #1
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <HAL_InitTick+0xe8>)
 8001c8a:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <HAL_InitTick+0xec>)
 8001c8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_InitTick+0xe8>)
 8001c90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c94:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c96:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <HAL_InitTick+0xe8>)
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c9c:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <HAL_InitTick+0xe8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <HAL_InitTick+0xe8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_InitTick+0xe8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001cae:	4818      	ldr	r0, [pc, #96]	; (8001d10 <HAL_InitTick+0xe8>)
 8001cb0:	f001 ff9c 	bl	8003bec <HAL_TIM_Base_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001cba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d11b      	bne.n	8001cfa <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001cc2:	4813      	ldr	r0, [pc, #76]	; (8001d10 <HAL_InitTick+0xe8>)
 8001cc4:	f001 ffea 	bl	8003c9c <HAL_TIM_Base_Start_IT>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001cce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d111      	bne.n	8001cfa <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cd6:	2036      	movs	r0, #54	; 0x36
 8001cd8:	f000 fa66 	bl	80021a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b0f      	cmp	r3, #15
 8001ce0:	d808      	bhi.n	8001cf4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	2036      	movs	r0, #54	; 0x36
 8001ce8:	f000 fa42 	bl	8002170 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cec:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_InitTick+0xf0>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e002      	b.n	8001cfa <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3738      	adds	r7, #56	; 0x38
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	431bde83 	.word	0x431bde83
 8001d10:	20000530 	.word	0x20000530
 8001d14:	40001000 	.word	0x40001000
 8001d18:	20000034 	.word	0x20000034

08001d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <NMI_Handler+0x4>

08001d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <HardFault_Handler+0x4>

08001d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <MemManage_Handler+0x4>

08001d2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <BusFault_Handler+0x4>

08001d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <UsageFault_Handler+0x4>

08001d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <TIM2_IRQHandler+0x10>)
 8001d4e:	f002 fab1 	bl	80042b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000310 	.word	0x20000310

08001d5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <TIM6_DAC_IRQHandler+0x10>)
 8001d62:	f002 faa7 	bl	80042b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000530 	.word	0x20000530

08001d70 <ITM_SendChar>:
#define DEMCR	*((volatile uint32_t*)0xE000EDFCU)
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*)0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1<<24);
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <ITM_SendChar+0x48>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <ITM_SendChar+0x48>)
 8001d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d84:	6013      	str	r3, [r2, #0]
	ITM_TRACE_EN |= (1<<0);
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <ITM_SendChar+0x4c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <ITM_SendChar+0x4c>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6013      	str	r3, [r2, #0]
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001d92:	bf00      	nop
 8001d94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f8      	beq.n	8001d94 <ITM_SendChar+0x24>
	ITM_STIMULUS_PORT0 = ch;
 8001da2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	6013      	str	r3, [r2, #0]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000edfc 	.word	0xe000edfc
 8001dbc:	e0000e00 	.word	0xe0000e00

08001dc0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	e00a      	b.n	8001de8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dd2:	f3af 8000 	nop.w
 8001dd6:	4601      	mov	r1, r0
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	60ba      	str	r2, [r7, #8]
 8001dde:	b2ca      	uxtb	r2, r1
 8001de0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dbf0      	blt.n	8001dd2 <_read+0x12>
  }

  return len;
 8001df0:	687b      	ldr	r3, [r7, #4]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	e009      	b.n	8001e20 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	60ba      	str	r2, [r7, #8]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ffab 	bl	8001d70 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbf1      	blt.n	8001e0c <_write+0x12>
  }
  return len;
 8001e28:	687b      	ldr	r3, [r7, #4]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <_close>:

int _close(int file)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e5a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <_isatty>:

int _isatty(int file)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea4:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <_sbrk+0x5c>)
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <_sbrk+0x60>)
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <_sbrk+0x64>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <_sbrk+0x68>)
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d207      	bcs.n	8001edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ecc:	f005 fb1c 	bl	8007508 <__errno>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	e009      	b.n	8001ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <_sbrk+0x64>)
 8001eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20018000 	.word	0x20018000
 8001efc:	00000400 	.word	0x00000400
 8001f00:	2000057c 	.word	0x2000057c
 8001f04:	200013e0 	.word	0x200013e0

08001f08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <SystemInit+0x20>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f12:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <SystemInit+0x20>)
 8001f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f30:	f7ff ffea 	bl	8001f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f34:	480c      	ldr	r0, [pc, #48]	; (8001f68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f36:	490d      	ldr	r1, [pc, #52]	; (8001f6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f38:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <LoopForever+0xe>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f3c:	e002      	b.n	8001f44 <LoopCopyDataInit>

08001f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f42:	3304      	adds	r3, #4

08001f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f48:	d3f9      	bcc.n	8001f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f4c:	4c0a      	ldr	r4, [pc, #40]	; (8001f78 <LoopForever+0x16>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f50:	e001      	b.n	8001f56 <LoopFillZerobss>

08001f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f54:	3204      	adds	r2, #4

08001f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f58:	d3fb      	bcc.n	8001f52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f5a:	f005 fadb 	bl	8007514 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f5e:	f7ff f8fb 	bl	8001158 <main>

08001f62 <LoopForever>:

LoopForever:
    b LoopForever
 8001f62:	e7fe      	b.n	8001f62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f6c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001f70:	08008208 	.word	0x08008208
  ldr r2, =_sbss
 8001f74:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001f78:	200013dc 	.word	0x200013dc

08001f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f7c:	e7fe      	b.n	8001f7c <ADC1_2_IRQHandler>
	...

08001f80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_Init+0x3c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <HAL_Init+0x3c>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f96:	2003      	movs	r0, #3
 8001f98:	f000 f8df 	bl	800215a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f9c:	200f      	movs	r0, #15
 8001f9e:	f7ff fe43 	bl	8001c28 <HAL_InitTick>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	71fb      	strb	r3, [r7, #7]
 8001fac:	e001      	b.n	8001fb2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fae:	f7ff fd17 	bl	80019e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40022000 	.word	0x40022000

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000038 	.word	0x20000038
 8001fe4:	20000580 	.word	0x20000580

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000580 	.word	0x20000580

08002000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800201c:	4013      	ands	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800202c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002032:	4a04      	ldr	r2, [pc, #16]	; (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60d3      	str	r3, [r2, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <__NVIC_GetPriorityGrouping+0x18>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	f003 0307 	and.w	r3, r3, #7
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	2b00      	cmp	r3, #0
 8002074:	db0b      	blt.n	800208e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	f003 021f 	and.w	r2, r3, #31
 800207c:	4907      	ldr	r1, [pc, #28]	; (800209c <__NVIC_EnableIRQ+0x38>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2001      	movs	r0, #1
 8002086:	fa00 f202 	lsl.w	r2, r0, r2
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000e100 	.word	0xe000e100

080020a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db0a      	blt.n	80020ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	490c      	ldr	r1, [pc, #48]	; (80020ec <__NVIC_SetPriority+0x4c>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c8:	e00a      	b.n	80020e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4908      	ldr	r1, [pc, #32]	; (80020f0 <__NVIC_SetPriority+0x50>)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3b04      	subs	r3, #4
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	761a      	strb	r2, [r3, #24]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f1c3 0307 	rsb	r3, r3, #7
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf28      	it	cs
 8002112:	2304      	movcs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3304      	adds	r3, #4
 800211a:	2b06      	cmp	r3, #6
 800211c:	d902      	bls.n	8002124 <NVIC_EncodePriority+0x30>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b03      	subs	r3, #3
 8002122:	e000      	b.n	8002126 <NVIC_EncodePriority+0x32>
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	f04f 32ff 	mov.w	r2, #4294967295
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800213c:	f04f 31ff 	mov.w	r1, #4294967295
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43d9      	mvns	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	4313      	orrs	r3, r2
         );
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	; 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ff4c 	bl	8002000 <__NVIC_SetPriorityGrouping>
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002182:	f7ff ff61 	bl	8002048 <__NVIC_GetPriorityGrouping>
 8002186:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68b9      	ldr	r1, [r7, #8]
 800218c:	6978      	ldr	r0, [r7, #20]
 800218e:	f7ff ffb1 	bl	80020f4 <NVIC_EncodePriority>
 8002192:	4602      	mov	r2, r0
 8002194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002198:	4611      	mov	r1, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff80 	bl	80020a0 <__NVIC_SetPriority>
}
 80021a0:	bf00      	nop
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff54 	bl	8002064 <__NVIC_EnableIRQ>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d2:	e17f      	b.n	80024d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	4013      	ands	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8171 	beq.w	80024ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d005      	beq.n	8002204 <HAL_GPIO_Init+0x40>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d130      	bne.n	8002266 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800223a:	2201      	movs	r2, #1
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	f003 0201 	and.w	r2, r3, #1
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b03      	cmp	r3, #3
 8002270:	d118      	bne.n	80022a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002278:	2201      	movs	r2, #1
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	f003 0201 	and.w	r2, r3, #1
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d017      	beq.n	80022e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d123      	bne.n	8002334 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	08da      	lsrs	r2, r3, #3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3208      	adds	r2, #8
 80022f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	220f      	movs	r2, #15
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	08da      	lsrs	r2, r3, #3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3208      	adds	r2, #8
 800232e:	6939      	ldr	r1, [r7, #16]
 8002330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0203 	and.w	r2, r3, #3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80ac 	beq.w	80024ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	4b5f      	ldr	r3, [pc, #380]	; (80024f4 <HAL_GPIO_Init+0x330>)
 8002378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237a:	4a5e      	ldr	r2, [pc, #376]	; (80024f4 <HAL_GPIO_Init+0x330>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6613      	str	r3, [r2, #96]	; 0x60
 8002382:	4b5c      	ldr	r3, [pc, #368]	; (80024f4 <HAL_GPIO_Init+0x330>)
 8002384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800238e:	4a5a      	ldr	r2, [pc, #360]	; (80024f8 <HAL_GPIO_Init+0x334>)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	3302      	adds	r3, #2
 8002396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023b8:	d025      	beq.n	8002406 <HAL_GPIO_Init+0x242>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4f      	ldr	r2, [pc, #316]	; (80024fc <HAL_GPIO_Init+0x338>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01f      	beq.n	8002402 <HAL_GPIO_Init+0x23e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4e      	ldr	r2, [pc, #312]	; (8002500 <HAL_GPIO_Init+0x33c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d019      	beq.n	80023fe <HAL_GPIO_Init+0x23a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4d      	ldr	r2, [pc, #308]	; (8002504 <HAL_GPIO_Init+0x340>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_GPIO_Init+0x236>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4c      	ldr	r2, [pc, #304]	; (8002508 <HAL_GPIO_Init+0x344>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00d      	beq.n	80023f6 <HAL_GPIO_Init+0x232>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4b      	ldr	r2, [pc, #300]	; (800250c <HAL_GPIO_Init+0x348>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d007      	beq.n	80023f2 <HAL_GPIO_Init+0x22e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4a      	ldr	r2, [pc, #296]	; (8002510 <HAL_GPIO_Init+0x34c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d101      	bne.n	80023ee <HAL_GPIO_Init+0x22a>
 80023ea:	2306      	movs	r3, #6
 80023ec:	e00c      	b.n	8002408 <HAL_GPIO_Init+0x244>
 80023ee:	2307      	movs	r3, #7
 80023f0:	e00a      	b.n	8002408 <HAL_GPIO_Init+0x244>
 80023f2:	2305      	movs	r3, #5
 80023f4:	e008      	b.n	8002408 <HAL_GPIO_Init+0x244>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x244>
 80023fa:	2303      	movs	r3, #3
 80023fc:	e004      	b.n	8002408 <HAL_GPIO_Init+0x244>
 80023fe:	2302      	movs	r3, #2
 8002400:	e002      	b.n	8002408 <HAL_GPIO_Init+0x244>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_GPIO_Init+0x244>
 8002406:	2300      	movs	r3, #0
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	f002 0203 	and.w	r2, r2, #3
 800240e:	0092      	lsls	r2, r2, #2
 8002410:	4093      	lsls	r3, r2
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002418:	4937      	ldr	r1, [pc, #220]	; (80024f8 <HAL_GPIO_Init+0x334>)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <HAL_GPIO_Init+0x350>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	43db      	mvns	r3, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800244a:	4a32      	ldr	r2, [pc, #200]	; (8002514 <HAL_GPIO_Init+0x350>)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002450:	4b30      	ldr	r3, [pc, #192]	; (8002514 <HAL_GPIO_Init+0x350>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	43db      	mvns	r3, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002474:	4a27      	ldr	r2, [pc, #156]	; (8002514 <HAL_GPIO_Init+0x350>)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <HAL_GPIO_Init+0x350>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800249e:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <HAL_GPIO_Init+0x350>)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_GPIO_Init+0x350>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024c8:	4a12      	ldr	r2, [pc, #72]	; (8002514 <HAL_GPIO_Init+0x350>)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	3301      	adds	r3, #1
 80024d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa22 f303 	lsr.w	r3, r2, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f47f ae78 	bne.w	80021d4 <HAL_GPIO_Init+0x10>
  }
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010000 	.word	0x40010000
 80024fc:	48000400 	.word	0x48000400
 8002500:	48000800 	.word	0x48000800
 8002504:	48000c00 	.word	0x48000c00
 8002508:	48001000 	.word	0x48001000
 800250c:	48001400 	.word	0x48001400
 8002510:	48001800 	.word	0x48001800
 8002514:	40010400 	.word	0x40010400

08002518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
 8002524:	4613      	mov	r3, r2
 8002526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002528:	787b      	ldrb	r3, [r7, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002534:	e002      	b.n	800253c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <HAL_PWREx_GetVoltageRange+0x18>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40007000 	.word	0x40007000

08002564 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002572:	d130      	bne.n	80025d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002574:	4b23      	ldr	r3, [pc, #140]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800257c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002580:	d038      	beq.n	80025f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002582:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800258a:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002590:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2232      	movs	r2, #50	; 0x32
 8002598:	fb02 f303 	mul.w	r3, r2, r3
 800259c:	4a1b      	ldr	r2, [pc, #108]	; (800260c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	0c9b      	lsrs	r3, r3, #18
 80025a4:	3301      	adds	r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025a8:	e002      	b.n	80025b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025b0:	4b14      	ldr	r3, [pc, #80]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025bc:	d102      	bne.n	80025c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f2      	bne.n	80025aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d0:	d110      	bne.n	80025f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e00f      	b.n	80025f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e2:	d007      	beq.n	80025f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025ec:	4a05      	ldr	r2, [pc, #20]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40007000 	.word	0x40007000
 8002608:	20000030 	.word	0x20000030
 800260c:	431bde83 	.word	0x431bde83

08002610 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e3ca      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002622:	4b97      	ldr	r3, [pc, #604]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800262c:	4b94      	ldr	r3, [pc, #592]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 80e4 	beq.w	800280c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_RCC_OscConfig+0x4a>
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2b0c      	cmp	r3, #12
 800264e:	f040 808b 	bne.w	8002768 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b01      	cmp	r3, #1
 8002656:	f040 8087 	bne.w	8002768 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800265a:	4b89      	ldr	r3, [pc, #548]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_RCC_OscConfig+0x62>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e3a2      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1a      	ldr	r2, [r3, #32]
 8002676:	4b82      	ldr	r3, [pc, #520]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d004      	beq.n	800268c <HAL_RCC_OscConfig+0x7c>
 8002682:	4b7f      	ldr	r3, [pc, #508]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800268a:	e005      	b.n	8002698 <HAL_RCC_OscConfig+0x88>
 800268c:	4b7c      	ldr	r3, [pc, #496]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 800268e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002698:	4293      	cmp	r3, r2
 800269a:	d223      	bcs.n	80026e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fd87 	bl	80031b4 <RCC_SetFlashLatencyFromMSIRange>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e383      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b0:	4b73      	ldr	r3, [pc, #460]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a72      	ldr	r2, [pc, #456]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80026b6:	f043 0308 	orr.w	r3, r3, #8
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b70      	ldr	r3, [pc, #448]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	496d      	ldr	r1, [pc, #436]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ce:	4b6c      	ldr	r3, [pc, #432]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	4968      	ldr	r1, [pc, #416]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
 80026e2:	e025      	b.n	8002730 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e4:	4b66      	ldr	r3, [pc, #408]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a65      	ldr	r2, [pc, #404]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80026ea:	f043 0308 	orr.w	r3, r3, #8
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	4960      	ldr	r1, [pc, #384]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002702:	4b5f      	ldr	r3, [pc, #380]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	495b      	ldr	r1, [pc, #364]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fd47 	bl	80031b4 <RCC_SetFlashLatencyFromMSIRange>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e343      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002730:	f000 fc4a 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002734:	4602      	mov	r2, r0
 8002736:	4b52      	ldr	r3, [pc, #328]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	4950      	ldr	r1, [pc, #320]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 8002742:	5ccb      	ldrb	r3, [r1, r3]
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
 800274c:	4a4e      	ldr	r2, [pc, #312]	; (8002888 <HAL_RCC_OscConfig+0x278>)
 800274e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002750:	4b4e      	ldr	r3, [pc, #312]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fa67 	bl	8001c28 <HAL_InitTick>
 800275a:	4603      	mov	r3, r0
 800275c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d052      	beq.n	800280a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	e327      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d032      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002770:	4b43      	ldr	r3, [pc, #268]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a42      	ldr	r2, [pc, #264]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800277c:	f7ff fc34 	bl	8001fe8 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002784:	f7ff fc30 	bl	8001fe8 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e310      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002796:	4b3a      	ldr	r3, [pc, #232]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a2:	4b37      	ldr	r3, [pc, #220]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a36      	ldr	r2, [pc, #216]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80027a8:	f043 0308 	orr.w	r3, r3, #8
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4931      	ldr	r1, [pc, #196]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c0:	4b2f      	ldr	r3, [pc, #188]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	492c      	ldr	r1, [pc, #176]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	604b      	str	r3, [r1, #4]
 80027d4:	e01a      	b.n	800280c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027d6:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a29      	ldr	r2, [pc, #164]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027e2:	f7ff fc01 	bl	8001fe8 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027ea:	f7ff fbfd 	bl	8001fe8 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e2dd      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027fc:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x1da>
 8002808:	e000      	b.n	800280c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800280a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d074      	beq.n	8002902 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2b08      	cmp	r3, #8
 800281c:	d005      	beq.n	800282a <HAL_RCC_OscConfig+0x21a>
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b0c      	cmp	r3, #12
 8002822:	d10e      	bne.n	8002842 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2b03      	cmp	r3, #3
 8002828:	d10b      	bne.n	8002842 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d064      	beq.n	8002900 <HAL_RCC_OscConfig+0x2f0>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d160      	bne.n	8002900 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e2ba      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284a:	d106      	bne.n	800285a <HAL_RCC_OscConfig+0x24a>
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 8002852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	e026      	b.n	80028a8 <HAL_RCC_OscConfig+0x298>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002862:	d115      	bne.n	8002890 <HAL_RCC_OscConfig+0x280>
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a05      	ldr	r2, [pc, #20]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 800286a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a02      	ldr	r2, [pc, #8]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e014      	b.n	80028a8 <HAL_RCC_OscConfig+0x298>
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	0800817c 	.word	0x0800817c
 8002888:	20000030 	.word	0x20000030
 800288c:	20000034 	.word	0x20000034
 8002890:	4ba0      	ldr	r3, [pc, #640]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a9f      	ldr	r2, [pc, #636]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b9d      	ldr	r3, [pc, #628]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a9c      	ldr	r2, [pc, #624]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 80028a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b0:	f7ff fb9a 	bl	8001fe8 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b8:	f7ff fb96 	bl	8001fe8 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e276      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ca:	4b92      	ldr	r3, [pc, #584]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x2a8>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7ff fb86 	bl	8001fe8 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e0:	f7ff fb82 	bl	8001fe8 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e262      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028f2:	4b88      	ldr	r3, [pc, #544]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2d0>
 80028fe:	e000      	b.n	8002902 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d060      	beq.n	80029d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	2b04      	cmp	r3, #4
 8002912:	d005      	beq.n	8002920 <HAL_RCC_OscConfig+0x310>
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	2b0c      	cmp	r3, #12
 8002918:	d119      	bne.n	800294e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d116      	bne.n	800294e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002920:	4b7c      	ldr	r3, [pc, #496]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_OscConfig+0x328>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e23f      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002938:	4b76      	ldr	r3, [pc, #472]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	4973      	ldr	r1, [pc, #460]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294c:	e040      	b.n	80029d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d023      	beq.n	800299e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002956:	4b6f      	ldr	r3, [pc, #444]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a6e      	ldr	r2, [pc, #440]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 800295c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7ff fb41 	bl	8001fe8 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296a:	f7ff fb3d 	bl	8001fe8 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e21d      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800297c:	4b65      	ldr	r3, [pc, #404]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002988:	4b62      	ldr	r3, [pc, #392]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	061b      	lsls	r3, r3, #24
 8002996:	495f      	ldr	r1, [pc, #380]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
 800299c:	e018      	b.n	80029d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299e:	4b5d      	ldr	r3, [pc, #372]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a5c      	ldr	r2, [pc, #368]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 80029a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7ff fb1d 	bl	8001fe8 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b2:	f7ff fb19 	bl	8001fe8 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e1f9      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029c4:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d03c      	beq.n	8002a56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01c      	beq.n	8002a1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e4:	4b4b      	ldr	r3, [pc, #300]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 80029e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ea:	4a4a      	ldr	r2, [pc, #296]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7ff faf8 	bl	8001fe8 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fc:	f7ff faf4 	bl	8001fe8 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1d4      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a0e:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ef      	beq.n	80029fc <HAL_RCC_OscConfig+0x3ec>
 8002a1c:	e01b      	b.n	8002a56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a24:	4a3b      	ldr	r2, [pc, #236]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2e:	f7ff fadb 	bl	8001fe8 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a36:	f7ff fad7 	bl	8001fe8 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e1b7      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a48:	4b32      	ldr	r3, [pc, #200]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1ef      	bne.n	8002a36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80a6 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a64:	2300      	movs	r3, #0
 8002a66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a68:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10d      	bne.n	8002a90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a74:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	4a26      	ldr	r2, [pc, #152]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a80:	4b24      	ldr	r3, [pc, #144]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a90:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <HAL_RCC_OscConfig+0x508>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d118      	bne.n	8002ace <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <HAL_RCC_OscConfig+0x508>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <HAL_RCC_OscConfig+0x508>)
 8002aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa8:	f7ff fa9e 	bl	8001fe8 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab0:	f7ff fa9a 	bl	8001fe8 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e17a      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <HAL_RCC_OscConfig+0x508>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d108      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4d8>
 8002ad6:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	4a0d      	ldr	r2, [pc, #52]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ae6:	e029      	b.n	8002b3c <HAL_RCC_OscConfig+0x52c>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b05      	cmp	r3, #5
 8002aee:	d115      	bne.n	8002b1c <HAL_RCC_OscConfig+0x50c>
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af6:	4a07      	ldr	r2, [pc, #28]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b06:	4a03      	ldr	r2, [pc, #12]	; (8002b14 <HAL_RCC_OscConfig+0x504>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b10:	e014      	b.n	8002b3c <HAL_RCC_OscConfig+0x52c>
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40007000 	.word	0x40007000
 8002b1c:	4b9c      	ldr	r3, [pc, #624]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b22:	4a9b      	ldr	r2, [pc, #620]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b2c:	4b98      	ldr	r3, [pc, #608]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	4a97      	ldr	r2, [pc, #604]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002b34:	f023 0304 	bic.w	r3, r3, #4
 8002b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d016      	beq.n	8002b72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b44:	f7ff fa50 	bl	8001fe8 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4c:	f7ff fa4c 	bl	8001fe8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e12a      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b62:	4b8b      	ldr	r3, [pc, #556]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0ed      	beq.n	8002b4c <HAL_RCC_OscConfig+0x53c>
 8002b70:	e015      	b.n	8002b9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b72:	f7ff fa39 	bl	8001fe8 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7a:	f7ff fa35 	bl	8001fe8 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e113      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b90:	4b7f      	ldr	r3, [pc, #508]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1ed      	bne.n	8002b7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d105      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba4:	4b7a      	ldr	r3, [pc, #488]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba8:	4a79      	ldr	r2, [pc, #484]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80fe 	beq.w	8002db6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	f040 80d0 	bne.w	8002d64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bc4:	4b72      	ldr	r3, [pc, #456]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f003 0203 	and.w	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d130      	bne.n	8002c3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	3b01      	subs	r3, #1
 8002be4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d127      	bne.n	8002c3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d11f      	bne.n	8002c3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c04:	2a07      	cmp	r2, #7
 8002c06:	bf14      	ite	ne
 8002c08:	2201      	movne	r2, #1
 8002c0a:	2200      	moveq	r2, #0
 8002c0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d113      	bne.n	8002c3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d109      	bne.n	8002c3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	085b      	lsrs	r3, r3, #1
 8002c32:	3b01      	subs	r3, #1
 8002c34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d06e      	beq.n	8002d18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2b0c      	cmp	r3, #12
 8002c3e:	d069      	beq.n	8002d14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c40:	4b53      	ldr	r3, [pc, #332]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d105      	bne.n	8002c58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c4c:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0ad      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c5c:	4b4c      	ldr	r3, [pc, #304]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a4b      	ldr	r2, [pc, #300]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c68:	f7ff f9be 	bl	8001fe8 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7ff f9ba 	bl	8001fe8 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e09a      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c82:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c8e:	4b40      	ldr	r3, [pc, #256]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	4b40      	ldr	r3, [pc, #256]	; (8002d94 <HAL_RCC_OscConfig+0x784>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c9e:	3a01      	subs	r2, #1
 8002ca0:	0112      	lsls	r2, r2, #4
 8002ca2:	4311      	orrs	r1, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ca8:	0212      	lsls	r2, r2, #8
 8002caa:	4311      	orrs	r1, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cb0:	0852      	lsrs	r2, r2, #1
 8002cb2:	3a01      	subs	r2, #1
 8002cb4:	0552      	lsls	r2, r2, #21
 8002cb6:	4311      	orrs	r1, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cbc:	0852      	lsrs	r2, r2, #1
 8002cbe:	3a01      	subs	r2, #1
 8002cc0:	0652      	lsls	r2, r2, #25
 8002cc2:	4311      	orrs	r1, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cc8:	0912      	lsrs	r2, r2, #4
 8002cca:	0452      	lsls	r2, r2, #17
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	4930      	ldr	r1, [pc, #192]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cd4:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2d      	ldr	r2, [pc, #180]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ce0:	4b2b      	ldr	r3, [pc, #172]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a2a      	ldr	r2, [pc, #168]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cec:	f7ff f97c 	bl	8001fe8 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7ff f978 	bl	8001fe8 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e058      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d06:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d12:	e050      	b.n	8002db6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e04f      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d148      	bne.n	8002db6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d24:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a19      	ldr	r2, [pc, #100]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d3c:	f7ff f954 	bl	8001fe8 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d44:	f7ff f950 	bl	8001fe8 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e030      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d56:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x734>
 8002d62:	e028      	b.n	8002db6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b0c      	cmp	r3, #12
 8002d68:	d023      	beq.n	8002db2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <HAL_RCC_OscConfig+0x780>)
 8002d70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7ff f937 	bl	8001fe8 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d7c:	e00c      	b.n	8002d98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7e:	f7ff f933 	bl	8001fe8 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d905      	bls.n	8002d98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e013      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
 8002d90:	40021000 	.word	0x40021000
 8002d94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ec      	bne.n	8002d7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	4905      	ldr	r1, [pc, #20]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_RCC_OscConfig+0x7b4>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	60cb      	str	r3, [r1, #12]
 8002db0:	e001      	b.n	8002db6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3720      	adds	r7, #32
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	feeefffc 	.word	0xfeeefffc

08002dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0e7      	b.n	8002fac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b75      	ldr	r3, [pc, #468]	; (8002fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d910      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b72      	ldr	r3, [pc, #456]	; (8002fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 0207 	bic.w	r2, r3, #7
 8002df2:	4970      	ldr	r1, [pc, #448]	; (8002fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b6e      	ldr	r3, [pc, #440]	; (8002fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0cf      	b.n	8002fac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d010      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	4b66      	ldr	r3, [pc, #408]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d908      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e28:	4b63      	ldr	r3, [pc, #396]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4960      	ldr	r1, [pc, #384]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d04c      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4e:	4b5a      	ldr	r3, [pc, #360]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d121      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0a6      	b.n	8002fac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d107      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e66:	4b54      	ldr	r3, [pc, #336]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d115      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e09a      	b.n	8002fac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e7e:	4b4e      	ldr	r3, [pc, #312]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e08e      	b.n	8002fac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e8e:	4b4a      	ldr	r3, [pc, #296]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e086      	b.n	8002fac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e9e:	4b46      	ldr	r3, [pc, #280]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f023 0203 	bic.w	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	4943      	ldr	r1, [pc, #268]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb0:	f7ff f89a 	bl	8001fe8 <HAL_GetTick>
 8002eb4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb6:	e00a      	b.n	8002ece <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb8:	f7ff f896 	bl	8001fe8 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e06e      	b.n	8002fac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ece:	4b3a      	ldr	r3, [pc, #232]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 020c 	and.w	r2, r3, #12
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d1eb      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d010      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	4b31      	ldr	r3, [pc, #196]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d208      	bcs.n	8002f0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efc:	4b2e      	ldr	r3, [pc, #184]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	492b      	ldr	r1, [pc, #172]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d210      	bcs.n	8002f3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 0207 	bic.w	r2, r3, #7
 8002f24:	4923      	ldr	r1, [pc, #140]	; (8002fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2c:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d001      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e036      	b.n	8002fac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	4918      	ldr	r1, [pc, #96]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d009      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4910      	ldr	r1, [pc, #64]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f7c:	f000 f824 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	490b      	ldr	r1, [pc, #44]	; (8002fbc <HAL_RCC_ClockConfig+0x1f4>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
 8002f98:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8002f9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_RCC_ClockConfig+0x1fc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe fe41 	bl	8001c28 <HAL_InitTick>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002faa:	7afb      	ldrb	r3, [r7, #11]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40022000 	.word	0x40022000
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	0800817c 	.word	0x0800817c
 8002fc0:	20000030 	.word	0x20000030
 8002fc4:	20000034 	.word	0x20000034

08002fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fd6:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x34>
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b0c      	cmp	r3, #12
 8002ff4:	d121      	bne.n	800303a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d11e      	bne.n	800303a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ffc:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003008:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800300a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	e005      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003018:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	091b      	lsrs	r3, r3, #4
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003024:	4a2b      	ldr	r2, [pc, #172]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10d      	bne.n	8003050 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d102      	bne.n	8003046 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003040:	4b25      	ldr	r3, [pc, #148]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	e004      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b08      	cmp	r3, #8
 800304a:	d101      	bne.n	8003050 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800304c:	4b23      	ldr	r3, [pc, #140]	; (80030dc <HAL_RCC_GetSysClockFreq+0x114>)
 800304e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d134      	bne.n	80030c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003056:	4b1e      	ldr	r3, [pc, #120]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d003      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0xa6>
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d003      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0xac>
 800306c:	e005      	b.n	800307a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003070:	617b      	str	r3, [r7, #20]
      break;
 8003072:	e005      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003074:	4b19      	ldr	r3, [pc, #100]	; (80030dc <HAL_RCC_GetSysClockFreq+0x114>)
 8003076:	617b      	str	r3, [r7, #20]
      break;
 8003078:	e002      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	617b      	str	r3, [r7, #20]
      break;
 800307e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	3301      	adds	r3, #1
 800308c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800308e:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	fb03 f202 	mul.w	r2, r3, r2
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	0e5b      	lsrs	r3, r3, #25
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	3301      	adds	r3, #1
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030c0:	69bb      	ldr	r3, [r7, #24]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	; 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000
 80030d4:	08008194 	.word	0x08008194
 80030d8:	00f42400 	.word	0x00f42400
 80030dc:	007a1200 	.word	0x007a1200

080030e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e4:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000030 	.word	0x20000030

080030f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030fc:	f7ff fff0 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 8003100:	4602      	mov	r2, r0
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	0a1b      	lsrs	r3, r3, #8
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	4904      	ldr	r1, [pc, #16]	; (8003120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800310e:	5ccb      	ldrb	r3, [r1, r3]
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	0800818c 	.word	0x0800818c

08003124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003128:	f7ff ffda 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 800312c:	4602      	mov	r2, r0
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	0adb      	lsrs	r3, r3, #11
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	4904      	ldr	r1, [pc, #16]	; (800314c <HAL_RCC_GetPCLK2Freq+0x28>)
 800313a:	5ccb      	ldrb	r3, [r1, r3]
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000
 800314c:	0800818c 	.word	0x0800818c

08003150 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	220f      	movs	r2, #15
 800315e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003160:	4b12      	ldr	r3, [pc, #72]	; (80031ac <HAL_RCC_GetClockConfig+0x5c>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 0203 	and.w	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <HAL_RCC_GetClockConfig+0x5c>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <HAL_RCC_GetClockConfig+0x5c>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_RCC_GetClockConfig+0x5c>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	08db      	lsrs	r3, r3, #3
 800318a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003192:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <HAL_RCC_GetClockConfig+0x60>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0207 	and.w	r2, r3, #7
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	601a      	str	r2, [r3, #0]
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40022000 	.word	0x40022000

080031b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031bc:	2300      	movs	r3, #0
 80031be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031c0:	4b2a      	ldr	r3, [pc, #168]	; (800326c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031cc:	f7ff f9bc 	bl	8002548 <HAL_PWREx_GetVoltageRange>
 80031d0:	6178      	str	r0, [r7, #20]
 80031d2:	e014      	b.n	80031fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031d4:	4b25      	ldr	r3, [pc, #148]	; (800326c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	4a24      	ldr	r2, [pc, #144]	; (800326c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031de:	6593      	str	r3, [r2, #88]	; 0x58
 80031e0:	4b22      	ldr	r3, [pc, #136]	; (800326c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031ec:	f7ff f9ac 	bl	8002548 <HAL_PWREx_GetVoltageRange>
 80031f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031f2:	4b1e      	ldr	r3, [pc, #120]	; (800326c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	4a1d      	ldr	r2, [pc, #116]	; (800326c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003204:	d10b      	bne.n	800321e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b80      	cmp	r3, #128	; 0x80
 800320a:	d919      	bls.n	8003240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2ba0      	cmp	r3, #160	; 0xa0
 8003210:	d902      	bls.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003212:	2302      	movs	r3, #2
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	e013      	b.n	8003240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003218:	2301      	movs	r3, #1
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	e010      	b.n	8003240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b80      	cmp	r3, #128	; 0x80
 8003222:	d902      	bls.n	800322a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003224:	2303      	movs	r3, #3
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	e00a      	b.n	8003240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b80      	cmp	r3, #128	; 0x80
 800322e:	d102      	bne.n	8003236 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003230:	2302      	movs	r3, #2
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	e004      	b.n	8003240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b70      	cmp	r3, #112	; 0x70
 800323a:	d101      	bne.n	8003240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800323c:	2301      	movs	r3, #1
 800323e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 0207 	bic.w	r2, r3, #7
 8003248:	4909      	ldr	r1, [pc, #36]	; (8003270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003250:	4b07      	ldr	r3, [pc, #28]	; (8003270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	429a      	cmp	r2, r3
 800325c:	d001      	beq.n	8003262 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	40022000 	.word	0x40022000

08003274 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800327c:	2300      	movs	r3, #0
 800327e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003280:	2300      	movs	r3, #0
 8003282:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328c:	2b00      	cmp	r3, #0
 800328e:	d041      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003294:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003298:	d02a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800329a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800329e:	d824      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032a4:	d008      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032aa:	d81e      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b4:	d010      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032b6:	e018      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032b8:	4b86      	ldr	r3, [pc, #536]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4a85      	ldr	r2, [pc, #532]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c4:	e015      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3304      	adds	r3, #4
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fabb 	bl	8003848 <RCCEx_PLLSAI1_Config>
 80032d2:	4603      	mov	r3, r0
 80032d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032d6:	e00c      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3320      	adds	r3, #32
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fba6 	bl	8003a30 <RCCEx_PLLSAI2_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032e8:	e003      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	74fb      	strb	r3, [r7, #19]
      break;
 80032ee:	e000      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f2:	7cfb      	ldrb	r3, [r7, #19]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10b      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032f8:	4b76      	ldr	r3, [pc, #472]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003306:	4973      	ldr	r1, [pc, #460]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800330e:	e001      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d041      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003324:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003328:	d02a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800332a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800332e:	d824      	bhi.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003334:	d008      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003336:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800333a:	d81e      	bhi.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003344:	d010      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003346:	e018      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003348:	4b62      	ldr	r3, [pc, #392]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a61      	ldr	r2, [pc, #388]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003352:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003354:	e015      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fa73 	bl	8003848 <RCCEx_PLLSAI1_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003366:	e00c      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3320      	adds	r3, #32
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fb5e 	bl	8003a30 <RCCEx_PLLSAI2_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003378:	e003      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	74fb      	strb	r3, [r7, #19]
      break;
 800337e:	e000      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003388:	4b52      	ldr	r3, [pc, #328]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003396:	494f      	ldr	r1, [pc, #316]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800339e:	e001      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a0:	7cfb      	ldrb	r3, [r7, #19]
 80033a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80a0 	beq.w	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b2:	2300      	movs	r3, #0
 80033b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033b6:	4b47      	ldr	r3, [pc, #284]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00d      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033cc:	4b41      	ldr	r3, [pc, #260]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d0:	4a40      	ldr	r2, [pc, #256]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d6:	6593      	str	r3, [r2, #88]	; 0x58
 80033d8:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e4:	2301      	movs	r3, #1
 80033e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033e8:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a3a      	ldr	r2, [pc, #232]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033f4:	f7fe fdf8 	bl	8001fe8 <HAL_GetTick>
 80033f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033fa:	e009      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fc:	f7fe fdf4 	bl	8001fe8 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d902      	bls.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	74fb      	strb	r3, [r7, #19]
        break;
 800340e:	e005      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003410:	4b31      	ldr	r3, [pc, #196]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0ef      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d15c      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003422:	4b2c      	ldr	r3, [pc, #176]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01f      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	429a      	cmp	r2, r3
 800343e:	d019      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003440:	4b24      	ldr	r3, [pc, #144]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800344c:	4b21      	ldr	r3, [pc, #132]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	4a20      	ldr	r2, [pc, #128]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800345c:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	4a1c      	ldr	r2, [pc, #112]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800346c:	4a19      	ldr	r2, [pc, #100]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d016      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fe fdb3 	bl	8001fe8 <HAL_GetTick>
 8003482:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003484:	e00b      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fe fdaf 	bl	8001fe8 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	; 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d902      	bls.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	74fb      	strb	r3, [r7, #19]
            break;
 800349c:	e006      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ec      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10c      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034b2:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034c2:	4904      	ldr	r1, [pc, #16]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034ca:	e009      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034cc:	7cfb      	ldrb	r3, [r7, #19]
 80034ce:	74bb      	strb	r3, [r7, #18]
 80034d0:	e006      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034dc:	7cfb      	ldrb	r3, [r7, #19]
 80034de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034e0:	7c7b      	ldrb	r3, [r7, #17]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d105      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e6:	4b9e      	ldr	r3, [pc, #632]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ea:	4a9d      	ldr	r2, [pc, #628]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034fe:	4b98      	ldr	r3, [pc, #608]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003504:	f023 0203 	bic.w	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	4994      	ldr	r1, [pc, #592]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003520:	4b8f      	ldr	r3, [pc, #572]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f023 020c 	bic.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352e:	498c      	ldr	r1, [pc, #560]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003542:	4b87      	ldr	r3, [pc, #540]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003548:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	4983      	ldr	r1, [pc, #524]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003564:	4b7e      	ldr	r3, [pc, #504]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	497b      	ldr	r1, [pc, #492]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003586:	4b76      	ldr	r3, [pc, #472]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003594:	4972      	ldr	r1, [pc, #456]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035a8:	4b6d      	ldr	r3, [pc, #436]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b6:	496a      	ldr	r1, [pc, #424]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035ca:	4b65      	ldr	r3, [pc, #404]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	4961      	ldr	r1, [pc, #388]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035ec:	4b5c      	ldr	r3, [pc, #368]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fa:	4959      	ldr	r1, [pc, #356]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800360e:	4b54      	ldr	r3, [pc, #336]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003614:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361c:	4950      	ldr	r1, [pc, #320]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003630:	4b4b      	ldr	r3, [pc, #300]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003636:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363e:	4948      	ldr	r1, [pc, #288]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003652:	4b43      	ldr	r3, [pc, #268]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	493f      	ldr	r1, [pc, #252]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d028      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003674:	4b3a      	ldr	r3, [pc, #232]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003682:	4937      	ldr	r1, [pc, #220]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800368e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003692:	d106      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003694:	4b32      	ldr	r3, [pc, #200]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4a31      	ldr	r2, [pc, #196]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800369e:	60d3      	str	r3, [r2, #12]
 80036a0:	e011      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036aa:	d10c      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3304      	adds	r3, #4
 80036b0:	2101      	movs	r1, #1
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f8c8 	bl	8003848 <RCCEx_PLLSAI1_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036bc:	7cfb      	ldrb	r3, [r7, #19]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80036c2:	7cfb      	ldrb	r3, [r7, #19]
 80036c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d028      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	491f      	ldr	r1, [pc, #124]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f0:	d106      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f2:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036fc:	60d3      	str	r3, [r2, #12]
 80036fe:	e011      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003708:	d10c      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	2101      	movs	r1, #1
 8003710:	4618      	mov	r0, r3
 8003712:	f000 f899 	bl	8003848 <RCCEx_PLLSAI1_Config>
 8003716:	4603      	mov	r3, r0
 8003718:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d02b      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373e:	4908      	ldr	r1, [pc, #32]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800374e:	d109      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4a02      	ldr	r2, [pc, #8]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800375a:	60d3      	str	r3, [r2, #12]
 800375c:	e014      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003768:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800376c:	d10c      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	2101      	movs	r1, #1
 8003774:	4618      	mov	r0, r3
 8003776:	f000 f867 	bl	8003848 <RCCEx_PLLSAI1_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003784:	7cfb      	ldrb	r3, [r7, #19]
 8003786:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d02f      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003794:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a2:	4928      	ldr	r1, [pc, #160]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037b2:	d10d      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	2102      	movs	r1, #2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f844 	bl	8003848 <RCCEx_PLLSAI1_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c4:	7cfb      	ldrb	r3, [r7, #19]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d014      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	74bb      	strb	r3, [r7, #18]
 80037ce:	e011      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3320      	adds	r3, #32
 80037de:	2102      	movs	r1, #2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 f925 	bl	8003a30 <RCCEx_PLLSAI2_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ea:	7cfb      	ldrb	r3, [r7, #19]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003800:	4b10      	ldr	r3, [pc, #64]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800380e:	490d      	ldr	r1, [pc, #52]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00b      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003832:	4904      	ldr	r1, [pc, #16]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800383a:	7cbb      	ldrb	r3, [r7, #18]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000

08003848 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003856:	4b75      	ldr	r3, [pc, #468]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d018      	beq.n	8003894 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003862:	4b72      	ldr	r3, [pc, #456]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0203 	and.w	r2, r3, #3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d10d      	bne.n	800388e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
       ||
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800387a:	4b6c      	ldr	r3, [pc, #432]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
       ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d047      	beq.n	800391e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
 8003892:	e044      	b.n	800391e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b03      	cmp	r3, #3
 800389a:	d018      	beq.n	80038ce <RCCEx_PLLSAI1_Config+0x86>
 800389c:	2b03      	cmp	r3, #3
 800389e:	d825      	bhi.n	80038ec <RCCEx_PLLSAI1_Config+0xa4>
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d002      	beq.n	80038aa <RCCEx_PLLSAI1_Config+0x62>
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d009      	beq.n	80038bc <RCCEx_PLLSAI1_Config+0x74>
 80038a8:	e020      	b.n	80038ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038aa:	4b60      	ldr	r3, [pc, #384]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11d      	bne.n	80038f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ba:	e01a      	b.n	80038f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038bc:	4b5b      	ldr	r3, [pc, #364]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d116      	bne.n	80038f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038cc:	e013      	b.n	80038f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038ce:	4b57      	ldr	r3, [pc, #348]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10f      	bne.n	80038fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038da:	4b54      	ldr	r3, [pc, #336]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038ea:	e006      	b.n	80038fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
      break;
 80038f0:	e004      	b.n	80038fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038f2:	bf00      	nop
 80038f4:	e002      	b.n	80038fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038f6:	bf00      	nop
 80038f8:	e000      	b.n	80038fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10d      	bne.n	800391e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003902:	4b4a      	ldr	r3, [pc, #296]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6819      	ldr	r1, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	3b01      	subs	r3, #1
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	430b      	orrs	r3, r1
 8003918:	4944      	ldr	r1, [pc, #272]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d17d      	bne.n	8003a20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003924:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a40      	ldr	r2, [pc, #256]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 800392a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800392e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003930:	f7fe fb5a 	bl	8001fe8 <HAL_GetTick>
 8003934:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003936:	e009      	b.n	800394c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003938:	f7fe fb56 	bl	8001fe8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d902      	bls.n	800394c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	73fb      	strb	r3, [r7, #15]
        break;
 800394a:	e005      	b.n	8003958 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800394c:	4b37      	ldr	r3, [pc, #220]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1ef      	bne.n	8003938 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d160      	bne.n	8003a20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d111      	bne.n	8003988 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003964:	4b31      	ldr	r3, [pc, #196]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800396c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6892      	ldr	r2, [r2, #8]
 8003974:	0211      	lsls	r1, r2, #8
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68d2      	ldr	r2, [r2, #12]
 800397a:	0912      	lsrs	r2, r2, #4
 800397c:	0452      	lsls	r2, r2, #17
 800397e:	430a      	orrs	r2, r1
 8003980:	492a      	ldr	r1, [pc, #168]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	4313      	orrs	r3, r2
 8003984:	610b      	str	r3, [r1, #16]
 8003986:	e027      	b.n	80039d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d112      	bne.n	80039b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800398e:	4b27      	ldr	r3, [pc, #156]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003996:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6892      	ldr	r2, [r2, #8]
 800399e:	0211      	lsls	r1, r2, #8
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6912      	ldr	r2, [r2, #16]
 80039a4:	0852      	lsrs	r2, r2, #1
 80039a6:	3a01      	subs	r2, #1
 80039a8:	0552      	lsls	r2, r2, #21
 80039aa:	430a      	orrs	r2, r1
 80039ac:	491f      	ldr	r1, [pc, #124]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	610b      	str	r3, [r1, #16]
 80039b2:	e011      	b.n	80039d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6892      	ldr	r2, [r2, #8]
 80039c4:	0211      	lsls	r1, r2, #8
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6952      	ldr	r2, [r2, #20]
 80039ca:	0852      	lsrs	r2, r2, #1
 80039cc:	3a01      	subs	r2, #1
 80039ce:	0652      	lsls	r2, r2, #25
 80039d0:	430a      	orrs	r2, r1
 80039d2:	4916      	ldr	r1, [pc, #88]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039d8:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a13      	ldr	r2, [pc, #76]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e4:	f7fe fb00 	bl	8001fe8 <HAL_GetTick>
 80039e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039ea:	e009      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039ec:	f7fe fafc 	bl	8001fe8 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d902      	bls.n	8003a00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	73fb      	strb	r3, [r7, #15]
          break;
 80039fe:	e005      	b.n	8003a0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a00:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0ef      	beq.n	80039ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a14:	691a      	ldr	r2, [r3, #16]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	4904      	ldr	r1, [pc, #16]	; (8003a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000

08003a30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a3e:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d018      	beq.n	8003a7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a4a:	4b67      	ldr	r3, [pc, #412]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0203 	and.w	r2, r3, #3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d10d      	bne.n	8003a76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a62:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	091b      	lsrs	r3, r3, #4
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
       ||
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d047      	beq.n	8003b06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	73fb      	strb	r3, [r7, #15]
 8003a7a:	e044      	b.n	8003b06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d018      	beq.n	8003ab6 <RCCEx_PLLSAI2_Config+0x86>
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d825      	bhi.n	8003ad4 <RCCEx_PLLSAI2_Config+0xa4>
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d002      	beq.n	8003a92 <RCCEx_PLLSAI2_Config+0x62>
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d009      	beq.n	8003aa4 <RCCEx_PLLSAI2_Config+0x74>
 8003a90:	e020      	b.n	8003ad4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a92:	4b55      	ldr	r3, [pc, #340]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d11d      	bne.n	8003ada <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa2:	e01a      	b.n	8003ada <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003aa4:	4b50      	ldr	r3, [pc, #320]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d116      	bne.n	8003ade <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab4:	e013      	b.n	8003ade <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ab6:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10f      	bne.n	8003ae2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ac2:	4b49      	ldr	r3, [pc, #292]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ad2:	e006      	b.n	8003ae2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad8:	e004      	b.n	8003ae4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ada:	bf00      	nop
 8003adc:	e002      	b.n	8003ae4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e000      	b.n	8003ae4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ae2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10d      	bne.n	8003b06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003aea:	4b3f      	ldr	r3, [pc, #252]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6819      	ldr	r1, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	430b      	orrs	r3, r1
 8003b00:	4939      	ldr	r1, [pc, #228]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d167      	bne.n	8003bdc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b0c:	4b36      	ldr	r3, [pc, #216]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a35      	ldr	r2, [pc, #212]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b18:	f7fe fa66 	bl	8001fe8 <HAL_GetTick>
 8003b1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b1e:	e009      	b.n	8003b34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b20:	f7fe fa62 	bl	8001fe8 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d902      	bls.n	8003b34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	73fb      	strb	r3, [r7, #15]
        break;
 8003b32:	e005      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b34:	4b2c      	ldr	r3, [pc, #176]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1ef      	bne.n	8003b20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d14a      	bne.n	8003bdc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d111      	bne.n	8003b70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b4c:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6892      	ldr	r2, [r2, #8]
 8003b5c:	0211      	lsls	r1, r2, #8
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68d2      	ldr	r2, [r2, #12]
 8003b62:	0912      	lsrs	r2, r2, #4
 8003b64:	0452      	lsls	r2, r2, #17
 8003b66:	430a      	orrs	r2, r1
 8003b68:	491f      	ldr	r1, [pc, #124]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	614b      	str	r3, [r1, #20]
 8003b6e:	e011      	b.n	8003b94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b70:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6892      	ldr	r2, [r2, #8]
 8003b80:	0211      	lsls	r1, r2, #8
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6912      	ldr	r2, [r2, #16]
 8003b86:	0852      	lsrs	r2, r2, #1
 8003b88:	3a01      	subs	r2, #1
 8003b8a:	0652      	lsls	r2, r2, #25
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	4916      	ldr	r1, [pc, #88]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b94:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fe fa22 	bl	8001fe8 <HAL_GetTick>
 8003ba4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ba6:	e009      	b.n	8003bbc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ba8:	f7fe fa1e 	bl	8001fe8 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d902      	bls.n	8003bbc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	73fb      	strb	r3, [r7, #15]
          break;
 8003bba:	e005      	b.n	8003bc8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0ef      	beq.n	8003ba8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bce:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	4904      	ldr	r1, [pc, #16]	; (8003be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000

08003bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e049      	b.n	8003c92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd ff54 	bl	8001ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3304      	adds	r3, #4
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	f000 fe4a 	bl	80048c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d001      	beq.n	8003cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e04f      	b.n	8003d54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a23      	ldr	r2, [pc, #140]	; (8003d60 <HAL_TIM_Base_Start_IT+0xc4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d01d      	beq.n	8003d12 <HAL_TIM_Base_Start_IT+0x76>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cde:	d018      	beq.n	8003d12 <HAL_TIM_Base_Start_IT+0x76>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1f      	ldr	r2, [pc, #124]	; (8003d64 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_TIM_Base_Start_IT+0x76>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1e      	ldr	r2, [pc, #120]	; (8003d68 <HAL_TIM_Base_Start_IT+0xcc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00e      	beq.n	8003d12 <HAL_TIM_Base_Start_IT+0x76>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1c      	ldr	r2, [pc, #112]	; (8003d6c <HAL_TIM_Base_Start_IT+0xd0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d009      	beq.n	8003d12 <HAL_TIM_Base_Start_IT+0x76>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d004      	beq.n	8003d12 <HAL_TIM_Base_Start_IT+0x76>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a19      	ldr	r2, [pc, #100]	; (8003d74 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d115      	bne.n	8003d3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b06      	cmp	r3, #6
 8003d22:	d015      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0xb4>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2a:	d011      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3c:	e008      	b.n	8003d50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0201 	orr.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	e000      	b.n	8003d52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800
 8003d6c:	40000c00 	.word	0x40000c00
 8003d70:	40013400 	.word	0x40013400
 8003d74:	40014000 	.word	0x40014000
 8003d78:	00010007 	.word	0x00010007

08003d7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e049      	b.n	8003e22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f841 	bl	8003e2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4619      	mov	r1, r3
 8003dba:	4610      	mov	r0, r2
 8003dbc:	f000 fd82 	bl	80048c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
	...

08003e40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d109      	bne.n	8003e64 <HAL_TIM_PWM_Start+0x24>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	bf14      	ite	ne
 8003e5c:	2301      	movne	r3, #1
 8003e5e:	2300      	moveq	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	e03c      	b.n	8003ede <HAL_TIM_PWM_Start+0x9e>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d109      	bne.n	8003e7e <HAL_TIM_PWM_Start+0x3e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	bf14      	ite	ne
 8003e76:	2301      	movne	r3, #1
 8003e78:	2300      	moveq	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	e02f      	b.n	8003ede <HAL_TIM_PWM_Start+0x9e>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d109      	bne.n	8003e98 <HAL_TIM_PWM_Start+0x58>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	bf14      	ite	ne
 8003e90:	2301      	movne	r3, #1
 8003e92:	2300      	moveq	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e022      	b.n	8003ede <HAL_TIM_PWM_Start+0x9e>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d109      	bne.n	8003eb2 <HAL_TIM_PWM_Start+0x72>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	bf14      	ite	ne
 8003eaa:	2301      	movne	r3, #1
 8003eac:	2300      	moveq	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	e015      	b.n	8003ede <HAL_TIM_PWM_Start+0x9e>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d109      	bne.n	8003ecc <HAL_TIM_PWM_Start+0x8c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	bf14      	ite	ne
 8003ec4:	2301      	movne	r3, #1
 8003ec6:	2300      	moveq	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e008      	b.n	8003ede <HAL_TIM_PWM_Start+0x9e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	bf14      	ite	ne
 8003ed8:	2301      	movne	r3, #1
 8003eda:	2300      	moveq	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e09c      	b.n	8004020 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d104      	bne.n	8003ef6 <HAL_TIM_PWM_Start+0xb6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef4:	e023      	b.n	8003f3e <HAL_TIM_PWM_Start+0xfe>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d104      	bne.n	8003f06 <HAL_TIM_PWM_Start+0xc6>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f04:	e01b      	b.n	8003f3e <HAL_TIM_PWM_Start+0xfe>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d104      	bne.n	8003f16 <HAL_TIM_PWM_Start+0xd6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f14:	e013      	b.n	8003f3e <HAL_TIM_PWM_Start+0xfe>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b0c      	cmp	r3, #12
 8003f1a:	d104      	bne.n	8003f26 <HAL_TIM_PWM_Start+0xe6>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f24:	e00b      	b.n	8003f3e <HAL_TIM_PWM_Start+0xfe>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d104      	bne.n	8003f36 <HAL_TIM_PWM_Start+0xf6>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f34:	e003      	b.n	8003f3e <HAL_TIM_PWM_Start+0xfe>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2201      	movs	r2, #1
 8003f44:	6839      	ldr	r1, [r7, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 f8c6 	bl	80050d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a35      	ldr	r2, [pc, #212]	; (8004028 <HAL_TIM_PWM_Start+0x1e8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d013      	beq.n	8003f7e <HAL_TIM_PWM_Start+0x13e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a34      	ldr	r2, [pc, #208]	; (800402c <HAL_TIM_PWM_Start+0x1ec>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00e      	beq.n	8003f7e <HAL_TIM_PWM_Start+0x13e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a32      	ldr	r2, [pc, #200]	; (8004030 <HAL_TIM_PWM_Start+0x1f0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d009      	beq.n	8003f7e <HAL_TIM_PWM_Start+0x13e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a31      	ldr	r2, [pc, #196]	; (8004034 <HAL_TIM_PWM_Start+0x1f4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_TIM_PWM_Start+0x13e>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a2f      	ldr	r2, [pc, #188]	; (8004038 <HAL_TIM_PWM_Start+0x1f8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_TIM_PWM_Start+0x142>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <HAL_TIM_PWM_Start+0x144>
 8003f82:	2300      	movs	r3, #0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d007      	beq.n	8003f98 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a22      	ldr	r2, [pc, #136]	; (8004028 <HAL_TIM_PWM_Start+0x1e8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d01d      	beq.n	8003fde <HAL_TIM_PWM_Start+0x19e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003faa:	d018      	beq.n	8003fde <HAL_TIM_PWM_Start+0x19e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a22      	ldr	r2, [pc, #136]	; (800403c <HAL_TIM_PWM_Start+0x1fc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <HAL_TIM_PWM_Start+0x19e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a21      	ldr	r2, [pc, #132]	; (8004040 <HAL_TIM_PWM_Start+0x200>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00e      	beq.n	8003fde <HAL_TIM_PWM_Start+0x19e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1f      	ldr	r2, [pc, #124]	; (8004044 <HAL_TIM_PWM_Start+0x204>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d009      	beq.n	8003fde <HAL_TIM_PWM_Start+0x19e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a17      	ldr	r2, [pc, #92]	; (800402c <HAL_TIM_PWM_Start+0x1ec>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_TIM_PWM_Start+0x19e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a15      	ldr	r2, [pc, #84]	; (8004030 <HAL_TIM_PWM_Start+0x1f0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d115      	bne.n	800400a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	4b18      	ldr	r3, [pc, #96]	; (8004048 <HAL_TIM_PWM_Start+0x208>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b06      	cmp	r3, #6
 8003fee:	d015      	beq.n	800401c <HAL_TIM_PWM_Start+0x1dc>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff6:	d011      	beq.n	800401c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004008:	e008      	b.n	800401c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0201 	orr.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e000      	b.n	800401e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40012c00 	.word	0x40012c00
 800402c:	40013400 	.word	0x40013400
 8004030:	40014000 	.word	0x40014000
 8004034:	40014400 	.word	0x40014400
 8004038:	40014800 	.word	0x40014800
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800
 8004044:	40000c00 	.word	0x40000c00
 8004048:	00010007 	.word	0x00010007

0800404c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e097      	b.n	8004190 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7fd fcdb 	bl	8001a30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004090:	f023 0307 	bic.w	r3, r3, #7
 8004094:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f000 fc0f 	bl	80048c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	4313      	orrs	r3, r2
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80040ec:	f023 030c 	bic.w	r3, r3, #12
 80040f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	4313      	orrs	r3, r2
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	011a      	lsls	r2, r3, #4
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	031b      	lsls	r3, r3, #12
 800411c:	4313      	orrs	r3, r2
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800412a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004132:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	4313      	orrs	r3, r2
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d110      	bne.n	80041ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d102      	bne.n	80041d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80041ce:	7b7b      	ldrb	r3, [r7, #13]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d001      	beq.n	80041d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e069      	b.n	80042ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e8:	e031      	b.n	800424e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d110      	bne.n	8004212 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041f0:	7bbb      	ldrb	r3, [r7, #14]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d102      	bne.n	80041fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041f6:	7b3b      	ldrb	r3, [r7, #12]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d001      	beq.n	8004200 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e055      	b.n	80042ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004210:	e01d      	b.n	800424e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d108      	bne.n	800422a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004218:	7bbb      	ldrb	r3, [r7, #14]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d105      	bne.n	800422a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800421e:	7b7b      	ldrb	r3, [r7, #13]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d102      	bne.n	800422a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004224:	7b3b      	ldrb	r3, [r7, #12]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d001      	beq.n	800422e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e03e      	b.n	80042ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2202      	movs	r2, #2
 800424a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_TIM_Encoder_Start+0xc4>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b04      	cmp	r3, #4
 8004258:	d008      	beq.n	800426c <HAL_TIM_Encoder_Start+0xd4>
 800425a:	e00f      	b.n	800427c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2201      	movs	r2, #1
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f000 ff37 	bl	80050d8 <TIM_CCxChannelCmd>
      break;
 800426a:	e016      	b.n	800429a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2201      	movs	r2, #1
 8004272:	2104      	movs	r1, #4
 8004274:	4618      	mov	r0, r3
 8004276:	f000 ff2f 	bl	80050d8 <TIM_CCxChannelCmd>
      break;
 800427a:	e00e      	b.n	800429a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2201      	movs	r2, #1
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f000 ff27 	bl	80050d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2201      	movs	r2, #1
 8004290:	2104      	movs	r1, #4
 8004292:	4618      	mov	r0, r3
 8004294:	f000 ff20 	bl	80050d8 <TIM_CCxChannelCmd>
      break;
 8004298:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0201 	orr.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d020      	beq.n	8004318 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01b      	beq.n	8004318 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0202 	mvn.w	r2, #2
 80042e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fac1 	bl	8004886 <HAL_TIM_IC_CaptureCallback>
 8004304:	e005      	b.n	8004312 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fab3 	bl	8004872 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fac4 	bl	800489a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	d020      	beq.n	8004364 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01b      	beq.n	8004364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0204 	mvn.w	r2, #4
 8004334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fa9b 	bl	8004886 <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fa8d 	bl	8004872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fa9e 	bl	800489a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d020      	beq.n	80043b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01b      	beq.n	80043b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0208 	mvn.w	r2, #8
 8004380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2204      	movs	r2, #4
 8004386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fa75 	bl	8004886 <HAL_TIM_IC_CaptureCallback>
 800439c:	e005      	b.n	80043aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa67 	bl	8004872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fa78 	bl	800489a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d020      	beq.n	80043fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01b      	beq.n	80043fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0210 	mvn.w	r2, #16
 80043cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2208      	movs	r2, #8
 80043d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fa4f 	bl	8004886 <HAL_TIM_IC_CaptureCallback>
 80043e8:	e005      	b.n	80043f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fa41 	bl	8004872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fa52 	bl	800489a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00c      	beq.n	8004420 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0201 	mvn.w	r2, #1
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fd faae 	bl	800197c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00c      	beq.n	8004444 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800443c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 ff80 	bl	8005344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00c      	beq.n	8004468 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 ff78 	bl	8005358 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00c      	beq.n	800448c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	d007      	beq.n	800448c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fa11 	bl	80048ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00c      	beq.n	80044b0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f003 0320 	and.w	r3, r3, #32
 800449c:	2b00      	cmp	r3, #0
 800449e:	d007      	beq.n	80044b0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0220 	mvn.w	r2, #32
 80044a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 ff40 	bl	8005330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044b0:	bf00      	nop
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e0ff      	b.n	80046d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b14      	cmp	r3, #20
 80044e2:	f200 80f0 	bhi.w	80046c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80044e6:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ec:	08004541 	.word	0x08004541
 80044f0:	080046c7 	.word	0x080046c7
 80044f4:	080046c7 	.word	0x080046c7
 80044f8:	080046c7 	.word	0x080046c7
 80044fc:	08004581 	.word	0x08004581
 8004500:	080046c7 	.word	0x080046c7
 8004504:	080046c7 	.word	0x080046c7
 8004508:	080046c7 	.word	0x080046c7
 800450c:	080045c3 	.word	0x080045c3
 8004510:	080046c7 	.word	0x080046c7
 8004514:	080046c7 	.word	0x080046c7
 8004518:	080046c7 	.word	0x080046c7
 800451c:	08004603 	.word	0x08004603
 8004520:	080046c7 	.word	0x080046c7
 8004524:	080046c7 	.word	0x080046c7
 8004528:	080046c7 	.word	0x080046c7
 800452c:	08004645 	.word	0x08004645
 8004530:	080046c7 	.word	0x080046c7
 8004534:	080046c7 	.word	0x080046c7
 8004538:	080046c7 	.word	0x080046c7
 800453c:	08004685 	.word	0x08004685
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68b9      	ldr	r1, [r7, #8]
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fa56 	bl	80049f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0208 	orr.w	r2, r2, #8
 800455a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0204 	bic.w	r2, r2, #4
 800456a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6999      	ldr	r1, [r3, #24]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	619a      	str	r2, [r3, #24]
      break;
 800457e:	e0a5      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fac6 	bl	8004b18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699a      	ldr	r2, [r3, #24]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800459a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6999      	ldr	r1, [r3, #24]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	021a      	lsls	r2, r3, #8
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	619a      	str	r2, [r3, #24]
      break;
 80045c0:	e084      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fb2f 	bl	8004c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0208 	orr.w	r2, r2, #8
 80045dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69da      	ldr	r2, [r3, #28]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0204 	bic.w	r2, r2, #4
 80045ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69d9      	ldr	r1, [r3, #28]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	61da      	str	r2, [r3, #28]
      break;
 8004600:	e064      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fb97 	bl	8004d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69da      	ldr	r2, [r3, #28]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800461c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69da      	ldr	r2, [r3, #28]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69d9      	ldr	r1, [r3, #28]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	021a      	lsls	r2, r3, #8
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	61da      	str	r2, [r3, #28]
      break;
 8004642:	e043      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fbe0 	bl	8004e10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0208 	orr.w	r2, r2, #8
 800465e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0204 	bic.w	r2, r2, #4
 800466e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	691a      	ldr	r2, [r3, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004682:	e023      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fc24 	bl	8004ed8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800469e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	021a      	lsls	r2, r3, #8
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046c4:	e002      	b.n	80046cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	75fb      	strb	r3, [r7, #23]
      break;
 80046ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop

080046e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_TIM_ConfigClockSource+0x1c>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e0b6      	b.n	800486a <HAL_TIM_ConfigClockSource+0x18a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800471a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800471e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004726:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004738:	d03e      	beq.n	80047b8 <HAL_TIM_ConfigClockSource+0xd8>
 800473a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473e:	f200 8087 	bhi.w	8004850 <HAL_TIM_ConfigClockSource+0x170>
 8004742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004746:	f000 8086 	beq.w	8004856 <HAL_TIM_ConfigClockSource+0x176>
 800474a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474e:	d87f      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x170>
 8004750:	2b70      	cmp	r3, #112	; 0x70
 8004752:	d01a      	beq.n	800478a <HAL_TIM_ConfigClockSource+0xaa>
 8004754:	2b70      	cmp	r3, #112	; 0x70
 8004756:	d87b      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x170>
 8004758:	2b60      	cmp	r3, #96	; 0x60
 800475a:	d050      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0x11e>
 800475c:	2b60      	cmp	r3, #96	; 0x60
 800475e:	d877      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x170>
 8004760:	2b50      	cmp	r3, #80	; 0x50
 8004762:	d03c      	beq.n	80047de <HAL_TIM_ConfigClockSource+0xfe>
 8004764:	2b50      	cmp	r3, #80	; 0x50
 8004766:	d873      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x170>
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	d058      	beq.n	800481e <HAL_TIM_ConfigClockSource+0x13e>
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	d86f      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x170>
 8004770:	2b30      	cmp	r3, #48	; 0x30
 8004772:	d064      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15e>
 8004774:	2b30      	cmp	r3, #48	; 0x30
 8004776:	d86b      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x170>
 8004778:	2b20      	cmp	r3, #32
 800477a:	d060      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15e>
 800477c:	2b20      	cmp	r3, #32
 800477e:	d867      	bhi.n	8004850 <HAL_TIM_ConfigClockSource+0x170>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d05c      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15e>
 8004784:	2b10      	cmp	r3, #16
 8004786:	d05a      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x15e>
 8004788:	e062      	b.n	8004850 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800479a:	f000 fc7d 	bl	8005098 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	609a      	str	r2, [r3, #8]
      break;
 80047b6:	e04f      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047c8:	f000 fc66 	bl	8005098 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047da:	609a      	str	r2, [r3, #8]
      break;
 80047dc:	e03c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ea:	461a      	mov	r2, r3
 80047ec:	f000 fbda 	bl	8004fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2150      	movs	r1, #80	; 0x50
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 fc33 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 80047fc:	e02c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800480a:	461a      	mov	r2, r3
 800480c:	f000 fbf9 	bl	8005002 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2160      	movs	r1, #96	; 0x60
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fc23 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 800481c:	e01c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800482a:	461a      	mov	r2, r3
 800482c:	f000 fbba 	bl	8004fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2140      	movs	r1, #64	; 0x40
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fc13 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 800483c:	e00c      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f000 fc0a 	bl	8005062 <TIM_ITRx_SetConfig>
      break;
 800484e:	e003      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
      break;
 8004854:	e000      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004856:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a40      	ldr	r2, [pc, #256]	; (80049d8 <TIM_Base_SetConfig+0x114>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d013      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e2:	d00f      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a3d      	ldr	r2, [pc, #244]	; (80049dc <TIM_Base_SetConfig+0x118>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00b      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a3c      	ldr	r2, [pc, #240]	; (80049e0 <TIM_Base_SetConfig+0x11c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d007      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a3b      	ldr	r2, [pc, #236]	; (80049e4 <TIM_Base_SetConfig+0x120>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3a      	ldr	r2, [pc, #232]	; (80049e8 <TIM_Base_SetConfig+0x124>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d108      	bne.n	8004916 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2f      	ldr	r2, [pc, #188]	; (80049d8 <TIM_Base_SetConfig+0x114>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d01f      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004924:	d01b      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2c      	ldr	r2, [pc, #176]	; (80049dc <TIM_Base_SetConfig+0x118>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d017      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2b      	ldr	r2, [pc, #172]	; (80049e0 <TIM_Base_SetConfig+0x11c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2a      	ldr	r2, [pc, #168]	; (80049e4 <TIM_Base_SetConfig+0x120>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00f      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a29      	ldr	r2, [pc, #164]	; (80049e8 <TIM_Base_SetConfig+0x124>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00b      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a28      	ldr	r2, [pc, #160]	; (80049ec <TIM_Base_SetConfig+0x128>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d007      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a27      	ldr	r2, [pc, #156]	; (80049f0 <TIM_Base_SetConfig+0x12c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d003      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a26      	ldr	r2, [pc, #152]	; (80049f4 <TIM_Base_SetConfig+0x130>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d108      	bne.n	8004970 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a10      	ldr	r2, [pc, #64]	; (80049d8 <TIM_Base_SetConfig+0x114>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00f      	beq.n	80049bc <TIM_Base_SetConfig+0xf8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a12      	ldr	r2, [pc, #72]	; (80049e8 <TIM_Base_SetConfig+0x124>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00b      	beq.n	80049bc <TIM_Base_SetConfig+0xf8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a11      	ldr	r2, [pc, #68]	; (80049ec <TIM_Base_SetConfig+0x128>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d007      	beq.n	80049bc <TIM_Base_SetConfig+0xf8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a10      	ldr	r2, [pc, #64]	; (80049f0 <TIM_Base_SetConfig+0x12c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d003      	beq.n	80049bc <TIM_Base_SetConfig+0xf8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a0f      	ldr	r2, [pc, #60]	; (80049f4 <TIM_Base_SetConfig+0x130>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d103      	bne.n	80049c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	615a      	str	r2, [r3, #20]
}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40012c00 	.word	0x40012c00
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800
 80049e4:	40000c00 	.word	0x40000c00
 80049e8:	40013400 	.word	0x40013400
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40014400 	.word	0x40014400
 80049f4:	40014800 	.word	0x40014800

080049f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f023 0201 	bic.w	r2, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0303 	bic.w	r3, r3, #3
 8004a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f023 0302 	bic.w	r3, r3, #2
 8004a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a2c      	ldr	r2, [pc, #176]	; (8004b04 <TIM_OC1_SetConfig+0x10c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00f      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a2b      	ldr	r2, [pc, #172]	; (8004b08 <TIM_OC1_SetConfig+0x110>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00b      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a2a      	ldr	r2, [pc, #168]	; (8004b0c <TIM_OC1_SetConfig+0x114>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d007      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a29      	ldr	r2, [pc, #164]	; (8004b10 <TIM_OC1_SetConfig+0x118>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_OC1_SetConfig+0x80>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a28      	ldr	r2, [pc, #160]	; (8004b14 <TIM_OC1_SetConfig+0x11c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d10c      	bne.n	8004a92 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 0308 	bic.w	r3, r3, #8
 8004a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a1b      	ldr	r2, [pc, #108]	; (8004b04 <TIM_OC1_SetConfig+0x10c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00f      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a1a      	ldr	r2, [pc, #104]	; (8004b08 <TIM_OC1_SetConfig+0x110>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a19      	ldr	r2, [pc, #100]	; (8004b0c <TIM_OC1_SetConfig+0x114>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a18      	ldr	r2, [pc, #96]	; (8004b10 <TIM_OC1_SetConfig+0x118>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_OC1_SetConfig+0xc2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a17      	ldr	r2, [pc, #92]	; (8004b14 <TIM_OC1_SetConfig+0x11c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d111      	bne.n	8004ade <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40013400 	.word	0x40013400
 8004b0c:	40014000 	.word	0x40014000
 8004b10:	40014400 	.word	0x40014400
 8004b14:	40014800 	.word	0x40014800

08004b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f023 0210 	bic.w	r2, r3, #16
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0320 	bic.w	r3, r3, #32
 8004b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a28      	ldr	r2, [pc, #160]	; (8004c18 <TIM_OC2_SetConfig+0x100>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_OC2_SetConfig+0x6c>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a27      	ldr	r2, [pc, #156]	; (8004c1c <TIM_OC2_SetConfig+0x104>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10d      	bne.n	8004ba0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a1d      	ldr	r2, [pc, #116]	; (8004c18 <TIM_OC2_SetConfig+0x100>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00f      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a1c      	ldr	r2, [pc, #112]	; (8004c1c <TIM_OC2_SetConfig+0x104>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00b      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a1b      	ldr	r2, [pc, #108]	; (8004c20 <TIM_OC2_SetConfig+0x108>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d007      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a1a      	ldr	r2, [pc, #104]	; (8004c24 <TIM_OC2_SetConfig+0x10c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_OC2_SetConfig+0xb0>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <TIM_OC2_SetConfig+0x110>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d113      	bne.n	8004bf0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40012c00 	.word	0x40012c00
 8004c1c:	40013400 	.word	0x40013400
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40014400 	.word	0x40014400
 8004c28:	40014800 	.word	0x40014800

08004c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a27      	ldr	r2, [pc, #156]	; (8004d28 <TIM_OC3_SetConfig+0xfc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d003      	beq.n	8004c96 <TIM_OC3_SetConfig+0x6a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a26      	ldr	r2, [pc, #152]	; (8004d2c <TIM_OC3_SetConfig+0x100>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10d      	bne.n	8004cb2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	021b      	lsls	r3, r3, #8
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1c      	ldr	r2, [pc, #112]	; (8004d28 <TIM_OC3_SetConfig+0xfc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a1b      	ldr	r2, [pc, #108]	; (8004d2c <TIM_OC3_SetConfig+0x100>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1a      	ldr	r2, [pc, #104]	; (8004d30 <TIM_OC3_SetConfig+0x104>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a19      	ldr	r2, [pc, #100]	; (8004d34 <TIM_OC3_SetConfig+0x108>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_OC3_SetConfig+0xae>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a18      	ldr	r2, [pc, #96]	; (8004d38 <TIM_OC3_SetConfig+0x10c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d113      	bne.n	8004d02 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	621a      	str	r2, [r3, #32]
}
 8004d1c:	bf00      	nop
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40013400 	.word	0x40013400
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800

08004d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	031b      	lsls	r3, r3, #12
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <TIM_OC4_SetConfig+0xc0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00f      	beq.n	8004dc0 <TIM_OC4_SetConfig+0x84>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <TIM_OC4_SetConfig+0xc4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00b      	beq.n	8004dc0 <TIM_OC4_SetConfig+0x84>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a16      	ldr	r2, [pc, #88]	; (8004e04 <TIM_OC4_SetConfig+0xc8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d007      	beq.n	8004dc0 <TIM_OC4_SetConfig+0x84>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a15      	ldr	r2, [pc, #84]	; (8004e08 <TIM_OC4_SetConfig+0xcc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_OC4_SetConfig+0x84>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <TIM_OC4_SetConfig+0xd0>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d109      	bne.n	8004dd4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	019b      	lsls	r3, r3, #6
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	621a      	str	r2, [r3, #32]
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	40013400 	.word	0x40013400
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800

08004e10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <TIM_OC5_SetConfig+0xb4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00f      	beq.n	8004e8a <TIM_OC5_SetConfig+0x7a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a16      	ldr	r2, [pc, #88]	; (8004ec8 <TIM_OC5_SetConfig+0xb8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00b      	beq.n	8004e8a <TIM_OC5_SetConfig+0x7a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <TIM_OC5_SetConfig+0xbc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d007      	beq.n	8004e8a <TIM_OC5_SetConfig+0x7a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a14      	ldr	r2, [pc, #80]	; (8004ed0 <TIM_OC5_SetConfig+0xc0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <TIM_OC5_SetConfig+0x7a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a13      	ldr	r2, [pc, #76]	; (8004ed4 <TIM_OC5_SetConfig+0xc4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d109      	bne.n	8004e9e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	621a      	str	r2, [r3, #32]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40013400 	.word	0x40013400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800

08004ed8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	051b      	lsls	r3, r3, #20
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a18      	ldr	r2, [pc, #96]	; (8004f90 <TIM_OC6_SetConfig+0xb8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00f      	beq.n	8004f54 <TIM_OC6_SetConfig+0x7c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a17      	ldr	r2, [pc, #92]	; (8004f94 <TIM_OC6_SetConfig+0xbc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00b      	beq.n	8004f54 <TIM_OC6_SetConfig+0x7c>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a16      	ldr	r2, [pc, #88]	; (8004f98 <TIM_OC6_SetConfig+0xc0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d007      	beq.n	8004f54 <TIM_OC6_SetConfig+0x7c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <TIM_OC6_SetConfig+0xc4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_OC6_SetConfig+0x7c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a14      	ldr	r2, [pc, #80]	; (8004fa0 <TIM_OC6_SetConfig+0xc8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d109      	bne.n	8004f68 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40013400 	.word	0x40013400
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	40014800 	.word	0x40014800

08004fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f023 0201 	bic.w	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f023 030a 	bic.w	r3, r3, #10
 8004fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	621a      	str	r2, [r3, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005002:	b480      	push	{r7}
 8005004:	b087      	sub	sp, #28
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f023 0210 	bic.w	r2, r3, #16
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800502c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	031b      	lsls	r3, r3, #12
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800503e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005062:	b480      	push	{r7}
 8005064:	b085      	sub	sp, #20
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	f043 0307 	orr.w	r3, r3, #7
 8005084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	609a      	str	r2, [r3, #8]
}
 800508c:	bf00      	nop
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	021a      	lsls	r2, r3, #8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4313      	orrs	r3, r2
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	609a      	str	r2, [r3, #8]
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	2201      	movs	r2, #1
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a1a      	ldr	r2, [r3, #32]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	43db      	mvns	r3, r3
 80050fa:	401a      	ands	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a1a      	ldr	r2, [r3, #32]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	431a      	orrs	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	621a      	str	r2, [r3, #32]
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
	...

08005124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005138:	2302      	movs	r3, #2
 800513a:	e068      	b.n	800520e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a2e      	ldr	r2, [pc, #184]	; (800521c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a2d      	ldr	r2, [pc, #180]	; (8005220 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d108      	bne.n	8005182 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005176:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005188:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1e      	ldr	r2, [pc, #120]	; (800521c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01d      	beq.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ae:	d018      	beq.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1b      	ldr	r2, [pc, #108]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1a      	ldr	r2, [pc, #104]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00e      	beq.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a18      	ldr	r2, [pc, #96]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d009      	beq.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a13      	ldr	r2, [pc, #76]	; (8005220 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d004      	beq.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a14      	ldr	r2, [pc, #80]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d10c      	bne.n	80051fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40012c00 	.word	0x40012c00
 8005220:	40013400 	.word	0x40013400
 8005224:	40000400 	.word	0x40000400
 8005228:	40000800 	.word	0x40000800
 800522c:	40000c00 	.word	0x40000c00
 8005230:	40014000 	.word	0x40014000

08005234 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800524c:	2302      	movs	r3, #2
 800524e:	e065      	b.n	800531c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a16      	ldr	r2, [pc, #88]	; (8005328 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d004      	beq.n	80052de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a14      	ldr	r2, [pc, #80]	; (800532c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d115      	bne.n	800530a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	051b      	lsls	r3, r3, #20
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40013400 	.word	0x40013400

08005330 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e040      	b.n	8005400 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fc fbee 	bl	8001b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2224      	movs	r2, #36	; 0x24
 8005398:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fae0 	bl	8005978 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f825 	bl	8005408 <UART_SetConfig>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e01b      	b.n	8005400 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fb5f 	bl	8005abc <UART_CheckIdleState>
 80053fe:	4603      	mov	r3, r0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800540c:	b08a      	sub	sp, #40	; 0x28
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	431a      	orrs	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	431a      	orrs	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	4313      	orrs	r3, r2
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4ba4      	ldr	r3, [pc, #656]	; (80056c8 <UART_SetConfig+0x2c0>)
 8005438:	4013      	ands	r3, r2
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005440:	430b      	orrs	r3, r1
 8005442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a99      	ldr	r2, [pc, #612]	; (80056cc <UART_SetConfig+0x2c4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d004      	beq.n	8005474 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005470:	4313      	orrs	r3, r2
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005484:	430a      	orrs	r2, r1
 8005486:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a90      	ldr	r2, [pc, #576]	; (80056d0 <UART_SetConfig+0x2c8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d126      	bne.n	80054e0 <UART_SetConfig+0xd8>
 8005492:	4b90      	ldr	r3, [pc, #576]	; (80056d4 <UART_SetConfig+0x2cc>)
 8005494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005498:	f003 0303 	and.w	r3, r3, #3
 800549c:	2b03      	cmp	r3, #3
 800549e:	d81b      	bhi.n	80054d8 <UART_SetConfig+0xd0>
 80054a0:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <UART_SetConfig+0xa0>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	080054b9 	.word	0x080054b9
 80054ac:	080054c9 	.word	0x080054c9
 80054b0:	080054c1 	.word	0x080054c1
 80054b4:	080054d1 	.word	0x080054d1
 80054b8:	2301      	movs	r3, #1
 80054ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054be:	e116      	b.n	80056ee <UART_SetConfig+0x2e6>
 80054c0:	2302      	movs	r3, #2
 80054c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c6:	e112      	b.n	80056ee <UART_SetConfig+0x2e6>
 80054c8:	2304      	movs	r3, #4
 80054ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ce:	e10e      	b.n	80056ee <UART_SetConfig+0x2e6>
 80054d0:	2308      	movs	r3, #8
 80054d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d6:	e10a      	b.n	80056ee <UART_SetConfig+0x2e6>
 80054d8:	2310      	movs	r3, #16
 80054da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054de:	e106      	b.n	80056ee <UART_SetConfig+0x2e6>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a7c      	ldr	r2, [pc, #496]	; (80056d8 <UART_SetConfig+0x2d0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d138      	bne.n	800555c <UART_SetConfig+0x154>
 80054ea:	4b7a      	ldr	r3, [pc, #488]	; (80056d4 <UART_SetConfig+0x2cc>)
 80054ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f0:	f003 030c 	and.w	r3, r3, #12
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	d82d      	bhi.n	8005554 <UART_SetConfig+0x14c>
 80054f8:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <UART_SetConfig+0xf8>)
 80054fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fe:	bf00      	nop
 8005500:	08005535 	.word	0x08005535
 8005504:	08005555 	.word	0x08005555
 8005508:	08005555 	.word	0x08005555
 800550c:	08005555 	.word	0x08005555
 8005510:	08005545 	.word	0x08005545
 8005514:	08005555 	.word	0x08005555
 8005518:	08005555 	.word	0x08005555
 800551c:	08005555 	.word	0x08005555
 8005520:	0800553d 	.word	0x0800553d
 8005524:	08005555 	.word	0x08005555
 8005528:	08005555 	.word	0x08005555
 800552c:	08005555 	.word	0x08005555
 8005530:	0800554d 	.word	0x0800554d
 8005534:	2300      	movs	r3, #0
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553a:	e0d8      	b.n	80056ee <UART_SetConfig+0x2e6>
 800553c:	2302      	movs	r3, #2
 800553e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005542:	e0d4      	b.n	80056ee <UART_SetConfig+0x2e6>
 8005544:	2304      	movs	r3, #4
 8005546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800554a:	e0d0      	b.n	80056ee <UART_SetConfig+0x2e6>
 800554c:	2308      	movs	r3, #8
 800554e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005552:	e0cc      	b.n	80056ee <UART_SetConfig+0x2e6>
 8005554:	2310      	movs	r3, #16
 8005556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800555a:	e0c8      	b.n	80056ee <UART_SetConfig+0x2e6>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a5e      	ldr	r2, [pc, #376]	; (80056dc <UART_SetConfig+0x2d4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d125      	bne.n	80055b2 <UART_SetConfig+0x1aa>
 8005566:	4b5b      	ldr	r3, [pc, #364]	; (80056d4 <UART_SetConfig+0x2cc>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005570:	2b30      	cmp	r3, #48	; 0x30
 8005572:	d016      	beq.n	80055a2 <UART_SetConfig+0x19a>
 8005574:	2b30      	cmp	r3, #48	; 0x30
 8005576:	d818      	bhi.n	80055aa <UART_SetConfig+0x1a2>
 8005578:	2b20      	cmp	r3, #32
 800557a:	d00a      	beq.n	8005592 <UART_SetConfig+0x18a>
 800557c:	2b20      	cmp	r3, #32
 800557e:	d814      	bhi.n	80055aa <UART_SetConfig+0x1a2>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <UART_SetConfig+0x182>
 8005584:	2b10      	cmp	r3, #16
 8005586:	d008      	beq.n	800559a <UART_SetConfig+0x192>
 8005588:	e00f      	b.n	80055aa <UART_SetConfig+0x1a2>
 800558a:	2300      	movs	r3, #0
 800558c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005590:	e0ad      	b.n	80056ee <UART_SetConfig+0x2e6>
 8005592:	2302      	movs	r3, #2
 8005594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005598:	e0a9      	b.n	80056ee <UART_SetConfig+0x2e6>
 800559a:	2304      	movs	r3, #4
 800559c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a0:	e0a5      	b.n	80056ee <UART_SetConfig+0x2e6>
 80055a2:	2308      	movs	r3, #8
 80055a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a8:	e0a1      	b.n	80056ee <UART_SetConfig+0x2e6>
 80055aa:	2310      	movs	r3, #16
 80055ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b0:	e09d      	b.n	80056ee <UART_SetConfig+0x2e6>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a4a      	ldr	r2, [pc, #296]	; (80056e0 <UART_SetConfig+0x2d8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d125      	bne.n	8005608 <UART_SetConfig+0x200>
 80055bc:	4b45      	ldr	r3, [pc, #276]	; (80056d4 <UART_SetConfig+0x2cc>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055c6:	2bc0      	cmp	r3, #192	; 0xc0
 80055c8:	d016      	beq.n	80055f8 <UART_SetConfig+0x1f0>
 80055ca:	2bc0      	cmp	r3, #192	; 0xc0
 80055cc:	d818      	bhi.n	8005600 <UART_SetConfig+0x1f8>
 80055ce:	2b80      	cmp	r3, #128	; 0x80
 80055d0:	d00a      	beq.n	80055e8 <UART_SetConfig+0x1e0>
 80055d2:	2b80      	cmp	r3, #128	; 0x80
 80055d4:	d814      	bhi.n	8005600 <UART_SetConfig+0x1f8>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <UART_SetConfig+0x1d8>
 80055da:	2b40      	cmp	r3, #64	; 0x40
 80055dc:	d008      	beq.n	80055f0 <UART_SetConfig+0x1e8>
 80055de:	e00f      	b.n	8005600 <UART_SetConfig+0x1f8>
 80055e0:	2300      	movs	r3, #0
 80055e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055e6:	e082      	b.n	80056ee <UART_SetConfig+0x2e6>
 80055e8:	2302      	movs	r3, #2
 80055ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ee:	e07e      	b.n	80056ee <UART_SetConfig+0x2e6>
 80055f0:	2304      	movs	r3, #4
 80055f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055f6:	e07a      	b.n	80056ee <UART_SetConfig+0x2e6>
 80055f8:	2308      	movs	r3, #8
 80055fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055fe:	e076      	b.n	80056ee <UART_SetConfig+0x2e6>
 8005600:	2310      	movs	r3, #16
 8005602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005606:	e072      	b.n	80056ee <UART_SetConfig+0x2e6>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a35      	ldr	r2, [pc, #212]	; (80056e4 <UART_SetConfig+0x2dc>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d12a      	bne.n	8005668 <UART_SetConfig+0x260>
 8005612:	4b30      	ldr	r3, [pc, #192]	; (80056d4 <UART_SetConfig+0x2cc>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005620:	d01a      	beq.n	8005658 <UART_SetConfig+0x250>
 8005622:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005626:	d81b      	bhi.n	8005660 <UART_SetConfig+0x258>
 8005628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562c:	d00c      	beq.n	8005648 <UART_SetConfig+0x240>
 800562e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005632:	d815      	bhi.n	8005660 <UART_SetConfig+0x258>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <UART_SetConfig+0x238>
 8005638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563c:	d008      	beq.n	8005650 <UART_SetConfig+0x248>
 800563e:	e00f      	b.n	8005660 <UART_SetConfig+0x258>
 8005640:	2300      	movs	r3, #0
 8005642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005646:	e052      	b.n	80056ee <UART_SetConfig+0x2e6>
 8005648:	2302      	movs	r3, #2
 800564a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564e:	e04e      	b.n	80056ee <UART_SetConfig+0x2e6>
 8005650:	2304      	movs	r3, #4
 8005652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005656:	e04a      	b.n	80056ee <UART_SetConfig+0x2e6>
 8005658:	2308      	movs	r3, #8
 800565a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565e:	e046      	b.n	80056ee <UART_SetConfig+0x2e6>
 8005660:	2310      	movs	r3, #16
 8005662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005666:	e042      	b.n	80056ee <UART_SetConfig+0x2e6>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a17      	ldr	r2, [pc, #92]	; (80056cc <UART_SetConfig+0x2c4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d13a      	bne.n	80056e8 <UART_SetConfig+0x2e0>
 8005672:	4b18      	ldr	r3, [pc, #96]	; (80056d4 <UART_SetConfig+0x2cc>)
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005678:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800567c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005680:	d01a      	beq.n	80056b8 <UART_SetConfig+0x2b0>
 8005682:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005686:	d81b      	bhi.n	80056c0 <UART_SetConfig+0x2b8>
 8005688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800568c:	d00c      	beq.n	80056a8 <UART_SetConfig+0x2a0>
 800568e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005692:	d815      	bhi.n	80056c0 <UART_SetConfig+0x2b8>
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <UART_SetConfig+0x298>
 8005698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569c:	d008      	beq.n	80056b0 <UART_SetConfig+0x2a8>
 800569e:	e00f      	b.n	80056c0 <UART_SetConfig+0x2b8>
 80056a0:	2300      	movs	r3, #0
 80056a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a6:	e022      	b.n	80056ee <UART_SetConfig+0x2e6>
 80056a8:	2302      	movs	r3, #2
 80056aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ae:	e01e      	b.n	80056ee <UART_SetConfig+0x2e6>
 80056b0:	2304      	movs	r3, #4
 80056b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056b6:	e01a      	b.n	80056ee <UART_SetConfig+0x2e6>
 80056b8:	2308      	movs	r3, #8
 80056ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056be:	e016      	b.n	80056ee <UART_SetConfig+0x2e6>
 80056c0:	2310      	movs	r3, #16
 80056c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c6:	e012      	b.n	80056ee <UART_SetConfig+0x2e6>
 80056c8:	efff69f3 	.word	0xefff69f3
 80056cc:	40008000 	.word	0x40008000
 80056d0:	40013800 	.word	0x40013800
 80056d4:	40021000 	.word	0x40021000
 80056d8:	40004400 	.word	0x40004400
 80056dc:	40004800 	.word	0x40004800
 80056e0:	40004c00 	.word	0x40004c00
 80056e4:	40005000 	.word	0x40005000
 80056e8:	2310      	movs	r3, #16
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a9f      	ldr	r2, [pc, #636]	; (8005970 <UART_SetConfig+0x568>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d17a      	bne.n	80057ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d824      	bhi.n	800574a <UART_SetConfig+0x342>
 8005700:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <UART_SetConfig+0x300>)
 8005702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005706:	bf00      	nop
 8005708:	0800572d 	.word	0x0800572d
 800570c:	0800574b 	.word	0x0800574b
 8005710:	08005735 	.word	0x08005735
 8005714:	0800574b 	.word	0x0800574b
 8005718:	0800573b 	.word	0x0800573b
 800571c:	0800574b 	.word	0x0800574b
 8005720:	0800574b 	.word	0x0800574b
 8005724:	0800574b 	.word	0x0800574b
 8005728:	08005743 	.word	0x08005743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800572c:	f7fd fce4 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 8005730:	61f8      	str	r0, [r7, #28]
        break;
 8005732:	e010      	b.n	8005756 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005734:	4b8f      	ldr	r3, [pc, #572]	; (8005974 <UART_SetConfig+0x56c>)
 8005736:	61fb      	str	r3, [r7, #28]
        break;
 8005738:	e00d      	b.n	8005756 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800573a:	f7fd fc45 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 800573e:	61f8      	str	r0, [r7, #28]
        break;
 8005740:	e009      	b.n	8005756 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005746:	61fb      	str	r3, [r7, #28]
        break;
 8005748:	e005      	b.n	8005756 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005754:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 80fb 	beq.w	8005954 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	4413      	add	r3, r2
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	429a      	cmp	r2, r3
 800576c:	d305      	bcc.n	800577a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	429a      	cmp	r2, r3
 8005778:	d903      	bls.n	8005782 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005780:	e0e8      	b.n	8005954 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	2200      	movs	r2, #0
 8005786:	461c      	mov	r4, r3
 8005788:	4615      	mov	r5, r2
 800578a:	f04f 0200 	mov.w	r2, #0
 800578e:	f04f 0300 	mov.w	r3, #0
 8005792:	022b      	lsls	r3, r5, #8
 8005794:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005798:	0222      	lsls	r2, r4, #8
 800579a:	68f9      	ldr	r1, [r7, #12]
 800579c:	6849      	ldr	r1, [r1, #4]
 800579e:	0849      	lsrs	r1, r1, #1
 80057a0:	2000      	movs	r0, #0
 80057a2:	4688      	mov	r8, r1
 80057a4:	4681      	mov	r9, r0
 80057a6:	eb12 0a08 	adds.w	sl, r2, r8
 80057aa:	eb43 0b09 	adc.w	fp, r3, r9
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	603b      	str	r3, [r7, #0]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057bc:	4650      	mov	r0, sl
 80057be:	4659      	mov	r1, fp
 80057c0:	f7fb f9d4 	bl	8000b6c <__aeabi_uldivmod>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4613      	mov	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d2:	d308      	bcc.n	80057e6 <UART_SetConfig+0x3de>
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057da:	d204      	bcs.n	80057e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	60da      	str	r2, [r3, #12]
 80057e4:	e0b6      	b.n	8005954 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057ec:	e0b2      	b.n	8005954 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f6:	d15e      	bne.n	80058b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80057f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d828      	bhi.n	8005852 <UART_SetConfig+0x44a>
 8005800:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <UART_SetConfig+0x400>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	0800582d 	.word	0x0800582d
 800580c:	08005835 	.word	0x08005835
 8005810:	0800583d 	.word	0x0800583d
 8005814:	08005853 	.word	0x08005853
 8005818:	08005843 	.word	0x08005843
 800581c:	08005853 	.word	0x08005853
 8005820:	08005853 	.word	0x08005853
 8005824:	08005853 	.word	0x08005853
 8005828:	0800584b 	.word	0x0800584b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800582c:	f7fd fc64 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 8005830:	61f8      	str	r0, [r7, #28]
        break;
 8005832:	e014      	b.n	800585e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005834:	f7fd fc76 	bl	8003124 <HAL_RCC_GetPCLK2Freq>
 8005838:	61f8      	str	r0, [r7, #28]
        break;
 800583a:	e010      	b.n	800585e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800583c:	4b4d      	ldr	r3, [pc, #308]	; (8005974 <UART_SetConfig+0x56c>)
 800583e:	61fb      	str	r3, [r7, #28]
        break;
 8005840:	e00d      	b.n	800585e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005842:	f7fd fbc1 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8005846:	61f8      	str	r0, [r7, #28]
        break;
 8005848:	e009      	b.n	800585e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800584a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800584e:	61fb      	str	r3, [r7, #28]
        break;
 8005850:	e005      	b.n	800585e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800585c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d077      	beq.n	8005954 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	005a      	lsls	r2, r3, #1
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	085b      	lsrs	r3, r3, #1
 800586e:	441a      	add	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	fbb2 f3f3 	udiv	r3, r2, r3
 8005878:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	2b0f      	cmp	r3, #15
 800587e:	d916      	bls.n	80058ae <UART_SetConfig+0x4a6>
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005886:	d212      	bcs.n	80058ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	b29b      	uxth	r3, r3
 800588c:	f023 030f 	bic.w	r3, r3, #15
 8005890:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	b29b      	uxth	r3, r3
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	b29a      	uxth	r2, r3
 800589e:	8afb      	ldrh	r3, [r7, #22]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	8afa      	ldrh	r2, [r7, #22]
 80058aa:	60da      	str	r2, [r3, #12]
 80058ac:	e052      	b.n	8005954 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058b4:	e04e      	b.n	8005954 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d827      	bhi.n	800590e <UART_SetConfig+0x506>
 80058be:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <UART_SetConfig+0x4bc>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	080058e9 	.word	0x080058e9
 80058c8:	080058f1 	.word	0x080058f1
 80058cc:	080058f9 	.word	0x080058f9
 80058d0:	0800590f 	.word	0x0800590f
 80058d4:	080058ff 	.word	0x080058ff
 80058d8:	0800590f 	.word	0x0800590f
 80058dc:	0800590f 	.word	0x0800590f
 80058e0:	0800590f 	.word	0x0800590f
 80058e4:	08005907 	.word	0x08005907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e8:	f7fd fc06 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 80058ec:	61f8      	str	r0, [r7, #28]
        break;
 80058ee:	e014      	b.n	800591a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058f0:	f7fd fc18 	bl	8003124 <HAL_RCC_GetPCLK2Freq>
 80058f4:	61f8      	str	r0, [r7, #28]
        break;
 80058f6:	e010      	b.n	800591a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f8:	4b1e      	ldr	r3, [pc, #120]	; (8005974 <UART_SetConfig+0x56c>)
 80058fa:	61fb      	str	r3, [r7, #28]
        break;
 80058fc:	e00d      	b.n	800591a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058fe:	f7fd fb63 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8005902:	61f8      	str	r0, [r7, #28]
        break;
 8005904:	e009      	b.n	800591a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800590a:	61fb      	str	r3, [r7, #28]
        break;
 800590c:	e005      	b.n	800591a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005918:	bf00      	nop
    }

    if (pclk != 0U)
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d019      	beq.n	8005954 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	085a      	lsrs	r2, r3, #1
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	441a      	add	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005932:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	2b0f      	cmp	r3, #15
 8005938:	d909      	bls.n	800594e <UART_SetConfig+0x546>
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005940:	d205      	bcs.n	800594e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60da      	str	r2, [r3, #12]
 800594c:	e002      	b.n	8005954 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005960:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005964:	4618      	mov	r0, r3
 8005966:	3728      	adds	r7, #40	; 0x28
 8005968:	46bd      	mov	sp, r7
 800596a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800596e:	bf00      	nop
 8005970:	40008000 	.word	0x40008000
 8005974:	00f42400 	.word	0x00f42400

08005978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01a      	beq.n	8005a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a76:	d10a      	bne.n	8005a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	605a      	str	r2, [r3, #4]
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b098      	sub	sp, #96	; 0x60
 8005ac0:	af02      	add	r7, sp, #8
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005acc:	f7fc fa8c 	bl	8001fe8 <HAL_GetTick>
 8005ad0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d12e      	bne.n	8005b3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f88c 	bl	8005c0c <UART_WaitOnFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d021      	beq.n	8005b3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b0e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b18:	647b      	str	r3, [r7, #68]	; 0x44
 8005b1a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b20:	e841 2300 	strex	r3, r2, [r1]
 8005b24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e6      	bne.n	8005afa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e062      	b.n	8005c04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	d149      	bne.n	8005be0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b54:	2200      	movs	r2, #0
 8005b56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f856 	bl	8005c0c <UART_WaitOnFlagUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d03c      	beq.n	8005be0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	623b      	str	r3, [r7, #32]
   return(result);
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b84:	633b      	str	r3, [r7, #48]	; 0x30
 8005b86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e6      	bne.n	8005b66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 0301 	bic.w	r3, r3, #1
 8005bae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3308      	adds	r3, #8
 8005bb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bb8:	61fa      	str	r2, [r7, #28]
 8005bba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	69b9      	ldr	r1, [r7, #24]
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e5      	bne.n	8005b98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e011      	b.n	8005c04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2220      	movs	r2, #32
 8005be4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3758      	adds	r7, #88	; 0x58
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c1c:	e049      	b.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d045      	beq.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c26:	f7fc f9df 	bl	8001fe8 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d302      	bcc.n	8005c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e048      	b.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d031      	beq.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d110      	bne.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2208      	movs	r2, #8
 8005c62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 f838 	bl	8005cda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2208      	movs	r2, #8
 8005c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e029      	b.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c8c:	d111      	bne.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f81e 	bl	8005cda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e00f      	b.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	bf0c      	ite	eq
 8005cc2:	2301      	moveq	r3, #1
 8005cc4:	2300      	movne	r3, #0
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	461a      	mov	r2, r3
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d0a6      	beq.n	8005c1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b095      	sub	sp, #84	; 0x54
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d00:	643b      	str	r3, [r7, #64]	; 0x40
 8005d02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e6      	bne.n	8005ce2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f023 0301 	bic.w	r3, r3, #1
 8005d2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3308      	adds	r3, #8
 8005d32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e5      	bne.n	8005d14 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d118      	bne.n	8005d82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f023 0310 	bic.w	r3, r3, #16
 8005d64:	647b      	str	r3, [r7, #68]	; 0x44
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6e:	61bb      	str	r3, [r7, #24]
 8005d70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	6979      	ldr	r1, [r7, #20]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e6      	bne.n	8005d50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d96:	bf00      	nop
 8005d98:	3754      	adds	r7, #84	; 0x54
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	4603      	mov	r3, r0
 8005daa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005db0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005db4:	2b84      	cmp	r3, #132	; 0x84
 8005db6:	d005      	beq.n	8005dc4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005db8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	3303      	adds	r3, #3
 8005dc2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005dd6:	f000 fadf 	bl	8006398 <vTaskStartScheduler>
  
  return osOK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de2:	b089      	sub	sp, #36	; 0x24
 8005de4:	af04      	add	r7, sp, #16
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d020      	beq.n	8005e34 <osThreadCreate+0x54>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d01c      	beq.n	8005e34 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685c      	ldr	r4, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691e      	ldr	r6, [r3, #16]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff ffc8 	bl	8005da2 <makeFreeRtosPriority>
 8005e12:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e1c:	9202      	str	r2, [sp, #8]
 8005e1e:	9301      	str	r3, [sp, #4]
 8005e20:	9100      	str	r1, [sp, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	4632      	mov	r2, r6
 8005e26:	4629      	mov	r1, r5
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 f8ed 	bl	8006008 <xTaskCreateStatic>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e01c      	b.n	8005e6e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685c      	ldr	r4, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e40:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff ffaa 	bl	8005da2 <makeFreeRtosPriority>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	f107 030c 	add.w	r3, r7, #12
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	9200      	str	r2, [sp, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	4632      	mov	r2, r6
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f000 f92f 	bl	80060c2 <xTaskCreate>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d001      	beq.n	8005e6e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	e000      	b.n	8005e70 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e78 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <osDelay+0x16>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	e000      	b.n	8005e90 <osDelay+0x18>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 fa4d 	bl	8006330 <vTaskDelay>
  
  return osOK;
 8005e96:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f103 0208 	add.w	r2, r3, #8
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f103 0208 	add.w	r2, r3, #8
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f103 0208 	add.w	r2, r3, #8
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	601a      	str	r2, [r3, #0]
}
 8005f36:	bf00      	nop
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f42:	b480      	push	{r7}
 8005f44:	b085      	sub	sp, #20
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f58:	d103      	bne.n	8005f62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	e00c      	b.n	8005f7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3308      	adds	r3, #8
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e002      	b.n	8005f70 <vListInsert+0x2e>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d2f6      	bcs.n	8005f6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	601a      	str	r2, [r3, #0]
}
 8005fa8:	bf00      	nop
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6892      	ldr	r2, [r2, #8]
 8005fca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6852      	ldr	r2, [r2, #4]
 8005fd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d103      	bne.n	8005fe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	1e5a      	subs	r2, r3, #1
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08e      	sub	sp, #56	; 0x38
 800600c:	af04      	add	r7, sp, #16
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <xTaskCreateStatic+0x46>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	61fb      	str	r3, [r7, #28]
}
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800604e:	2354      	movs	r3, #84	; 0x54
 8006050:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b54      	cmp	r3, #84	; 0x54
 8006056:	d00a      	beq.n	800606e <xTaskCreateStatic+0x66>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	61bb      	str	r3, [r7, #24]
}
 800606a:	bf00      	nop
 800606c:	e7fe      	b.n	800606c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800606e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	2b00      	cmp	r3, #0
 8006074:	d01e      	beq.n	80060b4 <xTaskCreateStatic+0xac>
 8006076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01b      	beq.n	80060b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006084:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	2202      	movs	r2, #2
 800608a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800608e:	2300      	movs	r3, #0
 8006090:	9303      	str	r3, [sp, #12]
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	9302      	str	r3, [sp, #8]
 8006096:	f107 0314 	add.w	r3, r7, #20
 800609a:	9301      	str	r3, [sp, #4]
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	68b9      	ldr	r1, [r7, #8]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 f850 	bl	800614c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060ae:	f000 f8d5 	bl	800625c <prvAddNewTaskToReadyList>
 80060b2:	e001      	b.n	80060b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80060b8:	697b      	ldr	r3, [r7, #20]
	}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3728      	adds	r7, #40	; 0x28
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b08c      	sub	sp, #48	; 0x30
 80060c6:	af04      	add	r7, sp, #16
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	603b      	str	r3, [r7, #0]
 80060ce:	4613      	mov	r3, r2
 80060d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060d2:	88fb      	ldrh	r3, [r7, #6]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fec6 	bl	8006e68 <pvPortMalloc>
 80060dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00e      	beq.n	8006102 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060e4:	2054      	movs	r0, #84	; 0x54
 80060e6:	f000 febf 	bl	8006e68 <pvPortMalloc>
 80060ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30
 80060f8:	e005      	b.n	8006106 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060fa:	6978      	ldr	r0, [r7, #20]
 80060fc:	f000 ff80 	bl	8007000 <vPortFree>
 8006100:	e001      	b.n	8006106 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006102:	2300      	movs	r3, #0
 8006104:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d017      	beq.n	800613c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006114:	88fa      	ldrh	r2, [r7, #6]
 8006116:	2300      	movs	r3, #0
 8006118:	9303      	str	r3, [sp, #12]
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	9302      	str	r3, [sp, #8]
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006120:	9301      	str	r3, [sp, #4]
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f80e 	bl	800614c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006130:	69f8      	ldr	r0, [r7, #28]
 8006132:	f000 f893 	bl	800625c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006136:	2301      	movs	r3, #1
 8006138:	61bb      	str	r3, [r7, #24]
 800613a:	e002      	b.n	8006142 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800613c:	f04f 33ff 	mov.w	r3, #4294967295
 8006140:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006142:	69bb      	ldr	r3, [r7, #24]
	}
 8006144:	4618      	mov	r0, r3
 8006146:	3720      	adds	r7, #32
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006164:	3b01      	subs	r3, #1
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	f023 0307 	bic.w	r3, r3, #7
 8006172:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <prvInitialiseNewTask+0x48>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	617b      	str	r3, [r7, #20]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d01f      	beq.n	80061da <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800619a:	2300      	movs	r3, #0
 800619c:	61fb      	str	r3, [r7, #28]
 800619e:	e012      	b.n	80061c6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	7819      	ldrb	r1, [r3, #0]
 80061a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	4413      	add	r3, r2
 80061ae:	3334      	adds	r3, #52	; 0x34
 80061b0:	460a      	mov	r2, r1
 80061b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	4413      	add	r3, r2
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d006      	beq.n	80061ce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	3301      	adds	r3, #1
 80061c4:	61fb      	str	r3, [r7, #28]
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	2b0f      	cmp	r3, #15
 80061ca:	d9e9      	bls.n	80061a0 <prvInitialiseNewTask+0x54>
 80061cc:	e000      	b.n	80061d0 <prvInitialiseNewTask+0x84>
			{
				break;
 80061ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061d8:	e003      	b.n	80061e2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	2b06      	cmp	r3, #6
 80061e6:	d901      	bls.n	80061ec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061e8:	2306      	movs	r3, #6
 80061ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061f6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	2200      	movs	r2, #0
 80061fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	3304      	adds	r3, #4
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff fe6c 	bl	8005ee0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	3318      	adds	r3, #24
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff fe67 	bl	8005ee0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006216:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	f1c3 0207 	rsb	r2, r3, #7
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006226:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622a:	2200      	movs	r2, #0
 800622c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	68f9      	ldr	r1, [r7, #12]
 800623a:	69b8      	ldr	r0, [r7, #24]
 800623c:	f000 fc06 	bl	8006a4c <pxPortInitialiseStack>
 8006240:	4602      	mov	r2, r0
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006250:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006252:	bf00      	nop
 8006254:	3720      	adds	r7, #32
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006264:	f000 fd1e 	bl	8006ca4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006268:	4b2a      	ldr	r3, [pc, #168]	; (8006314 <prvAddNewTaskToReadyList+0xb8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3301      	adds	r3, #1
 800626e:	4a29      	ldr	r2, [pc, #164]	; (8006314 <prvAddNewTaskToReadyList+0xb8>)
 8006270:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006272:	4b29      	ldr	r3, [pc, #164]	; (8006318 <prvAddNewTaskToReadyList+0xbc>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800627a:	4a27      	ldr	r2, [pc, #156]	; (8006318 <prvAddNewTaskToReadyList+0xbc>)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006280:	4b24      	ldr	r3, [pc, #144]	; (8006314 <prvAddNewTaskToReadyList+0xb8>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d110      	bne.n	80062aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006288:	f000 fabc 	bl	8006804 <prvInitialiseTaskLists>
 800628c:	e00d      	b.n	80062aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800628e:	4b23      	ldr	r3, [pc, #140]	; (800631c <prvAddNewTaskToReadyList+0xc0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d109      	bne.n	80062aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006296:	4b20      	ldr	r3, [pc, #128]	; (8006318 <prvAddNewTaskToReadyList+0xbc>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d802      	bhi.n	80062aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062a4:	4a1c      	ldr	r2, [pc, #112]	; (8006318 <prvAddNewTaskToReadyList+0xbc>)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80062aa:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <prvAddNewTaskToReadyList+0xc4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3301      	adds	r3, #1
 80062b0:	4a1b      	ldr	r2, [pc, #108]	; (8006320 <prvAddNewTaskToReadyList+0xc4>)
 80062b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	2201      	movs	r2, #1
 80062ba:	409a      	lsls	r2, r3
 80062bc:	4b19      	ldr	r3, [pc, #100]	; (8006324 <prvAddNewTaskToReadyList+0xc8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	4a18      	ldr	r2, [pc, #96]	; (8006324 <prvAddNewTaskToReadyList+0xc8>)
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4a15      	ldr	r2, [pc, #84]	; (8006328 <prvAddNewTaskToReadyList+0xcc>)
 80062d4:	441a      	add	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3304      	adds	r3, #4
 80062da:	4619      	mov	r1, r3
 80062dc:	4610      	mov	r0, r2
 80062de:	f7ff fe0c 	bl	8005efa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062e2:	f000 fd0f 	bl	8006d04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062e6:	4b0d      	ldr	r3, [pc, #52]	; (800631c <prvAddNewTaskToReadyList+0xc0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00e      	beq.n	800630c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062ee:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <prvAddNewTaskToReadyList+0xbc>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d207      	bcs.n	800630c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062fc:	4b0b      	ldr	r3, [pc, #44]	; (800632c <prvAddNewTaskToReadyList+0xd0>)
 80062fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800630c:	bf00      	nop
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	20000684 	.word	0x20000684
 8006318:	20000584 	.word	0x20000584
 800631c:	20000690 	.word	0x20000690
 8006320:	200006a0 	.word	0x200006a0
 8006324:	2000068c 	.word	0x2000068c
 8006328:	20000588 	.word	0x20000588
 800632c:	e000ed04 	.word	0xe000ed04

08006330 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006338:	2300      	movs	r3, #0
 800633a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d017      	beq.n	8006372 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006342:	4b13      	ldr	r3, [pc, #76]	; (8006390 <vTaskDelay+0x60>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <vTaskDelay+0x30>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	60bb      	str	r3, [r7, #8]
}
 800635c:	bf00      	nop
 800635e:	e7fe      	b.n	800635e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006360:	f000 f87a 	bl	8006458 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006364:	2100      	movs	r1, #0
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fb0a 	bl	8006980 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800636c:	f000 f882 	bl	8006474 <xTaskResumeAll>
 8006370:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d107      	bne.n	8006388 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006378:	4b06      	ldr	r3, [pc, #24]	; (8006394 <vTaskDelay+0x64>)
 800637a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006388:	bf00      	nop
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	200006ac 	.word	0x200006ac
 8006394:	e000ed04 	.word	0xe000ed04

08006398 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08a      	sub	sp, #40	; 0x28
 800639c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063a6:	463a      	mov	r2, r7
 80063a8:	1d39      	adds	r1, r7, #4
 80063aa:	f107 0308 	add.w	r3, r7, #8
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fa fe80 	bl	80010b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	9202      	str	r2, [sp, #8]
 80063bc:	9301      	str	r3, [sp, #4]
 80063be:	2300      	movs	r3, #0
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	2300      	movs	r3, #0
 80063c4:	460a      	mov	r2, r1
 80063c6:	491e      	ldr	r1, [pc, #120]	; (8006440 <vTaskStartScheduler+0xa8>)
 80063c8:	481e      	ldr	r0, [pc, #120]	; (8006444 <vTaskStartScheduler+0xac>)
 80063ca:	f7ff fe1d 	bl	8006008 <xTaskCreateStatic>
 80063ce:	4603      	mov	r3, r0
 80063d0:	4a1d      	ldr	r2, [pc, #116]	; (8006448 <vTaskStartScheduler+0xb0>)
 80063d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80063d4:	4b1c      	ldr	r3, [pc, #112]	; (8006448 <vTaskStartScheduler+0xb0>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80063dc:	2301      	movs	r3, #1
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	e001      	b.n	80063e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d116      	bne.n	800641a <vTaskStartScheduler+0x82>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	613b      	str	r3, [r7, #16]
}
 80063fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006400:	4b12      	ldr	r3, [pc, #72]	; (800644c <vTaskStartScheduler+0xb4>)
 8006402:	f04f 32ff 	mov.w	r2, #4294967295
 8006406:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006408:	4b11      	ldr	r3, [pc, #68]	; (8006450 <vTaskStartScheduler+0xb8>)
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800640e:	4b11      	ldr	r3, [pc, #68]	; (8006454 <vTaskStartScheduler+0xbc>)
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006414:	f000 fba4 	bl	8006b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006418:	e00e      	b.n	8006438 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d10a      	bne.n	8006438 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	60fb      	str	r3, [r7, #12]
}
 8006434:	bf00      	nop
 8006436:	e7fe      	b.n	8006436 <vTaskStartScheduler+0x9e>
}
 8006438:	bf00      	nop
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	08008174 	.word	0x08008174
 8006444:	080067d5 	.word	0x080067d5
 8006448:	200006a8 	.word	0x200006a8
 800644c:	200006a4 	.word	0x200006a4
 8006450:	20000690 	.word	0x20000690
 8006454:	20000688 	.word	0x20000688

08006458 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800645c:	4b04      	ldr	r3, [pc, #16]	; (8006470 <vTaskSuspendAll+0x18>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3301      	adds	r3, #1
 8006462:	4a03      	ldr	r2, [pc, #12]	; (8006470 <vTaskSuspendAll+0x18>)
 8006464:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006466:	bf00      	nop
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	200006ac 	.word	0x200006ac

08006474 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800647e:	2300      	movs	r3, #0
 8006480:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006482:	4b41      	ldr	r3, [pc, #260]	; (8006588 <xTaskResumeAll+0x114>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10a      	bne.n	80064a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	603b      	str	r3, [r7, #0]
}
 800649c:	bf00      	nop
 800649e:	e7fe      	b.n	800649e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064a0:	f000 fc00 	bl	8006ca4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064a4:	4b38      	ldr	r3, [pc, #224]	; (8006588 <xTaskResumeAll+0x114>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	4a37      	ldr	r2, [pc, #220]	; (8006588 <xTaskResumeAll+0x114>)
 80064ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064ae:	4b36      	ldr	r3, [pc, #216]	; (8006588 <xTaskResumeAll+0x114>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d161      	bne.n	800657a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064b6:	4b35      	ldr	r3, [pc, #212]	; (800658c <xTaskResumeAll+0x118>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d05d      	beq.n	800657a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064be:	e02e      	b.n	800651e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c0:	4b33      	ldr	r3, [pc, #204]	; (8006590 <xTaskResumeAll+0x11c>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3318      	adds	r3, #24
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff fd71 	bl	8005fb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff fd6c 	bl	8005fb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	2201      	movs	r2, #1
 80064e2:	409a      	lsls	r2, r3
 80064e4:	4b2b      	ldr	r3, [pc, #172]	; (8006594 <xTaskResumeAll+0x120>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	4a2a      	ldr	r2, [pc, #168]	; (8006594 <xTaskResumeAll+0x120>)
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4a27      	ldr	r2, [pc, #156]	; (8006598 <xTaskResumeAll+0x124>)
 80064fc:	441a      	add	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3304      	adds	r3, #4
 8006502:	4619      	mov	r1, r3
 8006504:	4610      	mov	r0, r2
 8006506:	f7ff fcf8 	bl	8005efa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650e:	4b23      	ldr	r3, [pc, #140]	; (800659c <xTaskResumeAll+0x128>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	429a      	cmp	r2, r3
 8006516:	d302      	bcc.n	800651e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006518:	4b21      	ldr	r3, [pc, #132]	; (80065a0 <xTaskResumeAll+0x12c>)
 800651a:	2201      	movs	r2, #1
 800651c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800651e:	4b1c      	ldr	r3, [pc, #112]	; (8006590 <xTaskResumeAll+0x11c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1cc      	bne.n	80064c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800652c:	f000 fa08 	bl	8006940 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006530:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <xTaskResumeAll+0x130>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d010      	beq.n	800655e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800653c:	f000 f836 	bl	80065ac <xTaskIncrementTick>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006546:	4b16      	ldr	r3, [pc, #88]	; (80065a0 <xTaskResumeAll+0x12c>)
 8006548:	2201      	movs	r2, #1
 800654a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3b01      	subs	r3, #1
 8006550:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1f1      	bne.n	800653c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006558:	4b12      	ldr	r3, [pc, #72]	; (80065a4 <xTaskResumeAll+0x130>)
 800655a:	2200      	movs	r2, #0
 800655c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800655e:	4b10      	ldr	r3, [pc, #64]	; (80065a0 <xTaskResumeAll+0x12c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006566:	2301      	movs	r3, #1
 8006568:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800656a:	4b0f      	ldr	r3, [pc, #60]	; (80065a8 <xTaskResumeAll+0x134>)
 800656c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800657a:	f000 fbc3 	bl	8006d04 <vPortExitCritical>

	return xAlreadyYielded;
 800657e:	68bb      	ldr	r3, [r7, #8]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	200006ac 	.word	0x200006ac
 800658c:	20000684 	.word	0x20000684
 8006590:	20000644 	.word	0x20000644
 8006594:	2000068c 	.word	0x2000068c
 8006598:	20000588 	.word	0x20000588
 800659c:	20000584 	.word	0x20000584
 80065a0:	20000698 	.word	0x20000698
 80065a4:	20000694 	.word	0x20000694
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065b2:	2300      	movs	r3, #0
 80065b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065b6:	4b4e      	ldr	r3, [pc, #312]	; (80066f0 <xTaskIncrementTick+0x144>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f040 808e 	bne.w	80066dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80065c0:	4b4c      	ldr	r3, [pc, #304]	; (80066f4 <xTaskIncrementTick+0x148>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3301      	adds	r3, #1
 80065c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80065c8:	4a4a      	ldr	r2, [pc, #296]	; (80066f4 <xTaskIncrementTick+0x148>)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d120      	bne.n	8006616 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80065d4:	4b48      	ldr	r3, [pc, #288]	; (80066f8 <xTaskIncrementTick+0x14c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00a      	beq.n	80065f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	603b      	str	r3, [r7, #0]
}
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <xTaskIncrementTick+0x46>
 80065f4:	4b40      	ldr	r3, [pc, #256]	; (80066f8 <xTaskIncrementTick+0x14c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	4b40      	ldr	r3, [pc, #256]	; (80066fc <xTaskIncrementTick+0x150>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a3e      	ldr	r2, [pc, #248]	; (80066f8 <xTaskIncrementTick+0x14c>)
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	4a3e      	ldr	r2, [pc, #248]	; (80066fc <xTaskIncrementTick+0x150>)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	4b3d      	ldr	r3, [pc, #244]	; (8006700 <xTaskIncrementTick+0x154>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3301      	adds	r3, #1
 800660e:	4a3c      	ldr	r2, [pc, #240]	; (8006700 <xTaskIncrementTick+0x154>)
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	f000 f995 	bl	8006940 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006616:	4b3b      	ldr	r3, [pc, #236]	; (8006704 <xTaskIncrementTick+0x158>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	429a      	cmp	r2, r3
 800661e:	d348      	bcc.n	80066b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006620:	4b35      	ldr	r3, [pc, #212]	; (80066f8 <xTaskIncrementTick+0x14c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d104      	bne.n	8006634 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800662a:	4b36      	ldr	r3, [pc, #216]	; (8006704 <xTaskIncrementTick+0x158>)
 800662c:	f04f 32ff 	mov.w	r2, #4294967295
 8006630:	601a      	str	r2, [r3, #0]
					break;
 8006632:	e03e      	b.n	80066b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006634:	4b30      	ldr	r3, [pc, #192]	; (80066f8 <xTaskIncrementTick+0x14c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	429a      	cmp	r2, r3
 800664a:	d203      	bcs.n	8006654 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800664c:	4a2d      	ldr	r2, [pc, #180]	; (8006704 <xTaskIncrementTick+0x158>)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006652:	e02e      	b.n	80066b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	3304      	adds	r3, #4
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff fcab 	bl	8005fb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006662:	2b00      	cmp	r3, #0
 8006664:	d004      	beq.n	8006670 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	3318      	adds	r3, #24
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff fca2 	bl	8005fb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006674:	2201      	movs	r2, #1
 8006676:	409a      	lsls	r2, r3
 8006678:	4b23      	ldr	r3, [pc, #140]	; (8006708 <xTaskIncrementTick+0x15c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4313      	orrs	r3, r2
 800667e:	4a22      	ldr	r2, [pc, #136]	; (8006708 <xTaskIncrementTick+0x15c>)
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006686:	4613      	mov	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4a1f      	ldr	r2, [pc, #124]	; (800670c <xTaskIncrementTick+0x160>)
 8006690:	441a      	add	r2, r3
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	3304      	adds	r3, #4
 8006696:	4619      	mov	r1, r3
 8006698:	4610      	mov	r0, r2
 800669a:	f7ff fc2e 	bl	8005efa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a2:	4b1b      	ldr	r3, [pc, #108]	; (8006710 <xTaskIncrementTick+0x164>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d3b9      	bcc.n	8006620 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80066ac:	2301      	movs	r3, #1
 80066ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066b0:	e7b6      	b.n	8006620 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066b2:	4b17      	ldr	r3, [pc, #92]	; (8006710 <xTaskIncrementTick+0x164>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b8:	4914      	ldr	r1, [pc, #80]	; (800670c <xTaskIncrementTick+0x160>)
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d901      	bls.n	80066ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80066ca:	2301      	movs	r3, #1
 80066cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80066ce:	4b11      	ldr	r3, [pc, #68]	; (8006714 <xTaskIncrementTick+0x168>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d007      	beq.n	80066e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80066d6:	2301      	movs	r3, #1
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	e004      	b.n	80066e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80066dc:	4b0e      	ldr	r3, [pc, #56]	; (8006718 <xTaskIncrementTick+0x16c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3301      	adds	r3, #1
 80066e2:	4a0d      	ldr	r2, [pc, #52]	; (8006718 <xTaskIncrementTick+0x16c>)
 80066e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066e6:	697b      	ldr	r3, [r7, #20]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	200006ac 	.word	0x200006ac
 80066f4:	20000688 	.word	0x20000688
 80066f8:	2000063c 	.word	0x2000063c
 80066fc:	20000640 	.word	0x20000640
 8006700:	2000069c 	.word	0x2000069c
 8006704:	200006a4 	.word	0x200006a4
 8006708:	2000068c 	.word	0x2000068c
 800670c:	20000588 	.word	0x20000588
 8006710:	20000584 	.word	0x20000584
 8006714:	20000698 	.word	0x20000698
 8006718:	20000694 	.word	0x20000694

0800671c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006722:	4b27      	ldr	r3, [pc, #156]	; (80067c0 <vTaskSwitchContext+0xa4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800672a:	4b26      	ldr	r3, [pc, #152]	; (80067c4 <vTaskSwitchContext+0xa8>)
 800672c:	2201      	movs	r2, #1
 800672e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006730:	e03f      	b.n	80067b2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006732:	4b24      	ldr	r3, [pc, #144]	; (80067c4 <vTaskSwitchContext+0xa8>)
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006738:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <vTaskSwitchContext+0xac>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	fab3 f383 	clz	r3, r3
 8006744:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006746:	7afb      	ldrb	r3, [r7, #11]
 8006748:	f1c3 031f 	rsb	r3, r3, #31
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	491f      	ldr	r1, [pc, #124]	; (80067cc <vTaskSwitchContext+0xb0>)
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	607b      	str	r3, [r7, #4]
}
 8006774:	bf00      	nop
 8006776:	e7fe      	b.n	8006776 <vTaskSwitchContext+0x5a>
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4a12      	ldr	r2, [pc, #72]	; (80067cc <vTaskSwitchContext+0xb0>)
 8006784:	4413      	add	r3, r2
 8006786:	613b      	str	r3, [r7, #16]
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	605a      	str	r2, [r3, #4]
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	3308      	adds	r3, #8
 800679a:	429a      	cmp	r2, r3
 800679c:	d104      	bne.n	80067a8 <vTaskSwitchContext+0x8c>
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	605a      	str	r2, [r3, #4]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	4a08      	ldr	r2, [pc, #32]	; (80067d0 <vTaskSwitchContext+0xb4>)
 80067b0:	6013      	str	r3, [r2, #0]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	200006ac 	.word	0x200006ac
 80067c4:	20000698 	.word	0x20000698
 80067c8:	2000068c 	.word	0x2000068c
 80067cc:	20000588 	.word	0x20000588
 80067d0:	20000584 	.word	0x20000584

080067d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067dc:	f000 f852 	bl	8006884 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067e0:	4b06      	ldr	r3, [pc, #24]	; (80067fc <prvIdleTask+0x28>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d9f9      	bls.n	80067dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <prvIdleTask+0x2c>)
 80067ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067f8:	e7f0      	b.n	80067dc <prvIdleTask+0x8>
 80067fa:	bf00      	nop
 80067fc:	20000588 	.word	0x20000588
 8006800:	e000ed04 	.word	0xe000ed04

08006804 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800680a:	2300      	movs	r3, #0
 800680c:	607b      	str	r3, [r7, #4]
 800680e:	e00c      	b.n	800682a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4a12      	ldr	r2, [pc, #72]	; (8006864 <prvInitialiseTaskLists+0x60>)
 800681c:	4413      	add	r3, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f7ff fb3e 	bl	8005ea0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3301      	adds	r3, #1
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b06      	cmp	r3, #6
 800682e:	d9ef      	bls.n	8006810 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006830:	480d      	ldr	r0, [pc, #52]	; (8006868 <prvInitialiseTaskLists+0x64>)
 8006832:	f7ff fb35 	bl	8005ea0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006836:	480d      	ldr	r0, [pc, #52]	; (800686c <prvInitialiseTaskLists+0x68>)
 8006838:	f7ff fb32 	bl	8005ea0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800683c:	480c      	ldr	r0, [pc, #48]	; (8006870 <prvInitialiseTaskLists+0x6c>)
 800683e:	f7ff fb2f 	bl	8005ea0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006842:	480c      	ldr	r0, [pc, #48]	; (8006874 <prvInitialiseTaskLists+0x70>)
 8006844:	f7ff fb2c 	bl	8005ea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006848:	480b      	ldr	r0, [pc, #44]	; (8006878 <prvInitialiseTaskLists+0x74>)
 800684a:	f7ff fb29 	bl	8005ea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800684e:	4b0b      	ldr	r3, [pc, #44]	; (800687c <prvInitialiseTaskLists+0x78>)
 8006850:	4a05      	ldr	r2, [pc, #20]	; (8006868 <prvInitialiseTaskLists+0x64>)
 8006852:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006854:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <prvInitialiseTaskLists+0x7c>)
 8006856:	4a05      	ldr	r2, [pc, #20]	; (800686c <prvInitialiseTaskLists+0x68>)
 8006858:	601a      	str	r2, [r3, #0]
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20000588 	.word	0x20000588
 8006868:	20000614 	.word	0x20000614
 800686c:	20000628 	.word	0x20000628
 8006870:	20000644 	.word	0x20000644
 8006874:	20000658 	.word	0x20000658
 8006878:	20000670 	.word	0x20000670
 800687c:	2000063c 	.word	0x2000063c
 8006880:	20000640 	.word	0x20000640

08006884 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800688a:	e019      	b.n	80068c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800688c:	f000 fa0a 	bl	8006ca4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006890:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <prvCheckTasksWaitingTermination+0x50>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3304      	adds	r3, #4
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff fb89 	bl	8005fb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068a2:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <prvCheckTasksWaitingTermination+0x54>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	4a0b      	ldr	r2, [pc, #44]	; (80068d8 <prvCheckTasksWaitingTermination+0x54>)
 80068aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <prvCheckTasksWaitingTermination+0x58>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	4a0a      	ldr	r2, [pc, #40]	; (80068dc <prvCheckTasksWaitingTermination+0x58>)
 80068b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068b6:	f000 fa25 	bl	8006d04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f810 	bl	80068e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068c0:	4b06      	ldr	r3, [pc, #24]	; (80068dc <prvCheckTasksWaitingTermination+0x58>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e1      	bne.n	800688c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000658 	.word	0x20000658
 80068d8:	20000684 	.word	0x20000684
 80068dc:	2000066c 	.word	0x2000066c

080068e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d108      	bne.n	8006904 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fb82 	bl	8007000 <vPortFree>
				vPortFree( pxTCB );
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fb7f 	bl	8007000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006902:	e018      	b.n	8006936 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800690a:	2b01      	cmp	r3, #1
 800690c:	d103      	bne.n	8006916 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fb76 	bl	8007000 <vPortFree>
	}
 8006914:	e00f      	b.n	8006936 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800691c:	2b02      	cmp	r3, #2
 800691e:	d00a      	beq.n	8006936 <prvDeleteTCB+0x56>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	60fb      	str	r3, [r7, #12]
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <prvDeleteTCB+0x54>
	}
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006946:	4b0c      	ldr	r3, [pc, #48]	; (8006978 <prvResetNextTaskUnblockTime+0x38>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <prvResetNextTaskUnblockTime+0x3c>)
 8006952:	f04f 32ff 	mov.w	r2, #4294967295
 8006956:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006958:	e008      	b.n	800696c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800695a:	4b07      	ldr	r3, [pc, #28]	; (8006978 <prvResetNextTaskUnblockTime+0x38>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	4a04      	ldr	r2, [pc, #16]	; (800697c <prvResetNextTaskUnblockTime+0x3c>)
 800696a:	6013      	str	r3, [r2, #0]
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	2000063c 	.word	0x2000063c
 800697c:	200006a4 	.word	0x200006a4

08006980 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800698a:	4b29      	ldr	r3, [pc, #164]	; (8006a30 <prvAddCurrentTaskToDelayedList+0xb0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006990:	4b28      	ldr	r3, [pc, #160]	; (8006a34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3304      	adds	r3, #4
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff fb0c 	bl	8005fb4 <uxListRemove>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10b      	bne.n	80069ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80069a2:	4b24      	ldr	r3, [pc, #144]	; (8006a34 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a8:	2201      	movs	r2, #1
 80069aa:	fa02 f303 	lsl.w	r3, r2, r3
 80069ae:	43da      	mvns	r2, r3
 80069b0:	4b21      	ldr	r3, [pc, #132]	; (8006a38 <prvAddCurrentTaskToDelayedList+0xb8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4013      	ands	r3, r2
 80069b6:	4a20      	ldr	r2, [pc, #128]	; (8006a38 <prvAddCurrentTaskToDelayedList+0xb8>)
 80069b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c0:	d10a      	bne.n	80069d8 <prvAddCurrentTaskToDelayedList+0x58>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d007      	beq.n	80069d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069c8:	4b1a      	ldr	r3, [pc, #104]	; (8006a34 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3304      	adds	r3, #4
 80069ce:	4619      	mov	r1, r3
 80069d0:	481a      	ldr	r0, [pc, #104]	; (8006a3c <prvAddCurrentTaskToDelayedList+0xbc>)
 80069d2:	f7ff fa92 	bl	8005efa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069d6:	e026      	b.n	8006a26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4413      	add	r3, r2
 80069de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069e0:	4b14      	ldr	r3, [pc, #80]	; (8006a34 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d209      	bcs.n	8006a04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069f0:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <prvAddCurrentTaskToDelayedList+0xc0>)
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	4b0f      	ldr	r3, [pc, #60]	; (8006a34 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3304      	adds	r3, #4
 80069fa:	4619      	mov	r1, r3
 80069fc:	4610      	mov	r0, r2
 80069fe:	f7ff faa0 	bl	8005f42 <vListInsert>
}
 8006a02:	e010      	b.n	8006a26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a04:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	4b0a      	ldr	r3, [pc, #40]	; (8006a34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4610      	mov	r0, r2
 8006a12:	f7ff fa96 	bl	8005f42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a16:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d202      	bcs.n	8006a26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006a20:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	6013      	str	r3, [r2, #0]
}
 8006a26:	bf00      	nop
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20000688 	.word	0x20000688
 8006a34:	20000584 	.word	0x20000584
 8006a38:	2000068c 	.word	0x2000068c
 8006a3c:	20000670 	.word	0x20000670
 8006a40:	20000640 	.word	0x20000640
 8006a44:	2000063c 	.word	0x2000063c
 8006a48:	200006a4 	.word	0x200006a4

08006a4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3b04      	subs	r3, #4
 8006a5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3b04      	subs	r3, #4
 8006a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f023 0201 	bic.w	r2, r3, #1
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3b04      	subs	r3, #4
 8006a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a7c:	4a0c      	ldr	r2, [pc, #48]	; (8006ab0 <pxPortInitialiseStack+0x64>)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3b14      	subs	r3, #20
 8006a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3b04      	subs	r3, #4
 8006a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f06f 0202 	mvn.w	r2, #2
 8006a9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3b20      	subs	r3, #32
 8006aa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	08006ab5 	.word	0x08006ab5

08006ab4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006abe:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <prvTaskExitError+0x54>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac6:	d00a      	beq.n	8006ade <prvTaskExitError+0x2a>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	60fb      	str	r3, [r7, #12]
}
 8006ada:	bf00      	nop
 8006adc:	e7fe      	b.n	8006adc <prvTaskExitError+0x28>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60bb      	str	r3, [r7, #8]
}
 8006af0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006af2:	bf00      	nop
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0fc      	beq.n	8006af4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006afa:	bf00      	nop
 8006afc:	bf00      	nop
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	2000003c 	.word	0x2000003c
 8006b0c:	00000000 	.word	0x00000000

08006b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <pxCurrentTCBConst2>)
 8006b12:	6819      	ldr	r1, [r3, #0]
 8006b14:	6808      	ldr	r0, [r1, #0]
 8006b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1a:	f380 8809 	msr	PSP, r0
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f04f 0000 	mov.w	r0, #0
 8006b26:	f380 8811 	msr	BASEPRI, r0
 8006b2a:	4770      	bx	lr
 8006b2c:	f3af 8000 	nop.w

08006b30 <pxCurrentTCBConst2>:
 8006b30:	20000584 	.word	0x20000584
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop

08006b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b38:	4808      	ldr	r0, [pc, #32]	; (8006b5c <prvPortStartFirstTask+0x24>)
 8006b3a:	6800      	ldr	r0, [r0, #0]
 8006b3c:	6800      	ldr	r0, [r0, #0]
 8006b3e:	f380 8808 	msr	MSP, r0
 8006b42:	f04f 0000 	mov.w	r0, #0
 8006b46:	f380 8814 	msr	CONTROL, r0
 8006b4a:	b662      	cpsie	i
 8006b4c:	b661      	cpsie	f
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	df00      	svc	0
 8006b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b5a:	bf00      	nop
 8006b5c:	e000ed08 	.word	0xe000ed08

08006b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b66:	4b46      	ldr	r3, [pc, #280]	; (8006c80 <xPortStartScheduler+0x120>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a46      	ldr	r2, [pc, #280]	; (8006c84 <xPortStartScheduler+0x124>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d10a      	bne.n	8006b86 <xPortStartScheduler+0x26>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	613b      	str	r3, [r7, #16]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b86:	4b3e      	ldr	r3, [pc, #248]	; (8006c80 <xPortStartScheduler+0x120>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a3f      	ldr	r2, [pc, #252]	; (8006c88 <xPortStartScheduler+0x128>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d10a      	bne.n	8006ba6 <xPortStartScheduler+0x46>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	60fb      	str	r3, [r7, #12]
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ba6:	4b39      	ldr	r3, [pc, #228]	; (8006c8c <xPortStartScheduler+0x12c>)
 8006ba8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	22ff      	movs	r2, #255	; 0xff
 8006bb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	4b31      	ldr	r3, [pc, #196]	; (8006c90 <xPortStartScheduler+0x130>)
 8006bcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006bce:	4b31      	ldr	r3, [pc, #196]	; (8006c94 <xPortStartScheduler+0x134>)
 8006bd0:	2207      	movs	r2, #7
 8006bd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bd4:	e009      	b.n	8006bea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006bd6:	4b2f      	ldr	r3, [pc, #188]	; (8006c94 <xPortStartScheduler+0x134>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	4a2d      	ldr	r2, [pc, #180]	; (8006c94 <xPortStartScheduler+0x134>)
 8006bde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf2:	2b80      	cmp	r3, #128	; 0x80
 8006bf4:	d0ef      	beq.n	8006bd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bf6:	4b27      	ldr	r3, [pc, #156]	; (8006c94 <xPortStartScheduler+0x134>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f1c3 0307 	rsb	r3, r3, #7
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d00a      	beq.n	8006c18 <xPortStartScheduler+0xb8>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	60bb      	str	r3, [r7, #8]
}
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c18:	4b1e      	ldr	r3, [pc, #120]	; (8006c94 <xPortStartScheduler+0x134>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	4a1d      	ldr	r2, [pc, #116]	; (8006c94 <xPortStartScheduler+0x134>)
 8006c20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c22:	4b1c      	ldr	r3, [pc, #112]	; (8006c94 <xPortStartScheduler+0x134>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c2a:	4a1a      	ldr	r2, [pc, #104]	; (8006c94 <xPortStartScheduler+0x134>)
 8006c2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c36:	4b18      	ldr	r3, [pc, #96]	; (8006c98 <xPortStartScheduler+0x138>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a17      	ldr	r2, [pc, #92]	; (8006c98 <xPortStartScheduler+0x138>)
 8006c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c42:	4b15      	ldr	r3, [pc, #84]	; (8006c98 <xPortStartScheduler+0x138>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a14      	ldr	r2, [pc, #80]	; (8006c98 <xPortStartScheduler+0x138>)
 8006c48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c4e:	f000 f8dd 	bl	8006e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c52:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <xPortStartScheduler+0x13c>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c58:	f000 f8fc 	bl	8006e54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c5c:	4b10      	ldr	r3, [pc, #64]	; (8006ca0 <xPortStartScheduler+0x140>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a0f      	ldr	r2, [pc, #60]	; (8006ca0 <xPortStartScheduler+0x140>)
 8006c62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c68:	f7ff ff66 	bl	8006b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c6c:	f7ff fd56 	bl	800671c <vTaskSwitchContext>
	prvTaskExitError();
 8006c70:	f7ff ff20 	bl	8006ab4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	e000ed00 	.word	0xe000ed00
 8006c84:	410fc271 	.word	0x410fc271
 8006c88:	410fc270 	.word	0x410fc270
 8006c8c:	e000e400 	.word	0xe000e400
 8006c90:	200006b0 	.word	0x200006b0
 8006c94:	200006b4 	.word	0x200006b4
 8006c98:	e000ed20 	.word	0xe000ed20
 8006c9c:	2000003c 	.word	0x2000003c
 8006ca0:	e000ef34 	.word	0xe000ef34

08006ca4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	607b      	str	r3, [r7, #4]
}
 8006cbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006cbe:	4b0f      	ldr	r3, [pc, #60]	; (8006cfc <vPortEnterCritical+0x58>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	4a0d      	ldr	r2, [pc, #52]	; (8006cfc <vPortEnterCritical+0x58>)
 8006cc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cc8:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <vPortEnterCritical+0x58>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d10f      	bne.n	8006cf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <vPortEnterCritical+0x5c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	603b      	str	r3, [r7, #0]
}
 8006cec:	bf00      	nop
 8006cee:	e7fe      	b.n	8006cee <vPortEnterCritical+0x4a>
	}
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	2000003c 	.word	0x2000003c
 8006d00:	e000ed04 	.word	0xe000ed04

08006d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d0a:	4b12      	ldr	r3, [pc, #72]	; (8006d54 <vPortExitCritical+0x50>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <vPortExitCritical+0x24>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	607b      	str	r3, [r7, #4]
}
 8006d24:	bf00      	nop
 8006d26:	e7fe      	b.n	8006d26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d28:	4b0a      	ldr	r3, [pc, #40]	; (8006d54 <vPortExitCritical+0x50>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	4a09      	ldr	r2, [pc, #36]	; (8006d54 <vPortExitCritical+0x50>)
 8006d30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d32:	4b08      	ldr	r3, [pc, #32]	; (8006d54 <vPortExitCritical+0x50>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d105      	bne.n	8006d46 <vPortExitCritical+0x42>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	2000003c 	.word	0x2000003c
	...

08006d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d60:	f3ef 8009 	mrs	r0, PSP
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <pxCurrentTCBConst>)
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	f01e 0f10 	tst.w	lr, #16
 8006d70:	bf08      	it	eq
 8006d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7a:	6010      	str	r0, [r2, #0]
 8006d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d84:	f380 8811 	msr	BASEPRI, r0
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f7ff fcc4 	bl	800671c <vTaskSwitchContext>
 8006d94:	f04f 0000 	mov.w	r0, #0
 8006d98:	f380 8811 	msr	BASEPRI, r0
 8006d9c:	bc09      	pop	{r0, r3}
 8006d9e:	6819      	ldr	r1, [r3, #0]
 8006da0:	6808      	ldr	r0, [r1, #0]
 8006da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da6:	f01e 0f10 	tst.w	lr, #16
 8006daa:	bf08      	it	eq
 8006dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006db0:	f380 8809 	msr	PSP, r0
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	f3af 8000 	nop.w

08006dc0 <pxCurrentTCBConst>:
 8006dc0:	20000584 	.word	0x20000584
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop

08006dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	607b      	str	r3, [r7, #4]
}
 8006de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006de2:	f7ff fbe3 	bl	80065ac <xTaskIncrementTick>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dec:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <SysTick_Handler+0x40>)
 8006dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	2300      	movs	r3, #0
 8006df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	f383 8811 	msr	BASEPRI, r3
}
 8006dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	e000ed04 	.word	0xe000ed04

08006e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e10:	4b0b      	ldr	r3, [pc, #44]	; (8006e40 <vPortSetupTimerInterrupt+0x34>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e16:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <vPortSetupTimerInterrupt+0x38>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e1c:	4b0a      	ldr	r3, [pc, #40]	; (8006e48 <vPortSetupTimerInterrupt+0x3c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a0a      	ldr	r2, [pc, #40]	; (8006e4c <vPortSetupTimerInterrupt+0x40>)
 8006e22:	fba2 2303 	umull	r2, r3, r2, r3
 8006e26:	099b      	lsrs	r3, r3, #6
 8006e28:	4a09      	ldr	r2, [pc, #36]	; (8006e50 <vPortSetupTimerInterrupt+0x44>)
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e2e:	4b04      	ldr	r3, [pc, #16]	; (8006e40 <vPortSetupTimerInterrupt+0x34>)
 8006e30:	2207      	movs	r2, #7
 8006e32:	601a      	str	r2, [r3, #0]
}
 8006e34:	bf00      	nop
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	e000e010 	.word	0xe000e010
 8006e44:	e000e018 	.word	0xe000e018
 8006e48:	20000030 	.word	0x20000030
 8006e4c:	10624dd3 	.word	0x10624dd3
 8006e50:	e000e014 	.word	0xe000e014

08006e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e64 <vPortEnableVFP+0x10>
 8006e58:	6801      	ldr	r1, [r0, #0]
 8006e5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e5e:	6001      	str	r1, [r0, #0]
 8006e60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e62:	bf00      	nop
 8006e64:	e000ed88 	.word	0xe000ed88

08006e68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08a      	sub	sp, #40	; 0x28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e70:	2300      	movs	r3, #0
 8006e72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e74:	f7ff faf0 	bl	8006458 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e78:	4b5b      	ldr	r3, [pc, #364]	; (8006fe8 <pvPortMalloc+0x180>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e80:	f000 f920 	bl	80070c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e84:	4b59      	ldr	r3, [pc, #356]	; (8006fec <pvPortMalloc+0x184>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f040 8093 	bne.w	8006fb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d01d      	beq.n	8006ed4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e98:	2208      	movs	r2, #8
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d014      	beq.n	8006ed4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f023 0307 	bic.w	r3, r3, #7
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f003 0307 	and.w	r3, r3, #7
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <pvPortMalloc+0x6c>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	617b      	str	r3, [r7, #20]
}
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d06e      	beq.n	8006fb8 <pvPortMalloc+0x150>
 8006eda:	4b45      	ldr	r3, [pc, #276]	; (8006ff0 <pvPortMalloc+0x188>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d869      	bhi.n	8006fb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ee4:	4b43      	ldr	r3, [pc, #268]	; (8006ff4 <pvPortMalloc+0x18c>)
 8006ee6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ee8:	4b42      	ldr	r3, [pc, #264]	; (8006ff4 <pvPortMalloc+0x18c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eee:	e004      	b.n	8006efa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d903      	bls.n	8006f0c <pvPortMalloc+0xa4>
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1f1      	bne.n	8006ef0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f0c:	4b36      	ldr	r3, [pc, #216]	; (8006fe8 <pvPortMalloc+0x180>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d050      	beq.n	8006fb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2208      	movs	r2, #8
 8006f1c:	4413      	add	r3, r2
 8006f1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	1ad2      	subs	r2, r2, r3
 8006f30:	2308      	movs	r3, #8
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d91f      	bls.n	8006f78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <pvPortMalloc+0xf8>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	613b      	str	r3, [r7, #16]
}
 8006f5c:	bf00      	nop
 8006f5e:	e7fe      	b.n	8006f5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	1ad2      	subs	r2, r2, r3
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f72:	69b8      	ldr	r0, [r7, #24]
 8006f74:	f000 f908 	bl	8007188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f78:	4b1d      	ldr	r3, [pc, #116]	; (8006ff0 <pvPortMalloc+0x188>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	4a1b      	ldr	r2, [pc, #108]	; (8006ff0 <pvPortMalloc+0x188>)
 8006f84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f86:	4b1a      	ldr	r3, [pc, #104]	; (8006ff0 <pvPortMalloc+0x188>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	4b1b      	ldr	r3, [pc, #108]	; (8006ff8 <pvPortMalloc+0x190>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d203      	bcs.n	8006f9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f92:	4b17      	ldr	r3, [pc, #92]	; (8006ff0 <pvPortMalloc+0x188>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <pvPortMalloc+0x190>)
 8006f98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	4b13      	ldr	r3, [pc, #76]	; (8006fec <pvPortMalloc+0x184>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	2200      	movs	r2, #0
 8006fac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006fae:	4b13      	ldr	r3, [pc, #76]	; (8006ffc <pvPortMalloc+0x194>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	4a11      	ldr	r2, [pc, #68]	; (8006ffc <pvPortMalloc+0x194>)
 8006fb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fb8:	f7ff fa5c 	bl	8006474 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <pvPortMalloc+0x174>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	60fb      	str	r3, [r7, #12]
}
 8006fd8:	bf00      	nop
 8006fda:	e7fe      	b.n	8006fda <pvPortMalloc+0x172>
	return pvReturn;
 8006fdc:	69fb      	ldr	r3, [r7, #28]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3728      	adds	r7, #40	; 0x28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20001278 	.word	0x20001278
 8006fec:	2000128c 	.word	0x2000128c
 8006ff0:	2000127c 	.word	0x2000127c
 8006ff4:	20001270 	.word	0x20001270
 8006ff8:	20001280 	.word	0x20001280
 8006ffc:	20001284 	.word	0x20001284

08007000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d04d      	beq.n	80070ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007012:	2308      	movs	r3, #8
 8007014:	425b      	negs	r3, r3
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4413      	add	r3, r2
 800701a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	4b24      	ldr	r3, [pc, #144]	; (80070b8 <vPortFree+0xb8>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4013      	ands	r3, r2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10a      	bne.n	8007044 <vPortFree+0x44>
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	60fb      	str	r3, [r7, #12]
}
 8007040:	bf00      	nop
 8007042:	e7fe      	b.n	8007042 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00a      	beq.n	8007062 <vPortFree+0x62>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	60bb      	str	r3, [r7, #8]
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	4b14      	ldr	r3, [pc, #80]	; (80070b8 <vPortFree+0xb8>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01e      	beq.n	80070ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d11a      	bne.n	80070ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	4b0e      	ldr	r3, [pc, #56]	; (80070b8 <vPortFree+0xb8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	43db      	mvns	r3, r3
 8007082:	401a      	ands	r2, r3
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007088:	f7ff f9e6 	bl	8006458 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <vPortFree+0xbc>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4413      	add	r3, r2
 8007096:	4a09      	ldr	r2, [pc, #36]	; (80070bc <vPortFree+0xbc>)
 8007098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800709a:	6938      	ldr	r0, [r7, #16]
 800709c:	f000 f874 	bl	8007188 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80070a0:	4b07      	ldr	r3, [pc, #28]	; (80070c0 <vPortFree+0xc0>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3301      	adds	r3, #1
 80070a6:	4a06      	ldr	r2, [pc, #24]	; (80070c0 <vPortFree+0xc0>)
 80070a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80070aa:	f7ff f9e3 	bl	8006474 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070ae:	bf00      	nop
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	2000128c 	.word	0x2000128c
 80070bc:	2000127c 	.word	0x2000127c
 80070c0:	20001288 	.word	0x20001288

080070c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80070ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070d0:	4b27      	ldr	r3, [pc, #156]	; (8007170 <prvHeapInit+0xac>)
 80070d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00c      	beq.n	80070f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	3307      	adds	r3, #7
 80070e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0307 	bic.w	r3, r3, #7
 80070ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	4a1f      	ldr	r2, [pc, #124]	; (8007170 <prvHeapInit+0xac>)
 80070f4:	4413      	add	r3, r2
 80070f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070fc:	4a1d      	ldr	r2, [pc, #116]	; (8007174 <prvHeapInit+0xb0>)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007102:	4b1c      	ldr	r3, [pc, #112]	; (8007174 <prvHeapInit+0xb0>)
 8007104:	2200      	movs	r2, #0
 8007106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	4413      	add	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007110:	2208      	movs	r2, #8
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1a9b      	subs	r3, r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0307 	bic.w	r3, r3, #7
 800711e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4a15      	ldr	r2, [pc, #84]	; (8007178 <prvHeapInit+0xb4>)
 8007124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007126:	4b14      	ldr	r3, [pc, #80]	; (8007178 <prvHeapInit+0xb4>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2200      	movs	r2, #0
 800712c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800712e:	4b12      	ldr	r3, [pc, #72]	; (8007178 <prvHeapInit+0xb4>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	1ad2      	subs	r2, r2, r3
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007144:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <prvHeapInit+0xb4>)
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	4a0a      	ldr	r2, [pc, #40]	; (800717c <prvHeapInit+0xb8>)
 8007152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	4a09      	ldr	r2, [pc, #36]	; (8007180 <prvHeapInit+0xbc>)
 800715a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800715c:	4b09      	ldr	r3, [pc, #36]	; (8007184 <prvHeapInit+0xc0>)
 800715e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007162:	601a      	str	r2, [r3, #0]
}
 8007164:	bf00      	nop
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	200006b8 	.word	0x200006b8
 8007174:	20001270 	.word	0x20001270
 8007178:	20001278 	.word	0x20001278
 800717c:	20001280 	.word	0x20001280
 8007180:	2000127c 	.word	0x2000127c
 8007184:	2000128c 	.word	0x2000128c

08007188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007190:	4b28      	ldr	r3, [pc, #160]	; (8007234 <prvInsertBlockIntoFreeList+0xac>)
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	e002      	b.n	800719c <prvInsertBlockIntoFreeList+0x14>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d8f7      	bhi.n	8007196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	4413      	add	r3, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d108      	bne.n	80071ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	441a      	add	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	441a      	add	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d118      	bne.n	8007210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b15      	ldr	r3, [pc, #84]	; (8007238 <prvInsertBlockIntoFreeList+0xb0>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d00d      	beq.n	8007206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	441a      	add	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	e008      	b.n	8007218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007206:	4b0c      	ldr	r3, [pc, #48]	; (8007238 <prvInsertBlockIntoFreeList+0xb0>)
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	e003      	b.n	8007218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	429a      	cmp	r2, r3
 800721e:	d002      	beq.n	8007226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007226:	bf00      	nop
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20001270 	.word	0x20001270
 8007238:	20001278 	.word	0x20001278

0800723c <std>:
 800723c:	2300      	movs	r3, #0
 800723e:	b510      	push	{r4, lr}
 8007240:	4604      	mov	r4, r0
 8007242:	e9c0 3300 	strd	r3, r3, [r0]
 8007246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800724a:	6083      	str	r3, [r0, #8]
 800724c:	8181      	strh	r1, [r0, #12]
 800724e:	6643      	str	r3, [r0, #100]	; 0x64
 8007250:	81c2      	strh	r2, [r0, #14]
 8007252:	6183      	str	r3, [r0, #24]
 8007254:	4619      	mov	r1, r3
 8007256:	2208      	movs	r2, #8
 8007258:	305c      	adds	r0, #92	; 0x5c
 800725a:	f000 f906 	bl	800746a <memset>
 800725e:	4b0d      	ldr	r3, [pc, #52]	; (8007294 <std+0x58>)
 8007260:	6263      	str	r3, [r4, #36]	; 0x24
 8007262:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <std+0x5c>)
 8007264:	62a3      	str	r3, [r4, #40]	; 0x28
 8007266:	4b0d      	ldr	r3, [pc, #52]	; (800729c <std+0x60>)
 8007268:	62e3      	str	r3, [r4, #44]	; 0x2c
 800726a:	4b0d      	ldr	r3, [pc, #52]	; (80072a0 <std+0x64>)
 800726c:	6323      	str	r3, [r4, #48]	; 0x30
 800726e:	4b0d      	ldr	r3, [pc, #52]	; (80072a4 <std+0x68>)
 8007270:	6224      	str	r4, [r4, #32]
 8007272:	429c      	cmp	r4, r3
 8007274:	d006      	beq.n	8007284 <std+0x48>
 8007276:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800727a:	4294      	cmp	r4, r2
 800727c:	d002      	beq.n	8007284 <std+0x48>
 800727e:	33d0      	adds	r3, #208	; 0xd0
 8007280:	429c      	cmp	r4, r3
 8007282:	d105      	bne.n	8007290 <std+0x54>
 8007284:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800728c:	f000 b966 	b.w	800755c <__retarget_lock_init_recursive>
 8007290:	bd10      	pop	{r4, pc}
 8007292:	bf00      	nop
 8007294:	080073e5 	.word	0x080073e5
 8007298:	08007407 	.word	0x08007407
 800729c:	0800743f 	.word	0x0800743f
 80072a0:	08007463 	.word	0x08007463
 80072a4:	20001290 	.word	0x20001290

080072a8 <stdio_exit_handler>:
 80072a8:	4a02      	ldr	r2, [pc, #8]	; (80072b4 <stdio_exit_handler+0xc>)
 80072aa:	4903      	ldr	r1, [pc, #12]	; (80072b8 <stdio_exit_handler+0x10>)
 80072ac:	4803      	ldr	r0, [pc, #12]	; (80072bc <stdio_exit_handler+0x14>)
 80072ae:	f000 b869 	b.w	8007384 <_fwalk_sglue>
 80072b2:	bf00      	nop
 80072b4:	20000040 	.word	0x20000040
 80072b8:	08007e09 	.word	0x08007e09
 80072bc:	2000004c 	.word	0x2000004c

080072c0 <cleanup_stdio>:
 80072c0:	6841      	ldr	r1, [r0, #4]
 80072c2:	4b0c      	ldr	r3, [pc, #48]	; (80072f4 <cleanup_stdio+0x34>)
 80072c4:	4299      	cmp	r1, r3
 80072c6:	b510      	push	{r4, lr}
 80072c8:	4604      	mov	r4, r0
 80072ca:	d001      	beq.n	80072d0 <cleanup_stdio+0x10>
 80072cc:	f000 fd9c 	bl	8007e08 <_fflush_r>
 80072d0:	68a1      	ldr	r1, [r4, #8]
 80072d2:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <cleanup_stdio+0x38>)
 80072d4:	4299      	cmp	r1, r3
 80072d6:	d002      	beq.n	80072de <cleanup_stdio+0x1e>
 80072d8:	4620      	mov	r0, r4
 80072da:	f000 fd95 	bl	8007e08 <_fflush_r>
 80072de:	68e1      	ldr	r1, [r4, #12]
 80072e0:	4b06      	ldr	r3, [pc, #24]	; (80072fc <cleanup_stdio+0x3c>)
 80072e2:	4299      	cmp	r1, r3
 80072e4:	d004      	beq.n	80072f0 <cleanup_stdio+0x30>
 80072e6:	4620      	mov	r0, r4
 80072e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ec:	f000 bd8c 	b.w	8007e08 <_fflush_r>
 80072f0:	bd10      	pop	{r4, pc}
 80072f2:	bf00      	nop
 80072f4:	20001290 	.word	0x20001290
 80072f8:	200012f8 	.word	0x200012f8
 80072fc:	20001360 	.word	0x20001360

08007300 <global_stdio_init.part.0>:
 8007300:	b510      	push	{r4, lr}
 8007302:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <global_stdio_init.part.0+0x30>)
 8007304:	4c0b      	ldr	r4, [pc, #44]	; (8007334 <global_stdio_init.part.0+0x34>)
 8007306:	4a0c      	ldr	r2, [pc, #48]	; (8007338 <global_stdio_init.part.0+0x38>)
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	4620      	mov	r0, r4
 800730c:	2200      	movs	r2, #0
 800730e:	2104      	movs	r1, #4
 8007310:	f7ff ff94 	bl	800723c <std>
 8007314:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007318:	2201      	movs	r2, #1
 800731a:	2109      	movs	r1, #9
 800731c:	f7ff ff8e 	bl	800723c <std>
 8007320:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007324:	2202      	movs	r2, #2
 8007326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800732a:	2112      	movs	r1, #18
 800732c:	f7ff bf86 	b.w	800723c <std>
 8007330:	200013c8 	.word	0x200013c8
 8007334:	20001290 	.word	0x20001290
 8007338:	080072a9 	.word	0x080072a9

0800733c <__sfp_lock_acquire>:
 800733c:	4801      	ldr	r0, [pc, #4]	; (8007344 <__sfp_lock_acquire+0x8>)
 800733e:	f000 b90e 	b.w	800755e <__retarget_lock_acquire_recursive>
 8007342:	bf00      	nop
 8007344:	200013d1 	.word	0x200013d1

08007348 <__sfp_lock_release>:
 8007348:	4801      	ldr	r0, [pc, #4]	; (8007350 <__sfp_lock_release+0x8>)
 800734a:	f000 b909 	b.w	8007560 <__retarget_lock_release_recursive>
 800734e:	bf00      	nop
 8007350:	200013d1 	.word	0x200013d1

08007354 <__sinit>:
 8007354:	b510      	push	{r4, lr}
 8007356:	4604      	mov	r4, r0
 8007358:	f7ff fff0 	bl	800733c <__sfp_lock_acquire>
 800735c:	6a23      	ldr	r3, [r4, #32]
 800735e:	b11b      	cbz	r3, 8007368 <__sinit+0x14>
 8007360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007364:	f7ff bff0 	b.w	8007348 <__sfp_lock_release>
 8007368:	4b04      	ldr	r3, [pc, #16]	; (800737c <__sinit+0x28>)
 800736a:	6223      	str	r3, [r4, #32]
 800736c:	4b04      	ldr	r3, [pc, #16]	; (8007380 <__sinit+0x2c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1f5      	bne.n	8007360 <__sinit+0xc>
 8007374:	f7ff ffc4 	bl	8007300 <global_stdio_init.part.0>
 8007378:	e7f2      	b.n	8007360 <__sinit+0xc>
 800737a:	bf00      	nop
 800737c:	080072c1 	.word	0x080072c1
 8007380:	200013c8 	.word	0x200013c8

08007384 <_fwalk_sglue>:
 8007384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007388:	4607      	mov	r7, r0
 800738a:	4688      	mov	r8, r1
 800738c:	4614      	mov	r4, r2
 800738e:	2600      	movs	r6, #0
 8007390:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007394:	f1b9 0901 	subs.w	r9, r9, #1
 8007398:	d505      	bpl.n	80073a6 <_fwalk_sglue+0x22>
 800739a:	6824      	ldr	r4, [r4, #0]
 800739c:	2c00      	cmp	r4, #0
 800739e:	d1f7      	bne.n	8007390 <_fwalk_sglue+0xc>
 80073a0:	4630      	mov	r0, r6
 80073a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073a6:	89ab      	ldrh	r3, [r5, #12]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d907      	bls.n	80073bc <_fwalk_sglue+0x38>
 80073ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073b0:	3301      	adds	r3, #1
 80073b2:	d003      	beq.n	80073bc <_fwalk_sglue+0x38>
 80073b4:	4629      	mov	r1, r5
 80073b6:	4638      	mov	r0, r7
 80073b8:	47c0      	blx	r8
 80073ba:	4306      	orrs	r6, r0
 80073bc:	3568      	adds	r5, #104	; 0x68
 80073be:	e7e9      	b.n	8007394 <_fwalk_sglue+0x10>

080073c0 <iprintf>:
 80073c0:	b40f      	push	{r0, r1, r2, r3}
 80073c2:	b507      	push	{r0, r1, r2, lr}
 80073c4:	4906      	ldr	r1, [pc, #24]	; (80073e0 <iprintf+0x20>)
 80073c6:	ab04      	add	r3, sp, #16
 80073c8:	6808      	ldr	r0, [r1, #0]
 80073ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ce:	6881      	ldr	r1, [r0, #8]
 80073d0:	9301      	str	r3, [sp, #4]
 80073d2:	f000 f9e9 	bl	80077a8 <_vfiprintf_r>
 80073d6:	b003      	add	sp, #12
 80073d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073dc:	b004      	add	sp, #16
 80073de:	4770      	bx	lr
 80073e0:	20000098 	.word	0x20000098

080073e4 <__sread>:
 80073e4:	b510      	push	{r4, lr}
 80073e6:	460c      	mov	r4, r1
 80073e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ec:	f000 f868 	bl	80074c0 <_read_r>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	bfab      	itete	ge
 80073f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073f6:	89a3      	ldrhlt	r3, [r4, #12]
 80073f8:	181b      	addge	r3, r3, r0
 80073fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073fe:	bfac      	ite	ge
 8007400:	6563      	strge	r3, [r4, #84]	; 0x54
 8007402:	81a3      	strhlt	r3, [r4, #12]
 8007404:	bd10      	pop	{r4, pc}

08007406 <__swrite>:
 8007406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800740a:	461f      	mov	r7, r3
 800740c:	898b      	ldrh	r3, [r1, #12]
 800740e:	05db      	lsls	r3, r3, #23
 8007410:	4605      	mov	r5, r0
 8007412:	460c      	mov	r4, r1
 8007414:	4616      	mov	r6, r2
 8007416:	d505      	bpl.n	8007424 <__swrite+0x1e>
 8007418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800741c:	2302      	movs	r3, #2
 800741e:	2200      	movs	r2, #0
 8007420:	f000 f83c 	bl	800749c <_lseek_r>
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800742a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800742e:	81a3      	strh	r3, [r4, #12]
 8007430:	4632      	mov	r2, r6
 8007432:	463b      	mov	r3, r7
 8007434:	4628      	mov	r0, r5
 8007436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800743a:	f000 b853 	b.w	80074e4 <_write_r>

0800743e <__sseek>:
 800743e:	b510      	push	{r4, lr}
 8007440:	460c      	mov	r4, r1
 8007442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007446:	f000 f829 	bl	800749c <_lseek_r>
 800744a:	1c43      	adds	r3, r0, #1
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	bf15      	itete	ne
 8007450:	6560      	strne	r0, [r4, #84]	; 0x54
 8007452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800745a:	81a3      	strheq	r3, [r4, #12]
 800745c:	bf18      	it	ne
 800745e:	81a3      	strhne	r3, [r4, #12]
 8007460:	bd10      	pop	{r4, pc}

08007462 <__sclose>:
 8007462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007466:	f000 b809 	b.w	800747c <_close_r>

0800746a <memset>:
 800746a:	4402      	add	r2, r0
 800746c:	4603      	mov	r3, r0
 800746e:	4293      	cmp	r3, r2
 8007470:	d100      	bne.n	8007474 <memset+0xa>
 8007472:	4770      	bx	lr
 8007474:	f803 1b01 	strb.w	r1, [r3], #1
 8007478:	e7f9      	b.n	800746e <memset+0x4>
	...

0800747c <_close_r>:
 800747c:	b538      	push	{r3, r4, r5, lr}
 800747e:	4d06      	ldr	r5, [pc, #24]	; (8007498 <_close_r+0x1c>)
 8007480:	2300      	movs	r3, #0
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	602b      	str	r3, [r5, #0]
 8007488:	f7fa fcd3 	bl	8001e32 <_close>
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	d102      	bne.n	8007496 <_close_r+0x1a>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	b103      	cbz	r3, 8007496 <_close_r+0x1a>
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	200013cc 	.word	0x200013cc

0800749c <_lseek_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4d07      	ldr	r5, [pc, #28]	; (80074bc <_lseek_r+0x20>)
 80074a0:	4604      	mov	r4, r0
 80074a2:	4608      	mov	r0, r1
 80074a4:	4611      	mov	r1, r2
 80074a6:	2200      	movs	r2, #0
 80074a8:	602a      	str	r2, [r5, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f7fa fce8 	bl	8001e80 <_lseek>
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d102      	bne.n	80074ba <_lseek_r+0x1e>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	b103      	cbz	r3, 80074ba <_lseek_r+0x1e>
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	bd38      	pop	{r3, r4, r5, pc}
 80074bc:	200013cc 	.word	0x200013cc

080074c0 <_read_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4d07      	ldr	r5, [pc, #28]	; (80074e0 <_read_r+0x20>)
 80074c4:	4604      	mov	r4, r0
 80074c6:	4608      	mov	r0, r1
 80074c8:	4611      	mov	r1, r2
 80074ca:	2200      	movs	r2, #0
 80074cc:	602a      	str	r2, [r5, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	f7fa fc76 	bl	8001dc0 <_read>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_read_r+0x1e>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_read_r+0x1e>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	200013cc 	.word	0x200013cc

080074e4 <_write_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4d07      	ldr	r5, [pc, #28]	; (8007504 <_write_r+0x20>)
 80074e8:	4604      	mov	r4, r0
 80074ea:	4608      	mov	r0, r1
 80074ec:	4611      	mov	r1, r2
 80074ee:	2200      	movs	r2, #0
 80074f0:	602a      	str	r2, [r5, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	f7fa fc81 	bl	8001dfa <_write>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d102      	bne.n	8007502 <_write_r+0x1e>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	b103      	cbz	r3, 8007502 <_write_r+0x1e>
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	200013cc 	.word	0x200013cc

08007508 <__errno>:
 8007508:	4b01      	ldr	r3, [pc, #4]	; (8007510 <__errno+0x8>)
 800750a:	6818      	ldr	r0, [r3, #0]
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	20000098 	.word	0x20000098

08007514 <__libc_init_array>:
 8007514:	b570      	push	{r4, r5, r6, lr}
 8007516:	4d0d      	ldr	r5, [pc, #52]	; (800754c <__libc_init_array+0x38>)
 8007518:	4c0d      	ldr	r4, [pc, #52]	; (8007550 <__libc_init_array+0x3c>)
 800751a:	1b64      	subs	r4, r4, r5
 800751c:	10a4      	asrs	r4, r4, #2
 800751e:	2600      	movs	r6, #0
 8007520:	42a6      	cmp	r6, r4
 8007522:	d109      	bne.n	8007538 <__libc_init_array+0x24>
 8007524:	4d0b      	ldr	r5, [pc, #44]	; (8007554 <__libc_init_array+0x40>)
 8007526:	4c0c      	ldr	r4, [pc, #48]	; (8007558 <__libc_init_array+0x44>)
 8007528:	f000 fdc0 	bl	80080ac <_init>
 800752c:	1b64      	subs	r4, r4, r5
 800752e:	10a4      	asrs	r4, r4, #2
 8007530:	2600      	movs	r6, #0
 8007532:	42a6      	cmp	r6, r4
 8007534:	d105      	bne.n	8007542 <__libc_init_array+0x2e>
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	f855 3b04 	ldr.w	r3, [r5], #4
 800753c:	4798      	blx	r3
 800753e:	3601      	adds	r6, #1
 8007540:	e7ee      	b.n	8007520 <__libc_init_array+0xc>
 8007542:	f855 3b04 	ldr.w	r3, [r5], #4
 8007546:	4798      	blx	r3
 8007548:	3601      	adds	r6, #1
 800754a:	e7f2      	b.n	8007532 <__libc_init_array+0x1e>
 800754c:	08008200 	.word	0x08008200
 8007550:	08008200 	.word	0x08008200
 8007554:	08008200 	.word	0x08008200
 8007558:	08008204 	.word	0x08008204

0800755c <__retarget_lock_init_recursive>:
 800755c:	4770      	bx	lr

0800755e <__retarget_lock_acquire_recursive>:
 800755e:	4770      	bx	lr

08007560 <__retarget_lock_release_recursive>:
 8007560:	4770      	bx	lr
	...

08007564 <_free_r>:
 8007564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007566:	2900      	cmp	r1, #0
 8007568:	d044      	beq.n	80075f4 <_free_r+0x90>
 800756a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800756e:	9001      	str	r0, [sp, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	f1a1 0404 	sub.w	r4, r1, #4
 8007576:	bfb8      	it	lt
 8007578:	18e4      	addlt	r4, r4, r3
 800757a:	f000 f8df 	bl	800773c <__malloc_lock>
 800757e:	4a1e      	ldr	r2, [pc, #120]	; (80075f8 <_free_r+0x94>)
 8007580:	9801      	ldr	r0, [sp, #4]
 8007582:	6813      	ldr	r3, [r2, #0]
 8007584:	b933      	cbnz	r3, 8007594 <_free_r+0x30>
 8007586:	6063      	str	r3, [r4, #4]
 8007588:	6014      	str	r4, [r2, #0]
 800758a:	b003      	add	sp, #12
 800758c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007590:	f000 b8da 	b.w	8007748 <__malloc_unlock>
 8007594:	42a3      	cmp	r3, r4
 8007596:	d908      	bls.n	80075aa <_free_r+0x46>
 8007598:	6825      	ldr	r5, [r4, #0]
 800759a:	1961      	adds	r1, r4, r5
 800759c:	428b      	cmp	r3, r1
 800759e:	bf01      	itttt	eq
 80075a0:	6819      	ldreq	r1, [r3, #0]
 80075a2:	685b      	ldreq	r3, [r3, #4]
 80075a4:	1949      	addeq	r1, r1, r5
 80075a6:	6021      	streq	r1, [r4, #0]
 80075a8:	e7ed      	b.n	8007586 <_free_r+0x22>
 80075aa:	461a      	mov	r2, r3
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	b10b      	cbz	r3, 80075b4 <_free_r+0x50>
 80075b0:	42a3      	cmp	r3, r4
 80075b2:	d9fa      	bls.n	80075aa <_free_r+0x46>
 80075b4:	6811      	ldr	r1, [r2, #0]
 80075b6:	1855      	adds	r5, r2, r1
 80075b8:	42a5      	cmp	r5, r4
 80075ba:	d10b      	bne.n	80075d4 <_free_r+0x70>
 80075bc:	6824      	ldr	r4, [r4, #0]
 80075be:	4421      	add	r1, r4
 80075c0:	1854      	adds	r4, r2, r1
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	6011      	str	r1, [r2, #0]
 80075c6:	d1e0      	bne.n	800758a <_free_r+0x26>
 80075c8:	681c      	ldr	r4, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	6053      	str	r3, [r2, #4]
 80075ce:	440c      	add	r4, r1
 80075d0:	6014      	str	r4, [r2, #0]
 80075d2:	e7da      	b.n	800758a <_free_r+0x26>
 80075d4:	d902      	bls.n	80075dc <_free_r+0x78>
 80075d6:	230c      	movs	r3, #12
 80075d8:	6003      	str	r3, [r0, #0]
 80075da:	e7d6      	b.n	800758a <_free_r+0x26>
 80075dc:	6825      	ldr	r5, [r4, #0]
 80075de:	1961      	adds	r1, r4, r5
 80075e0:	428b      	cmp	r3, r1
 80075e2:	bf04      	itt	eq
 80075e4:	6819      	ldreq	r1, [r3, #0]
 80075e6:	685b      	ldreq	r3, [r3, #4]
 80075e8:	6063      	str	r3, [r4, #4]
 80075ea:	bf04      	itt	eq
 80075ec:	1949      	addeq	r1, r1, r5
 80075ee:	6021      	streq	r1, [r4, #0]
 80075f0:	6054      	str	r4, [r2, #4]
 80075f2:	e7ca      	b.n	800758a <_free_r+0x26>
 80075f4:	b003      	add	sp, #12
 80075f6:	bd30      	pop	{r4, r5, pc}
 80075f8:	200013d4 	.word	0x200013d4

080075fc <sbrk_aligned>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	4e0e      	ldr	r6, [pc, #56]	; (8007638 <sbrk_aligned+0x3c>)
 8007600:	460c      	mov	r4, r1
 8007602:	6831      	ldr	r1, [r6, #0]
 8007604:	4605      	mov	r5, r0
 8007606:	b911      	cbnz	r1, 800760e <sbrk_aligned+0x12>
 8007608:	f000 fcbc 	bl	8007f84 <_sbrk_r>
 800760c:	6030      	str	r0, [r6, #0]
 800760e:	4621      	mov	r1, r4
 8007610:	4628      	mov	r0, r5
 8007612:	f000 fcb7 	bl	8007f84 <_sbrk_r>
 8007616:	1c43      	adds	r3, r0, #1
 8007618:	d00a      	beq.n	8007630 <sbrk_aligned+0x34>
 800761a:	1cc4      	adds	r4, r0, #3
 800761c:	f024 0403 	bic.w	r4, r4, #3
 8007620:	42a0      	cmp	r0, r4
 8007622:	d007      	beq.n	8007634 <sbrk_aligned+0x38>
 8007624:	1a21      	subs	r1, r4, r0
 8007626:	4628      	mov	r0, r5
 8007628:	f000 fcac 	bl	8007f84 <_sbrk_r>
 800762c:	3001      	adds	r0, #1
 800762e:	d101      	bne.n	8007634 <sbrk_aligned+0x38>
 8007630:	f04f 34ff 	mov.w	r4, #4294967295
 8007634:	4620      	mov	r0, r4
 8007636:	bd70      	pop	{r4, r5, r6, pc}
 8007638:	200013d8 	.word	0x200013d8

0800763c <_malloc_r>:
 800763c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007640:	1ccd      	adds	r5, r1, #3
 8007642:	f025 0503 	bic.w	r5, r5, #3
 8007646:	3508      	adds	r5, #8
 8007648:	2d0c      	cmp	r5, #12
 800764a:	bf38      	it	cc
 800764c:	250c      	movcc	r5, #12
 800764e:	2d00      	cmp	r5, #0
 8007650:	4607      	mov	r7, r0
 8007652:	db01      	blt.n	8007658 <_malloc_r+0x1c>
 8007654:	42a9      	cmp	r1, r5
 8007656:	d905      	bls.n	8007664 <_malloc_r+0x28>
 8007658:	230c      	movs	r3, #12
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	2600      	movs	r6, #0
 800765e:	4630      	mov	r0, r6
 8007660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007664:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007738 <_malloc_r+0xfc>
 8007668:	f000 f868 	bl	800773c <__malloc_lock>
 800766c:	f8d8 3000 	ldr.w	r3, [r8]
 8007670:	461c      	mov	r4, r3
 8007672:	bb5c      	cbnz	r4, 80076cc <_malloc_r+0x90>
 8007674:	4629      	mov	r1, r5
 8007676:	4638      	mov	r0, r7
 8007678:	f7ff ffc0 	bl	80075fc <sbrk_aligned>
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	4604      	mov	r4, r0
 8007680:	d155      	bne.n	800772e <_malloc_r+0xf2>
 8007682:	f8d8 4000 	ldr.w	r4, [r8]
 8007686:	4626      	mov	r6, r4
 8007688:	2e00      	cmp	r6, #0
 800768a:	d145      	bne.n	8007718 <_malloc_r+0xdc>
 800768c:	2c00      	cmp	r4, #0
 800768e:	d048      	beq.n	8007722 <_malloc_r+0xe6>
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	4631      	mov	r1, r6
 8007694:	4638      	mov	r0, r7
 8007696:	eb04 0903 	add.w	r9, r4, r3
 800769a:	f000 fc73 	bl	8007f84 <_sbrk_r>
 800769e:	4581      	cmp	r9, r0
 80076a0:	d13f      	bne.n	8007722 <_malloc_r+0xe6>
 80076a2:	6821      	ldr	r1, [r4, #0]
 80076a4:	1a6d      	subs	r5, r5, r1
 80076a6:	4629      	mov	r1, r5
 80076a8:	4638      	mov	r0, r7
 80076aa:	f7ff ffa7 	bl	80075fc <sbrk_aligned>
 80076ae:	3001      	adds	r0, #1
 80076b0:	d037      	beq.n	8007722 <_malloc_r+0xe6>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	442b      	add	r3, r5
 80076b6:	6023      	str	r3, [r4, #0]
 80076b8:	f8d8 3000 	ldr.w	r3, [r8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d038      	beq.n	8007732 <_malloc_r+0xf6>
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	42a2      	cmp	r2, r4
 80076c4:	d12b      	bne.n	800771e <_malloc_r+0xe2>
 80076c6:	2200      	movs	r2, #0
 80076c8:	605a      	str	r2, [r3, #4]
 80076ca:	e00f      	b.n	80076ec <_malloc_r+0xb0>
 80076cc:	6822      	ldr	r2, [r4, #0]
 80076ce:	1b52      	subs	r2, r2, r5
 80076d0:	d41f      	bmi.n	8007712 <_malloc_r+0xd6>
 80076d2:	2a0b      	cmp	r2, #11
 80076d4:	d917      	bls.n	8007706 <_malloc_r+0xca>
 80076d6:	1961      	adds	r1, r4, r5
 80076d8:	42a3      	cmp	r3, r4
 80076da:	6025      	str	r5, [r4, #0]
 80076dc:	bf18      	it	ne
 80076de:	6059      	strne	r1, [r3, #4]
 80076e0:	6863      	ldr	r3, [r4, #4]
 80076e2:	bf08      	it	eq
 80076e4:	f8c8 1000 	streq.w	r1, [r8]
 80076e8:	5162      	str	r2, [r4, r5]
 80076ea:	604b      	str	r3, [r1, #4]
 80076ec:	4638      	mov	r0, r7
 80076ee:	f104 060b 	add.w	r6, r4, #11
 80076f2:	f000 f829 	bl	8007748 <__malloc_unlock>
 80076f6:	f026 0607 	bic.w	r6, r6, #7
 80076fa:	1d23      	adds	r3, r4, #4
 80076fc:	1af2      	subs	r2, r6, r3
 80076fe:	d0ae      	beq.n	800765e <_malloc_r+0x22>
 8007700:	1b9b      	subs	r3, r3, r6
 8007702:	50a3      	str	r3, [r4, r2]
 8007704:	e7ab      	b.n	800765e <_malloc_r+0x22>
 8007706:	42a3      	cmp	r3, r4
 8007708:	6862      	ldr	r2, [r4, #4]
 800770a:	d1dd      	bne.n	80076c8 <_malloc_r+0x8c>
 800770c:	f8c8 2000 	str.w	r2, [r8]
 8007710:	e7ec      	b.n	80076ec <_malloc_r+0xb0>
 8007712:	4623      	mov	r3, r4
 8007714:	6864      	ldr	r4, [r4, #4]
 8007716:	e7ac      	b.n	8007672 <_malloc_r+0x36>
 8007718:	4634      	mov	r4, r6
 800771a:	6876      	ldr	r6, [r6, #4]
 800771c:	e7b4      	b.n	8007688 <_malloc_r+0x4c>
 800771e:	4613      	mov	r3, r2
 8007720:	e7cc      	b.n	80076bc <_malloc_r+0x80>
 8007722:	230c      	movs	r3, #12
 8007724:	603b      	str	r3, [r7, #0]
 8007726:	4638      	mov	r0, r7
 8007728:	f000 f80e 	bl	8007748 <__malloc_unlock>
 800772c:	e797      	b.n	800765e <_malloc_r+0x22>
 800772e:	6025      	str	r5, [r4, #0]
 8007730:	e7dc      	b.n	80076ec <_malloc_r+0xb0>
 8007732:	605b      	str	r3, [r3, #4]
 8007734:	deff      	udf	#255	; 0xff
 8007736:	bf00      	nop
 8007738:	200013d4 	.word	0x200013d4

0800773c <__malloc_lock>:
 800773c:	4801      	ldr	r0, [pc, #4]	; (8007744 <__malloc_lock+0x8>)
 800773e:	f7ff bf0e 	b.w	800755e <__retarget_lock_acquire_recursive>
 8007742:	bf00      	nop
 8007744:	200013d0 	.word	0x200013d0

08007748 <__malloc_unlock>:
 8007748:	4801      	ldr	r0, [pc, #4]	; (8007750 <__malloc_unlock+0x8>)
 800774a:	f7ff bf09 	b.w	8007560 <__retarget_lock_release_recursive>
 800774e:	bf00      	nop
 8007750:	200013d0 	.word	0x200013d0

08007754 <__sfputc_r>:
 8007754:	6893      	ldr	r3, [r2, #8]
 8007756:	3b01      	subs	r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	b410      	push	{r4}
 800775c:	6093      	str	r3, [r2, #8]
 800775e:	da08      	bge.n	8007772 <__sfputc_r+0x1e>
 8007760:	6994      	ldr	r4, [r2, #24]
 8007762:	42a3      	cmp	r3, r4
 8007764:	db01      	blt.n	800776a <__sfputc_r+0x16>
 8007766:	290a      	cmp	r1, #10
 8007768:	d103      	bne.n	8007772 <__sfputc_r+0x1e>
 800776a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800776e:	f000 bb73 	b.w	8007e58 <__swbuf_r>
 8007772:	6813      	ldr	r3, [r2, #0]
 8007774:	1c58      	adds	r0, r3, #1
 8007776:	6010      	str	r0, [r2, #0]
 8007778:	7019      	strb	r1, [r3, #0]
 800777a:	4608      	mov	r0, r1
 800777c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007780:	4770      	bx	lr

08007782 <__sfputs_r>:
 8007782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007784:	4606      	mov	r6, r0
 8007786:	460f      	mov	r7, r1
 8007788:	4614      	mov	r4, r2
 800778a:	18d5      	adds	r5, r2, r3
 800778c:	42ac      	cmp	r4, r5
 800778e:	d101      	bne.n	8007794 <__sfputs_r+0x12>
 8007790:	2000      	movs	r0, #0
 8007792:	e007      	b.n	80077a4 <__sfputs_r+0x22>
 8007794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007798:	463a      	mov	r2, r7
 800779a:	4630      	mov	r0, r6
 800779c:	f7ff ffda 	bl	8007754 <__sfputc_r>
 80077a0:	1c43      	adds	r3, r0, #1
 80077a2:	d1f3      	bne.n	800778c <__sfputs_r+0xa>
 80077a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077a8 <_vfiprintf_r>:
 80077a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	460d      	mov	r5, r1
 80077ae:	b09d      	sub	sp, #116	; 0x74
 80077b0:	4614      	mov	r4, r2
 80077b2:	4698      	mov	r8, r3
 80077b4:	4606      	mov	r6, r0
 80077b6:	b118      	cbz	r0, 80077c0 <_vfiprintf_r+0x18>
 80077b8:	6a03      	ldr	r3, [r0, #32]
 80077ba:	b90b      	cbnz	r3, 80077c0 <_vfiprintf_r+0x18>
 80077bc:	f7ff fdca 	bl	8007354 <__sinit>
 80077c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077c2:	07d9      	lsls	r1, r3, #31
 80077c4:	d405      	bmi.n	80077d2 <_vfiprintf_r+0x2a>
 80077c6:	89ab      	ldrh	r3, [r5, #12]
 80077c8:	059a      	lsls	r2, r3, #22
 80077ca:	d402      	bmi.n	80077d2 <_vfiprintf_r+0x2a>
 80077cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077ce:	f7ff fec6 	bl	800755e <__retarget_lock_acquire_recursive>
 80077d2:	89ab      	ldrh	r3, [r5, #12]
 80077d4:	071b      	lsls	r3, r3, #28
 80077d6:	d501      	bpl.n	80077dc <_vfiprintf_r+0x34>
 80077d8:	692b      	ldr	r3, [r5, #16]
 80077da:	b99b      	cbnz	r3, 8007804 <_vfiprintf_r+0x5c>
 80077dc:	4629      	mov	r1, r5
 80077de:	4630      	mov	r0, r6
 80077e0:	f000 fb78 	bl	8007ed4 <__swsetup_r>
 80077e4:	b170      	cbz	r0, 8007804 <_vfiprintf_r+0x5c>
 80077e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077e8:	07dc      	lsls	r4, r3, #31
 80077ea:	d504      	bpl.n	80077f6 <_vfiprintf_r+0x4e>
 80077ec:	f04f 30ff 	mov.w	r0, #4294967295
 80077f0:	b01d      	add	sp, #116	; 0x74
 80077f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f6:	89ab      	ldrh	r3, [r5, #12]
 80077f8:	0598      	lsls	r0, r3, #22
 80077fa:	d4f7      	bmi.n	80077ec <_vfiprintf_r+0x44>
 80077fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077fe:	f7ff feaf 	bl	8007560 <__retarget_lock_release_recursive>
 8007802:	e7f3      	b.n	80077ec <_vfiprintf_r+0x44>
 8007804:	2300      	movs	r3, #0
 8007806:	9309      	str	r3, [sp, #36]	; 0x24
 8007808:	2320      	movs	r3, #32
 800780a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800780e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007812:	2330      	movs	r3, #48	; 0x30
 8007814:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80079c8 <_vfiprintf_r+0x220>
 8007818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800781c:	f04f 0901 	mov.w	r9, #1
 8007820:	4623      	mov	r3, r4
 8007822:	469a      	mov	sl, r3
 8007824:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007828:	b10a      	cbz	r2, 800782e <_vfiprintf_r+0x86>
 800782a:	2a25      	cmp	r2, #37	; 0x25
 800782c:	d1f9      	bne.n	8007822 <_vfiprintf_r+0x7a>
 800782e:	ebba 0b04 	subs.w	fp, sl, r4
 8007832:	d00b      	beq.n	800784c <_vfiprintf_r+0xa4>
 8007834:	465b      	mov	r3, fp
 8007836:	4622      	mov	r2, r4
 8007838:	4629      	mov	r1, r5
 800783a:	4630      	mov	r0, r6
 800783c:	f7ff ffa1 	bl	8007782 <__sfputs_r>
 8007840:	3001      	adds	r0, #1
 8007842:	f000 80a9 	beq.w	8007998 <_vfiprintf_r+0x1f0>
 8007846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007848:	445a      	add	r2, fp
 800784a:	9209      	str	r2, [sp, #36]	; 0x24
 800784c:	f89a 3000 	ldrb.w	r3, [sl]
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 80a1 	beq.w	8007998 <_vfiprintf_r+0x1f0>
 8007856:	2300      	movs	r3, #0
 8007858:	f04f 32ff 	mov.w	r2, #4294967295
 800785c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007860:	f10a 0a01 	add.w	sl, sl, #1
 8007864:	9304      	str	r3, [sp, #16]
 8007866:	9307      	str	r3, [sp, #28]
 8007868:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800786c:	931a      	str	r3, [sp, #104]	; 0x68
 800786e:	4654      	mov	r4, sl
 8007870:	2205      	movs	r2, #5
 8007872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007876:	4854      	ldr	r0, [pc, #336]	; (80079c8 <_vfiprintf_r+0x220>)
 8007878:	f7f8 fcaa 	bl	80001d0 <memchr>
 800787c:	9a04      	ldr	r2, [sp, #16]
 800787e:	b9d8      	cbnz	r0, 80078b8 <_vfiprintf_r+0x110>
 8007880:	06d1      	lsls	r1, r2, #27
 8007882:	bf44      	itt	mi
 8007884:	2320      	movmi	r3, #32
 8007886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800788a:	0713      	lsls	r3, r2, #28
 800788c:	bf44      	itt	mi
 800788e:	232b      	movmi	r3, #43	; 0x2b
 8007890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007894:	f89a 3000 	ldrb.w	r3, [sl]
 8007898:	2b2a      	cmp	r3, #42	; 0x2a
 800789a:	d015      	beq.n	80078c8 <_vfiprintf_r+0x120>
 800789c:	9a07      	ldr	r2, [sp, #28]
 800789e:	4654      	mov	r4, sl
 80078a0:	2000      	movs	r0, #0
 80078a2:	f04f 0c0a 	mov.w	ip, #10
 80078a6:	4621      	mov	r1, r4
 80078a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078ac:	3b30      	subs	r3, #48	; 0x30
 80078ae:	2b09      	cmp	r3, #9
 80078b0:	d94d      	bls.n	800794e <_vfiprintf_r+0x1a6>
 80078b2:	b1b0      	cbz	r0, 80078e2 <_vfiprintf_r+0x13a>
 80078b4:	9207      	str	r2, [sp, #28]
 80078b6:	e014      	b.n	80078e2 <_vfiprintf_r+0x13a>
 80078b8:	eba0 0308 	sub.w	r3, r0, r8
 80078bc:	fa09 f303 	lsl.w	r3, r9, r3
 80078c0:	4313      	orrs	r3, r2
 80078c2:	9304      	str	r3, [sp, #16]
 80078c4:	46a2      	mov	sl, r4
 80078c6:	e7d2      	b.n	800786e <_vfiprintf_r+0xc6>
 80078c8:	9b03      	ldr	r3, [sp, #12]
 80078ca:	1d19      	adds	r1, r3, #4
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	9103      	str	r1, [sp, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	bfbb      	ittet	lt
 80078d4:	425b      	neglt	r3, r3
 80078d6:	f042 0202 	orrlt.w	r2, r2, #2
 80078da:	9307      	strge	r3, [sp, #28]
 80078dc:	9307      	strlt	r3, [sp, #28]
 80078de:	bfb8      	it	lt
 80078e0:	9204      	strlt	r2, [sp, #16]
 80078e2:	7823      	ldrb	r3, [r4, #0]
 80078e4:	2b2e      	cmp	r3, #46	; 0x2e
 80078e6:	d10c      	bne.n	8007902 <_vfiprintf_r+0x15a>
 80078e8:	7863      	ldrb	r3, [r4, #1]
 80078ea:	2b2a      	cmp	r3, #42	; 0x2a
 80078ec:	d134      	bne.n	8007958 <_vfiprintf_r+0x1b0>
 80078ee:	9b03      	ldr	r3, [sp, #12]
 80078f0:	1d1a      	adds	r2, r3, #4
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	9203      	str	r2, [sp, #12]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	bfb8      	it	lt
 80078fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80078fe:	3402      	adds	r4, #2
 8007900:	9305      	str	r3, [sp, #20]
 8007902:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80079d8 <_vfiprintf_r+0x230>
 8007906:	7821      	ldrb	r1, [r4, #0]
 8007908:	2203      	movs	r2, #3
 800790a:	4650      	mov	r0, sl
 800790c:	f7f8 fc60 	bl	80001d0 <memchr>
 8007910:	b138      	cbz	r0, 8007922 <_vfiprintf_r+0x17a>
 8007912:	9b04      	ldr	r3, [sp, #16]
 8007914:	eba0 000a 	sub.w	r0, r0, sl
 8007918:	2240      	movs	r2, #64	; 0x40
 800791a:	4082      	lsls	r2, r0
 800791c:	4313      	orrs	r3, r2
 800791e:	3401      	adds	r4, #1
 8007920:	9304      	str	r3, [sp, #16]
 8007922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007926:	4829      	ldr	r0, [pc, #164]	; (80079cc <_vfiprintf_r+0x224>)
 8007928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800792c:	2206      	movs	r2, #6
 800792e:	f7f8 fc4f 	bl	80001d0 <memchr>
 8007932:	2800      	cmp	r0, #0
 8007934:	d03f      	beq.n	80079b6 <_vfiprintf_r+0x20e>
 8007936:	4b26      	ldr	r3, [pc, #152]	; (80079d0 <_vfiprintf_r+0x228>)
 8007938:	bb1b      	cbnz	r3, 8007982 <_vfiprintf_r+0x1da>
 800793a:	9b03      	ldr	r3, [sp, #12]
 800793c:	3307      	adds	r3, #7
 800793e:	f023 0307 	bic.w	r3, r3, #7
 8007942:	3308      	adds	r3, #8
 8007944:	9303      	str	r3, [sp, #12]
 8007946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007948:	443b      	add	r3, r7
 800794a:	9309      	str	r3, [sp, #36]	; 0x24
 800794c:	e768      	b.n	8007820 <_vfiprintf_r+0x78>
 800794e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007952:	460c      	mov	r4, r1
 8007954:	2001      	movs	r0, #1
 8007956:	e7a6      	b.n	80078a6 <_vfiprintf_r+0xfe>
 8007958:	2300      	movs	r3, #0
 800795a:	3401      	adds	r4, #1
 800795c:	9305      	str	r3, [sp, #20]
 800795e:	4619      	mov	r1, r3
 8007960:	f04f 0c0a 	mov.w	ip, #10
 8007964:	4620      	mov	r0, r4
 8007966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800796a:	3a30      	subs	r2, #48	; 0x30
 800796c:	2a09      	cmp	r2, #9
 800796e:	d903      	bls.n	8007978 <_vfiprintf_r+0x1d0>
 8007970:	2b00      	cmp	r3, #0
 8007972:	d0c6      	beq.n	8007902 <_vfiprintf_r+0x15a>
 8007974:	9105      	str	r1, [sp, #20]
 8007976:	e7c4      	b.n	8007902 <_vfiprintf_r+0x15a>
 8007978:	fb0c 2101 	mla	r1, ip, r1, r2
 800797c:	4604      	mov	r4, r0
 800797e:	2301      	movs	r3, #1
 8007980:	e7f0      	b.n	8007964 <_vfiprintf_r+0x1bc>
 8007982:	ab03      	add	r3, sp, #12
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	462a      	mov	r2, r5
 8007988:	4b12      	ldr	r3, [pc, #72]	; (80079d4 <_vfiprintf_r+0x22c>)
 800798a:	a904      	add	r1, sp, #16
 800798c:	4630      	mov	r0, r6
 800798e:	f3af 8000 	nop.w
 8007992:	4607      	mov	r7, r0
 8007994:	1c78      	adds	r0, r7, #1
 8007996:	d1d6      	bne.n	8007946 <_vfiprintf_r+0x19e>
 8007998:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800799a:	07d9      	lsls	r1, r3, #31
 800799c:	d405      	bmi.n	80079aa <_vfiprintf_r+0x202>
 800799e:	89ab      	ldrh	r3, [r5, #12]
 80079a0:	059a      	lsls	r2, r3, #22
 80079a2:	d402      	bmi.n	80079aa <_vfiprintf_r+0x202>
 80079a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079a6:	f7ff fddb 	bl	8007560 <__retarget_lock_release_recursive>
 80079aa:	89ab      	ldrh	r3, [r5, #12]
 80079ac:	065b      	lsls	r3, r3, #25
 80079ae:	f53f af1d 	bmi.w	80077ec <_vfiprintf_r+0x44>
 80079b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079b4:	e71c      	b.n	80077f0 <_vfiprintf_r+0x48>
 80079b6:	ab03      	add	r3, sp, #12
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	462a      	mov	r2, r5
 80079bc:	4b05      	ldr	r3, [pc, #20]	; (80079d4 <_vfiprintf_r+0x22c>)
 80079be:	a904      	add	r1, sp, #16
 80079c0:	4630      	mov	r0, r6
 80079c2:	f000 f879 	bl	8007ab8 <_printf_i>
 80079c6:	e7e4      	b.n	8007992 <_vfiprintf_r+0x1ea>
 80079c8:	080081c4 	.word	0x080081c4
 80079cc:	080081ce 	.word	0x080081ce
 80079d0:	00000000 	.word	0x00000000
 80079d4:	08007783 	.word	0x08007783
 80079d8:	080081ca 	.word	0x080081ca

080079dc <_printf_common>:
 80079dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079e0:	4616      	mov	r6, r2
 80079e2:	4699      	mov	r9, r3
 80079e4:	688a      	ldr	r2, [r1, #8]
 80079e6:	690b      	ldr	r3, [r1, #16]
 80079e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079ec:	4293      	cmp	r3, r2
 80079ee:	bfb8      	it	lt
 80079f0:	4613      	movlt	r3, r2
 80079f2:	6033      	str	r3, [r6, #0]
 80079f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079f8:	4607      	mov	r7, r0
 80079fa:	460c      	mov	r4, r1
 80079fc:	b10a      	cbz	r2, 8007a02 <_printf_common+0x26>
 80079fe:	3301      	adds	r3, #1
 8007a00:	6033      	str	r3, [r6, #0]
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	0699      	lsls	r1, r3, #26
 8007a06:	bf42      	ittt	mi
 8007a08:	6833      	ldrmi	r3, [r6, #0]
 8007a0a:	3302      	addmi	r3, #2
 8007a0c:	6033      	strmi	r3, [r6, #0]
 8007a0e:	6825      	ldr	r5, [r4, #0]
 8007a10:	f015 0506 	ands.w	r5, r5, #6
 8007a14:	d106      	bne.n	8007a24 <_printf_common+0x48>
 8007a16:	f104 0a19 	add.w	sl, r4, #25
 8007a1a:	68e3      	ldr	r3, [r4, #12]
 8007a1c:	6832      	ldr	r2, [r6, #0]
 8007a1e:	1a9b      	subs	r3, r3, r2
 8007a20:	42ab      	cmp	r3, r5
 8007a22:	dc26      	bgt.n	8007a72 <_printf_common+0x96>
 8007a24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a28:	1e13      	subs	r3, r2, #0
 8007a2a:	6822      	ldr	r2, [r4, #0]
 8007a2c:	bf18      	it	ne
 8007a2e:	2301      	movne	r3, #1
 8007a30:	0692      	lsls	r2, r2, #26
 8007a32:	d42b      	bmi.n	8007a8c <_printf_common+0xb0>
 8007a34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a38:	4649      	mov	r1, r9
 8007a3a:	4638      	mov	r0, r7
 8007a3c:	47c0      	blx	r8
 8007a3e:	3001      	adds	r0, #1
 8007a40:	d01e      	beq.n	8007a80 <_printf_common+0xa4>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	6922      	ldr	r2, [r4, #16]
 8007a46:	f003 0306 	and.w	r3, r3, #6
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	bf02      	ittt	eq
 8007a4e:	68e5      	ldreq	r5, [r4, #12]
 8007a50:	6833      	ldreq	r3, [r6, #0]
 8007a52:	1aed      	subeq	r5, r5, r3
 8007a54:	68a3      	ldr	r3, [r4, #8]
 8007a56:	bf0c      	ite	eq
 8007a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a5c:	2500      	movne	r5, #0
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	bfc4      	itt	gt
 8007a62:	1a9b      	subgt	r3, r3, r2
 8007a64:	18ed      	addgt	r5, r5, r3
 8007a66:	2600      	movs	r6, #0
 8007a68:	341a      	adds	r4, #26
 8007a6a:	42b5      	cmp	r5, r6
 8007a6c:	d11a      	bne.n	8007aa4 <_printf_common+0xc8>
 8007a6e:	2000      	movs	r0, #0
 8007a70:	e008      	b.n	8007a84 <_printf_common+0xa8>
 8007a72:	2301      	movs	r3, #1
 8007a74:	4652      	mov	r2, sl
 8007a76:	4649      	mov	r1, r9
 8007a78:	4638      	mov	r0, r7
 8007a7a:	47c0      	blx	r8
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	d103      	bne.n	8007a88 <_printf_common+0xac>
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295
 8007a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a88:	3501      	adds	r5, #1
 8007a8a:	e7c6      	b.n	8007a1a <_printf_common+0x3e>
 8007a8c:	18e1      	adds	r1, r4, r3
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	2030      	movs	r0, #48	; 0x30
 8007a92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a96:	4422      	add	r2, r4
 8007a98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007aa0:	3302      	adds	r3, #2
 8007aa2:	e7c7      	b.n	8007a34 <_printf_common+0x58>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	4622      	mov	r2, r4
 8007aa8:	4649      	mov	r1, r9
 8007aaa:	4638      	mov	r0, r7
 8007aac:	47c0      	blx	r8
 8007aae:	3001      	adds	r0, #1
 8007ab0:	d0e6      	beq.n	8007a80 <_printf_common+0xa4>
 8007ab2:	3601      	adds	r6, #1
 8007ab4:	e7d9      	b.n	8007a6a <_printf_common+0x8e>
	...

08007ab8 <_printf_i>:
 8007ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007abc:	7e0f      	ldrb	r7, [r1, #24]
 8007abe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ac0:	2f78      	cmp	r7, #120	; 0x78
 8007ac2:	4691      	mov	r9, r2
 8007ac4:	4680      	mov	r8, r0
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	469a      	mov	sl, r3
 8007aca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ace:	d807      	bhi.n	8007ae0 <_printf_i+0x28>
 8007ad0:	2f62      	cmp	r7, #98	; 0x62
 8007ad2:	d80a      	bhi.n	8007aea <_printf_i+0x32>
 8007ad4:	2f00      	cmp	r7, #0
 8007ad6:	f000 80d4 	beq.w	8007c82 <_printf_i+0x1ca>
 8007ada:	2f58      	cmp	r7, #88	; 0x58
 8007adc:	f000 80c0 	beq.w	8007c60 <_printf_i+0x1a8>
 8007ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ae8:	e03a      	b.n	8007b60 <_printf_i+0xa8>
 8007aea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007aee:	2b15      	cmp	r3, #21
 8007af0:	d8f6      	bhi.n	8007ae0 <_printf_i+0x28>
 8007af2:	a101      	add	r1, pc, #4	; (adr r1, 8007af8 <_printf_i+0x40>)
 8007af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007af8:	08007b51 	.word	0x08007b51
 8007afc:	08007b65 	.word	0x08007b65
 8007b00:	08007ae1 	.word	0x08007ae1
 8007b04:	08007ae1 	.word	0x08007ae1
 8007b08:	08007ae1 	.word	0x08007ae1
 8007b0c:	08007ae1 	.word	0x08007ae1
 8007b10:	08007b65 	.word	0x08007b65
 8007b14:	08007ae1 	.word	0x08007ae1
 8007b18:	08007ae1 	.word	0x08007ae1
 8007b1c:	08007ae1 	.word	0x08007ae1
 8007b20:	08007ae1 	.word	0x08007ae1
 8007b24:	08007c69 	.word	0x08007c69
 8007b28:	08007b91 	.word	0x08007b91
 8007b2c:	08007c23 	.word	0x08007c23
 8007b30:	08007ae1 	.word	0x08007ae1
 8007b34:	08007ae1 	.word	0x08007ae1
 8007b38:	08007c8b 	.word	0x08007c8b
 8007b3c:	08007ae1 	.word	0x08007ae1
 8007b40:	08007b91 	.word	0x08007b91
 8007b44:	08007ae1 	.word	0x08007ae1
 8007b48:	08007ae1 	.word	0x08007ae1
 8007b4c:	08007c2b 	.word	0x08007c2b
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	1d1a      	adds	r2, r3, #4
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	602a      	str	r2, [r5, #0]
 8007b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b60:	2301      	movs	r3, #1
 8007b62:	e09f      	b.n	8007ca4 <_printf_i+0x1ec>
 8007b64:	6820      	ldr	r0, [r4, #0]
 8007b66:	682b      	ldr	r3, [r5, #0]
 8007b68:	0607      	lsls	r7, r0, #24
 8007b6a:	f103 0104 	add.w	r1, r3, #4
 8007b6e:	6029      	str	r1, [r5, #0]
 8007b70:	d501      	bpl.n	8007b76 <_printf_i+0xbe>
 8007b72:	681e      	ldr	r6, [r3, #0]
 8007b74:	e003      	b.n	8007b7e <_printf_i+0xc6>
 8007b76:	0646      	lsls	r6, r0, #25
 8007b78:	d5fb      	bpl.n	8007b72 <_printf_i+0xba>
 8007b7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b7e:	2e00      	cmp	r6, #0
 8007b80:	da03      	bge.n	8007b8a <_printf_i+0xd2>
 8007b82:	232d      	movs	r3, #45	; 0x2d
 8007b84:	4276      	negs	r6, r6
 8007b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b8a:	485a      	ldr	r0, [pc, #360]	; (8007cf4 <_printf_i+0x23c>)
 8007b8c:	230a      	movs	r3, #10
 8007b8e:	e012      	b.n	8007bb6 <_printf_i+0xfe>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	6820      	ldr	r0, [r4, #0]
 8007b94:	1d19      	adds	r1, r3, #4
 8007b96:	6029      	str	r1, [r5, #0]
 8007b98:	0605      	lsls	r5, r0, #24
 8007b9a:	d501      	bpl.n	8007ba0 <_printf_i+0xe8>
 8007b9c:	681e      	ldr	r6, [r3, #0]
 8007b9e:	e002      	b.n	8007ba6 <_printf_i+0xee>
 8007ba0:	0641      	lsls	r1, r0, #25
 8007ba2:	d5fb      	bpl.n	8007b9c <_printf_i+0xe4>
 8007ba4:	881e      	ldrh	r6, [r3, #0]
 8007ba6:	4853      	ldr	r0, [pc, #332]	; (8007cf4 <_printf_i+0x23c>)
 8007ba8:	2f6f      	cmp	r7, #111	; 0x6f
 8007baa:	bf0c      	ite	eq
 8007bac:	2308      	moveq	r3, #8
 8007bae:	230a      	movne	r3, #10
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bb6:	6865      	ldr	r5, [r4, #4]
 8007bb8:	60a5      	str	r5, [r4, #8]
 8007bba:	2d00      	cmp	r5, #0
 8007bbc:	bfa2      	ittt	ge
 8007bbe:	6821      	ldrge	r1, [r4, #0]
 8007bc0:	f021 0104 	bicge.w	r1, r1, #4
 8007bc4:	6021      	strge	r1, [r4, #0]
 8007bc6:	b90e      	cbnz	r6, 8007bcc <_printf_i+0x114>
 8007bc8:	2d00      	cmp	r5, #0
 8007bca:	d04b      	beq.n	8007c64 <_printf_i+0x1ac>
 8007bcc:	4615      	mov	r5, r2
 8007bce:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bd2:	fb03 6711 	mls	r7, r3, r1, r6
 8007bd6:	5dc7      	ldrb	r7, [r0, r7]
 8007bd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bdc:	4637      	mov	r7, r6
 8007bde:	42bb      	cmp	r3, r7
 8007be0:	460e      	mov	r6, r1
 8007be2:	d9f4      	bls.n	8007bce <_printf_i+0x116>
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	d10b      	bne.n	8007c00 <_printf_i+0x148>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	07de      	lsls	r6, r3, #31
 8007bec:	d508      	bpl.n	8007c00 <_printf_i+0x148>
 8007bee:	6923      	ldr	r3, [r4, #16]
 8007bf0:	6861      	ldr	r1, [r4, #4]
 8007bf2:	4299      	cmp	r1, r3
 8007bf4:	bfde      	ittt	le
 8007bf6:	2330      	movle	r3, #48	; 0x30
 8007bf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c00:	1b52      	subs	r2, r2, r5
 8007c02:	6122      	str	r2, [r4, #16]
 8007c04:	f8cd a000 	str.w	sl, [sp]
 8007c08:	464b      	mov	r3, r9
 8007c0a:	aa03      	add	r2, sp, #12
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	4640      	mov	r0, r8
 8007c10:	f7ff fee4 	bl	80079dc <_printf_common>
 8007c14:	3001      	adds	r0, #1
 8007c16:	d14a      	bne.n	8007cae <_printf_i+0x1f6>
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1c:	b004      	add	sp, #16
 8007c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	f043 0320 	orr.w	r3, r3, #32
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	4833      	ldr	r0, [pc, #204]	; (8007cf8 <_printf_i+0x240>)
 8007c2c:	2778      	movs	r7, #120	; 0x78
 8007c2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	6829      	ldr	r1, [r5, #0]
 8007c36:	061f      	lsls	r7, r3, #24
 8007c38:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c3c:	d402      	bmi.n	8007c44 <_printf_i+0x18c>
 8007c3e:	065f      	lsls	r7, r3, #25
 8007c40:	bf48      	it	mi
 8007c42:	b2b6      	uxthmi	r6, r6
 8007c44:	07df      	lsls	r7, r3, #31
 8007c46:	bf48      	it	mi
 8007c48:	f043 0320 	orrmi.w	r3, r3, #32
 8007c4c:	6029      	str	r1, [r5, #0]
 8007c4e:	bf48      	it	mi
 8007c50:	6023      	strmi	r3, [r4, #0]
 8007c52:	b91e      	cbnz	r6, 8007c5c <_printf_i+0x1a4>
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	f023 0320 	bic.w	r3, r3, #32
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	2310      	movs	r3, #16
 8007c5e:	e7a7      	b.n	8007bb0 <_printf_i+0xf8>
 8007c60:	4824      	ldr	r0, [pc, #144]	; (8007cf4 <_printf_i+0x23c>)
 8007c62:	e7e4      	b.n	8007c2e <_printf_i+0x176>
 8007c64:	4615      	mov	r5, r2
 8007c66:	e7bd      	b.n	8007be4 <_printf_i+0x12c>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	6826      	ldr	r6, [r4, #0]
 8007c6c:	6961      	ldr	r1, [r4, #20]
 8007c6e:	1d18      	adds	r0, r3, #4
 8007c70:	6028      	str	r0, [r5, #0]
 8007c72:	0635      	lsls	r5, r6, #24
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	d501      	bpl.n	8007c7c <_printf_i+0x1c4>
 8007c78:	6019      	str	r1, [r3, #0]
 8007c7a:	e002      	b.n	8007c82 <_printf_i+0x1ca>
 8007c7c:	0670      	lsls	r0, r6, #25
 8007c7e:	d5fb      	bpl.n	8007c78 <_printf_i+0x1c0>
 8007c80:	8019      	strh	r1, [r3, #0]
 8007c82:	2300      	movs	r3, #0
 8007c84:	6123      	str	r3, [r4, #16]
 8007c86:	4615      	mov	r5, r2
 8007c88:	e7bc      	b.n	8007c04 <_printf_i+0x14c>
 8007c8a:	682b      	ldr	r3, [r5, #0]
 8007c8c:	1d1a      	adds	r2, r3, #4
 8007c8e:	602a      	str	r2, [r5, #0]
 8007c90:	681d      	ldr	r5, [r3, #0]
 8007c92:	6862      	ldr	r2, [r4, #4]
 8007c94:	2100      	movs	r1, #0
 8007c96:	4628      	mov	r0, r5
 8007c98:	f7f8 fa9a 	bl	80001d0 <memchr>
 8007c9c:	b108      	cbz	r0, 8007ca2 <_printf_i+0x1ea>
 8007c9e:	1b40      	subs	r0, r0, r5
 8007ca0:	6060      	str	r0, [r4, #4]
 8007ca2:	6863      	ldr	r3, [r4, #4]
 8007ca4:	6123      	str	r3, [r4, #16]
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cac:	e7aa      	b.n	8007c04 <_printf_i+0x14c>
 8007cae:	6923      	ldr	r3, [r4, #16]
 8007cb0:	462a      	mov	r2, r5
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	47d0      	blx	sl
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d0ad      	beq.n	8007c18 <_printf_i+0x160>
 8007cbc:	6823      	ldr	r3, [r4, #0]
 8007cbe:	079b      	lsls	r3, r3, #30
 8007cc0:	d413      	bmi.n	8007cea <_printf_i+0x232>
 8007cc2:	68e0      	ldr	r0, [r4, #12]
 8007cc4:	9b03      	ldr	r3, [sp, #12]
 8007cc6:	4298      	cmp	r0, r3
 8007cc8:	bfb8      	it	lt
 8007cca:	4618      	movlt	r0, r3
 8007ccc:	e7a6      	b.n	8007c1c <_printf_i+0x164>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	4632      	mov	r2, r6
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	4640      	mov	r0, r8
 8007cd6:	47d0      	blx	sl
 8007cd8:	3001      	adds	r0, #1
 8007cda:	d09d      	beq.n	8007c18 <_printf_i+0x160>
 8007cdc:	3501      	adds	r5, #1
 8007cde:	68e3      	ldr	r3, [r4, #12]
 8007ce0:	9903      	ldr	r1, [sp, #12]
 8007ce2:	1a5b      	subs	r3, r3, r1
 8007ce4:	42ab      	cmp	r3, r5
 8007ce6:	dcf2      	bgt.n	8007cce <_printf_i+0x216>
 8007ce8:	e7eb      	b.n	8007cc2 <_printf_i+0x20a>
 8007cea:	2500      	movs	r5, #0
 8007cec:	f104 0619 	add.w	r6, r4, #25
 8007cf0:	e7f5      	b.n	8007cde <_printf_i+0x226>
 8007cf2:	bf00      	nop
 8007cf4:	080081d5 	.word	0x080081d5
 8007cf8:	080081e6 	.word	0x080081e6

08007cfc <__sflush_r>:
 8007cfc:	898a      	ldrh	r2, [r1, #12]
 8007cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d02:	4605      	mov	r5, r0
 8007d04:	0710      	lsls	r0, r2, #28
 8007d06:	460c      	mov	r4, r1
 8007d08:	d458      	bmi.n	8007dbc <__sflush_r+0xc0>
 8007d0a:	684b      	ldr	r3, [r1, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dc05      	bgt.n	8007d1c <__sflush_r+0x20>
 8007d10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	dc02      	bgt.n	8007d1c <__sflush_r+0x20>
 8007d16:	2000      	movs	r0, #0
 8007d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d1e:	2e00      	cmp	r6, #0
 8007d20:	d0f9      	beq.n	8007d16 <__sflush_r+0x1a>
 8007d22:	2300      	movs	r3, #0
 8007d24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d28:	682f      	ldr	r7, [r5, #0]
 8007d2a:	6a21      	ldr	r1, [r4, #32]
 8007d2c:	602b      	str	r3, [r5, #0]
 8007d2e:	d032      	beq.n	8007d96 <__sflush_r+0x9a>
 8007d30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	075a      	lsls	r2, r3, #29
 8007d36:	d505      	bpl.n	8007d44 <__sflush_r+0x48>
 8007d38:	6863      	ldr	r3, [r4, #4]
 8007d3a:	1ac0      	subs	r0, r0, r3
 8007d3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d3e:	b10b      	cbz	r3, 8007d44 <__sflush_r+0x48>
 8007d40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d42:	1ac0      	subs	r0, r0, r3
 8007d44:	2300      	movs	r3, #0
 8007d46:	4602      	mov	r2, r0
 8007d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d4a:	6a21      	ldr	r1, [r4, #32]
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	47b0      	blx	r6
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	d106      	bne.n	8007d64 <__sflush_r+0x68>
 8007d56:	6829      	ldr	r1, [r5, #0]
 8007d58:	291d      	cmp	r1, #29
 8007d5a:	d82b      	bhi.n	8007db4 <__sflush_r+0xb8>
 8007d5c:	4a29      	ldr	r2, [pc, #164]	; (8007e04 <__sflush_r+0x108>)
 8007d5e:	410a      	asrs	r2, r1
 8007d60:	07d6      	lsls	r6, r2, #31
 8007d62:	d427      	bmi.n	8007db4 <__sflush_r+0xb8>
 8007d64:	2200      	movs	r2, #0
 8007d66:	6062      	str	r2, [r4, #4]
 8007d68:	04d9      	lsls	r1, r3, #19
 8007d6a:	6922      	ldr	r2, [r4, #16]
 8007d6c:	6022      	str	r2, [r4, #0]
 8007d6e:	d504      	bpl.n	8007d7a <__sflush_r+0x7e>
 8007d70:	1c42      	adds	r2, r0, #1
 8007d72:	d101      	bne.n	8007d78 <__sflush_r+0x7c>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b903      	cbnz	r3, 8007d7a <__sflush_r+0x7e>
 8007d78:	6560      	str	r0, [r4, #84]	; 0x54
 8007d7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d7c:	602f      	str	r7, [r5, #0]
 8007d7e:	2900      	cmp	r1, #0
 8007d80:	d0c9      	beq.n	8007d16 <__sflush_r+0x1a>
 8007d82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d86:	4299      	cmp	r1, r3
 8007d88:	d002      	beq.n	8007d90 <__sflush_r+0x94>
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f7ff fbea 	bl	8007564 <_free_r>
 8007d90:	2000      	movs	r0, #0
 8007d92:	6360      	str	r0, [r4, #52]	; 0x34
 8007d94:	e7c0      	b.n	8007d18 <__sflush_r+0x1c>
 8007d96:	2301      	movs	r3, #1
 8007d98:	4628      	mov	r0, r5
 8007d9a:	47b0      	blx	r6
 8007d9c:	1c41      	adds	r1, r0, #1
 8007d9e:	d1c8      	bne.n	8007d32 <__sflush_r+0x36>
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0c5      	beq.n	8007d32 <__sflush_r+0x36>
 8007da6:	2b1d      	cmp	r3, #29
 8007da8:	d001      	beq.n	8007dae <__sflush_r+0xb2>
 8007daa:	2b16      	cmp	r3, #22
 8007dac:	d101      	bne.n	8007db2 <__sflush_r+0xb6>
 8007dae:	602f      	str	r7, [r5, #0]
 8007db0:	e7b1      	b.n	8007d16 <__sflush_r+0x1a>
 8007db2:	89a3      	ldrh	r3, [r4, #12]
 8007db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007db8:	81a3      	strh	r3, [r4, #12]
 8007dba:	e7ad      	b.n	8007d18 <__sflush_r+0x1c>
 8007dbc:	690f      	ldr	r7, [r1, #16]
 8007dbe:	2f00      	cmp	r7, #0
 8007dc0:	d0a9      	beq.n	8007d16 <__sflush_r+0x1a>
 8007dc2:	0793      	lsls	r3, r2, #30
 8007dc4:	680e      	ldr	r6, [r1, #0]
 8007dc6:	bf08      	it	eq
 8007dc8:	694b      	ldreq	r3, [r1, #20]
 8007dca:	600f      	str	r7, [r1, #0]
 8007dcc:	bf18      	it	ne
 8007dce:	2300      	movne	r3, #0
 8007dd0:	eba6 0807 	sub.w	r8, r6, r7
 8007dd4:	608b      	str	r3, [r1, #8]
 8007dd6:	f1b8 0f00 	cmp.w	r8, #0
 8007dda:	dd9c      	ble.n	8007d16 <__sflush_r+0x1a>
 8007ddc:	6a21      	ldr	r1, [r4, #32]
 8007dde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007de0:	4643      	mov	r3, r8
 8007de2:	463a      	mov	r2, r7
 8007de4:	4628      	mov	r0, r5
 8007de6:	47b0      	blx	r6
 8007de8:	2800      	cmp	r0, #0
 8007dea:	dc06      	bgt.n	8007dfa <__sflush_r+0xfe>
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df2:	81a3      	strh	r3, [r4, #12]
 8007df4:	f04f 30ff 	mov.w	r0, #4294967295
 8007df8:	e78e      	b.n	8007d18 <__sflush_r+0x1c>
 8007dfa:	4407      	add	r7, r0
 8007dfc:	eba8 0800 	sub.w	r8, r8, r0
 8007e00:	e7e9      	b.n	8007dd6 <__sflush_r+0xda>
 8007e02:	bf00      	nop
 8007e04:	dfbffffe 	.word	0xdfbffffe

08007e08 <_fflush_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	690b      	ldr	r3, [r1, #16]
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	b913      	cbnz	r3, 8007e18 <_fflush_r+0x10>
 8007e12:	2500      	movs	r5, #0
 8007e14:	4628      	mov	r0, r5
 8007e16:	bd38      	pop	{r3, r4, r5, pc}
 8007e18:	b118      	cbz	r0, 8007e22 <_fflush_r+0x1a>
 8007e1a:	6a03      	ldr	r3, [r0, #32]
 8007e1c:	b90b      	cbnz	r3, 8007e22 <_fflush_r+0x1a>
 8007e1e:	f7ff fa99 	bl	8007354 <__sinit>
 8007e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0f3      	beq.n	8007e12 <_fflush_r+0xa>
 8007e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e2c:	07d0      	lsls	r0, r2, #31
 8007e2e:	d404      	bmi.n	8007e3a <_fflush_r+0x32>
 8007e30:	0599      	lsls	r1, r3, #22
 8007e32:	d402      	bmi.n	8007e3a <_fflush_r+0x32>
 8007e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e36:	f7ff fb92 	bl	800755e <__retarget_lock_acquire_recursive>
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	f7ff ff5d 	bl	8007cfc <__sflush_r>
 8007e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e44:	07da      	lsls	r2, r3, #31
 8007e46:	4605      	mov	r5, r0
 8007e48:	d4e4      	bmi.n	8007e14 <_fflush_r+0xc>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	059b      	lsls	r3, r3, #22
 8007e4e:	d4e1      	bmi.n	8007e14 <_fflush_r+0xc>
 8007e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e52:	f7ff fb85 	bl	8007560 <__retarget_lock_release_recursive>
 8007e56:	e7dd      	b.n	8007e14 <_fflush_r+0xc>

08007e58 <__swbuf_r>:
 8007e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5a:	460e      	mov	r6, r1
 8007e5c:	4614      	mov	r4, r2
 8007e5e:	4605      	mov	r5, r0
 8007e60:	b118      	cbz	r0, 8007e6a <__swbuf_r+0x12>
 8007e62:	6a03      	ldr	r3, [r0, #32]
 8007e64:	b90b      	cbnz	r3, 8007e6a <__swbuf_r+0x12>
 8007e66:	f7ff fa75 	bl	8007354 <__sinit>
 8007e6a:	69a3      	ldr	r3, [r4, #24]
 8007e6c:	60a3      	str	r3, [r4, #8]
 8007e6e:	89a3      	ldrh	r3, [r4, #12]
 8007e70:	071a      	lsls	r2, r3, #28
 8007e72:	d525      	bpl.n	8007ec0 <__swbuf_r+0x68>
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	b31b      	cbz	r3, 8007ec0 <__swbuf_r+0x68>
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	6922      	ldr	r2, [r4, #16]
 8007e7c:	1a98      	subs	r0, r3, r2
 8007e7e:	6963      	ldr	r3, [r4, #20]
 8007e80:	b2f6      	uxtb	r6, r6
 8007e82:	4283      	cmp	r3, r0
 8007e84:	4637      	mov	r7, r6
 8007e86:	dc04      	bgt.n	8007e92 <__swbuf_r+0x3a>
 8007e88:	4621      	mov	r1, r4
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f7ff ffbc 	bl	8007e08 <_fflush_r>
 8007e90:	b9e0      	cbnz	r0, 8007ecc <__swbuf_r+0x74>
 8007e92:	68a3      	ldr	r3, [r4, #8]
 8007e94:	3b01      	subs	r3, #1
 8007e96:	60a3      	str	r3, [r4, #8]
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	1c5a      	adds	r2, r3, #1
 8007e9c:	6022      	str	r2, [r4, #0]
 8007e9e:	701e      	strb	r6, [r3, #0]
 8007ea0:	6962      	ldr	r2, [r4, #20]
 8007ea2:	1c43      	adds	r3, r0, #1
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d004      	beq.n	8007eb2 <__swbuf_r+0x5a>
 8007ea8:	89a3      	ldrh	r3, [r4, #12]
 8007eaa:	07db      	lsls	r3, r3, #31
 8007eac:	d506      	bpl.n	8007ebc <__swbuf_r+0x64>
 8007eae:	2e0a      	cmp	r6, #10
 8007eb0:	d104      	bne.n	8007ebc <__swbuf_r+0x64>
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	f7ff ffa7 	bl	8007e08 <_fflush_r>
 8007eba:	b938      	cbnz	r0, 8007ecc <__swbuf_r+0x74>
 8007ebc:	4638      	mov	r0, r7
 8007ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f000 f806 	bl	8007ed4 <__swsetup_r>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d0d5      	beq.n	8007e78 <__swbuf_r+0x20>
 8007ecc:	f04f 37ff 	mov.w	r7, #4294967295
 8007ed0:	e7f4      	b.n	8007ebc <__swbuf_r+0x64>
	...

08007ed4 <__swsetup_r>:
 8007ed4:	b538      	push	{r3, r4, r5, lr}
 8007ed6:	4b2a      	ldr	r3, [pc, #168]	; (8007f80 <__swsetup_r+0xac>)
 8007ed8:	4605      	mov	r5, r0
 8007eda:	6818      	ldr	r0, [r3, #0]
 8007edc:	460c      	mov	r4, r1
 8007ede:	b118      	cbz	r0, 8007ee8 <__swsetup_r+0x14>
 8007ee0:	6a03      	ldr	r3, [r0, #32]
 8007ee2:	b90b      	cbnz	r3, 8007ee8 <__swsetup_r+0x14>
 8007ee4:	f7ff fa36 	bl	8007354 <__sinit>
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007eee:	0718      	lsls	r0, r3, #28
 8007ef0:	d422      	bmi.n	8007f38 <__swsetup_r+0x64>
 8007ef2:	06d9      	lsls	r1, r3, #27
 8007ef4:	d407      	bmi.n	8007f06 <__swsetup_r+0x32>
 8007ef6:	2309      	movs	r3, #9
 8007ef8:	602b      	str	r3, [r5, #0]
 8007efa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007efe:	81a3      	strh	r3, [r4, #12]
 8007f00:	f04f 30ff 	mov.w	r0, #4294967295
 8007f04:	e034      	b.n	8007f70 <__swsetup_r+0x9c>
 8007f06:	0758      	lsls	r0, r3, #29
 8007f08:	d512      	bpl.n	8007f30 <__swsetup_r+0x5c>
 8007f0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f0c:	b141      	cbz	r1, 8007f20 <__swsetup_r+0x4c>
 8007f0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f12:	4299      	cmp	r1, r3
 8007f14:	d002      	beq.n	8007f1c <__swsetup_r+0x48>
 8007f16:	4628      	mov	r0, r5
 8007f18:	f7ff fb24 	bl	8007564 <_free_r>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	6363      	str	r3, [r4, #52]	; 0x34
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f26:	81a3      	strh	r3, [r4, #12]
 8007f28:	2300      	movs	r3, #0
 8007f2a:	6063      	str	r3, [r4, #4]
 8007f2c:	6923      	ldr	r3, [r4, #16]
 8007f2e:	6023      	str	r3, [r4, #0]
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	f043 0308 	orr.w	r3, r3, #8
 8007f36:	81a3      	strh	r3, [r4, #12]
 8007f38:	6923      	ldr	r3, [r4, #16]
 8007f3a:	b94b      	cbnz	r3, 8007f50 <__swsetup_r+0x7c>
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f46:	d003      	beq.n	8007f50 <__swsetup_r+0x7c>
 8007f48:	4621      	mov	r1, r4
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f000 f850 	bl	8007ff0 <__smakebuf_r>
 8007f50:	89a0      	ldrh	r0, [r4, #12]
 8007f52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f56:	f010 0301 	ands.w	r3, r0, #1
 8007f5a:	d00a      	beq.n	8007f72 <__swsetup_r+0x9e>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60a3      	str	r3, [r4, #8]
 8007f60:	6963      	ldr	r3, [r4, #20]
 8007f62:	425b      	negs	r3, r3
 8007f64:	61a3      	str	r3, [r4, #24]
 8007f66:	6923      	ldr	r3, [r4, #16]
 8007f68:	b943      	cbnz	r3, 8007f7c <__swsetup_r+0xa8>
 8007f6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f6e:	d1c4      	bne.n	8007efa <__swsetup_r+0x26>
 8007f70:	bd38      	pop	{r3, r4, r5, pc}
 8007f72:	0781      	lsls	r1, r0, #30
 8007f74:	bf58      	it	pl
 8007f76:	6963      	ldrpl	r3, [r4, #20]
 8007f78:	60a3      	str	r3, [r4, #8]
 8007f7a:	e7f4      	b.n	8007f66 <__swsetup_r+0x92>
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	e7f7      	b.n	8007f70 <__swsetup_r+0x9c>
 8007f80:	20000098 	.word	0x20000098

08007f84 <_sbrk_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d06      	ldr	r5, [pc, #24]	; (8007fa0 <_sbrk_r+0x1c>)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	602b      	str	r3, [r5, #0]
 8007f90:	f7f9 ff84 	bl	8001e9c <_sbrk>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d102      	bne.n	8007f9e <_sbrk_r+0x1a>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	b103      	cbz	r3, 8007f9e <_sbrk_r+0x1a>
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
 8007fa0:	200013cc 	.word	0x200013cc

08007fa4 <__swhatbuf_r>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fac:	2900      	cmp	r1, #0
 8007fae:	b096      	sub	sp, #88	; 0x58
 8007fb0:	4615      	mov	r5, r2
 8007fb2:	461e      	mov	r6, r3
 8007fb4:	da0d      	bge.n	8007fd2 <__swhatbuf_r+0x2e>
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007fbc:	f04f 0100 	mov.w	r1, #0
 8007fc0:	bf0c      	ite	eq
 8007fc2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007fc6:	2340      	movne	r3, #64	; 0x40
 8007fc8:	2000      	movs	r0, #0
 8007fca:	6031      	str	r1, [r6, #0]
 8007fcc:	602b      	str	r3, [r5, #0]
 8007fce:	b016      	add	sp, #88	; 0x58
 8007fd0:	bd70      	pop	{r4, r5, r6, pc}
 8007fd2:	466a      	mov	r2, sp
 8007fd4:	f000 f848 	bl	8008068 <_fstat_r>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	dbec      	blt.n	8007fb6 <__swhatbuf_r+0x12>
 8007fdc:	9901      	ldr	r1, [sp, #4]
 8007fde:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007fe2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007fe6:	4259      	negs	r1, r3
 8007fe8:	4159      	adcs	r1, r3
 8007fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fee:	e7eb      	b.n	8007fc8 <__swhatbuf_r+0x24>

08007ff0 <__smakebuf_r>:
 8007ff0:	898b      	ldrh	r3, [r1, #12]
 8007ff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ff4:	079d      	lsls	r5, r3, #30
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	d507      	bpl.n	800800c <__smakebuf_r+0x1c>
 8007ffc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	6123      	str	r3, [r4, #16]
 8008004:	2301      	movs	r3, #1
 8008006:	6163      	str	r3, [r4, #20]
 8008008:	b002      	add	sp, #8
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	ab01      	add	r3, sp, #4
 800800e:	466a      	mov	r2, sp
 8008010:	f7ff ffc8 	bl	8007fa4 <__swhatbuf_r>
 8008014:	9900      	ldr	r1, [sp, #0]
 8008016:	4605      	mov	r5, r0
 8008018:	4630      	mov	r0, r6
 800801a:	f7ff fb0f 	bl	800763c <_malloc_r>
 800801e:	b948      	cbnz	r0, 8008034 <__smakebuf_r+0x44>
 8008020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008024:	059a      	lsls	r2, r3, #22
 8008026:	d4ef      	bmi.n	8008008 <__smakebuf_r+0x18>
 8008028:	f023 0303 	bic.w	r3, r3, #3
 800802c:	f043 0302 	orr.w	r3, r3, #2
 8008030:	81a3      	strh	r3, [r4, #12]
 8008032:	e7e3      	b.n	8007ffc <__smakebuf_r+0xc>
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	6020      	str	r0, [r4, #0]
 8008038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803c:	81a3      	strh	r3, [r4, #12]
 800803e:	9b00      	ldr	r3, [sp, #0]
 8008040:	6163      	str	r3, [r4, #20]
 8008042:	9b01      	ldr	r3, [sp, #4]
 8008044:	6120      	str	r0, [r4, #16]
 8008046:	b15b      	cbz	r3, 8008060 <__smakebuf_r+0x70>
 8008048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800804c:	4630      	mov	r0, r6
 800804e:	f000 f81d 	bl	800808c <_isatty_r>
 8008052:	b128      	cbz	r0, 8008060 <__smakebuf_r+0x70>
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	f023 0303 	bic.w	r3, r3, #3
 800805a:	f043 0301 	orr.w	r3, r3, #1
 800805e:	81a3      	strh	r3, [r4, #12]
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	431d      	orrs	r5, r3
 8008064:	81a5      	strh	r5, [r4, #12]
 8008066:	e7cf      	b.n	8008008 <__smakebuf_r+0x18>

08008068 <_fstat_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4d07      	ldr	r5, [pc, #28]	; (8008088 <_fstat_r+0x20>)
 800806c:	2300      	movs	r3, #0
 800806e:	4604      	mov	r4, r0
 8008070:	4608      	mov	r0, r1
 8008072:	4611      	mov	r1, r2
 8008074:	602b      	str	r3, [r5, #0]
 8008076:	f7f9 fee8 	bl	8001e4a <_fstat>
 800807a:	1c43      	adds	r3, r0, #1
 800807c:	d102      	bne.n	8008084 <_fstat_r+0x1c>
 800807e:	682b      	ldr	r3, [r5, #0]
 8008080:	b103      	cbz	r3, 8008084 <_fstat_r+0x1c>
 8008082:	6023      	str	r3, [r4, #0]
 8008084:	bd38      	pop	{r3, r4, r5, pc}
 8008086:	bf00      	nop
 8008088:	200013cc 	.word	0x200013cc

0800808c <_isatty_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	4d06      	ldr	r5, [pc, #24]	; (80080a8 <_isatty_r+0x1c>)
 8008090:	2300      	movs	r3, #0
 8008092:	4604      	mov	r4, r0
 8008094:	4608      	mov	r0, r1
 8008096:	602b      	str	r3, [r5, #0]
 8008098:	f7f9 fee7 	bl	8001e6a <_isatty>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_isatty_r+0x1a>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_isatty_r+0x1a>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	200013cc 	.word	0x200013cc

080080ac <_init>:
 80080ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ae:	bf00      	nop
 80080b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080b2:	bc08      	pop	{r3}
 80080b4:	469e      	mov	lr, r3
 80080b6:	4770      	bx	lr

080080b8 <_fini>:
 80080b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ba:	bf00      	nop
 80080bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080be:	bc08      	pop	{r3}
 80080c0:	469e      	mov	lr, r3
 80080c2:	4770      	bx	lr
