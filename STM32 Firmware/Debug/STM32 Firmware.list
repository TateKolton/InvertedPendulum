
STM32 Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800cf00  0800cf00  0001cf00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d388  0800d388  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800d388  0800d388  0001d388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d390  0800d390  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d390  0800d390  0001d390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d394  0800d394  0001d394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800d398  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000145c  20000208  0800d5a0  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001664  0800d5a0  00021664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019423  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b72  00000000  00000000  0003969e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  0003d210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011be  00000000  00000000  0003e8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029ad6  00000000  00000000  0003fab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a144  00000000  00000000  0006958c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fda43  00000000  00000000  000836d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007348  00000000  00000000  00181114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ab  00000000  00000000  0018845c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cee4 	.word	0x0800cee4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800cee4 	.word	0x0800cee4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <Controller_Init>:
 *********************************************************************************/

#include <PID_control.h>

// Initialize controller structure
void Controller_Init(PID_Controller* controller, double* input, double* output, double* setpoint, double kp, double ki, double kd, int sampleTime) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6278      	str	r0, [r7, #36]	; 0x24
 8000eac:	6239      	str	r1, [r7, #32]
 8000eae:	61fa      	str	r2, [r7, #28]
 8000eb0:	61bb      	str	r3, [r7, #24]
 8000eb2:	ed87 0b04 	vstr	d0, [r7, #16]
 8000eb6:	ed87 1b02 	vstr	d1, [r7, #8]
 8000eba:	ed87 2b00 	vstr	d2, [r7]

	if (kp<0 || ki<0 || kd<0) return;
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	f04f 0300 	mov.w	r3, #0
 8000ec6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000eca:	f7ff fe07 	bl	8000adc <__aeabi_dcmplt>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d161      	bne.n	8000f98 <Controller_Init+0xf4>
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ee0:	f7ff fdfc 	bl	8000adc <__aeabi_dcmplt>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d156      	bne.n	8000f98 <Controller_Init+0xf4>
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ef6:	f7ff fdf1 	bl	8000adc <__aeabi_dcmplt>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d14b      	bne.n	8000f98 <Controller_Init+0xf4>

	double sampleTimeSec = sampleTime/1000.0;
 8000f00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000f02:	f7ff fb0f 	bl	8000524 <__aeabi_i2d>
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <Controller_Init+0xfc>)
 8000f0c:	f7ff fc9e 	bl	800084c <__aeabi_ddiv>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	controller->Input = input;
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	6a3a      	ldr	r2, [r7, #32]
 8000f1c:	601a      	str	r2, [r3, #0]
	controller->Output = output;
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	69fa      	ldr	r2, [r7, #28]
 8000f22:	605a      	str	r2, [r3, #4]
	controller->Setpoint = setpoint;
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	609a      	str	r2, [r3, #8]
	controller->Kp = kp;
 8000f2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f30:	e9c1 2304 	strd	r2, r3, [r1, #16]
	controller->Ki = ki*sampleTimeSec;
 8000f34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f3c:	f7ff fb5c 	bl	80005f8 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f46:	e9c1 2306 	strd	r2, r3, [r1, #24]
	controller->Kd = kd/sampleTimeSec;
 8000f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f52:	f7ff fc7b 	bl	800084c <__aeabi_ddiv>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f5c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	controller->LastInput = 0.00;
 8000f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	controller->DInputPrev = 0.00;
 8000f6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	f04f 0300 	mov.w	r3, #0
 8000f78:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	controller->FilterPeriod = 0.5;
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7e:	2200      	movs	r2, #0
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c
	controller->SampleTime = sampleTime;
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
	controller->OutputSum = 0.00;
 8000f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8000f96:	e000      	b.n	8000f9a <Controller_Init+0xf6>
	if (kp<0 || ki<0 || kd<0) return;
 8000f98:	bf00      	nop
}
 8000f9a:	3730      	adds	r7, #48	; 0x30
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	408f4000 	.word	0x408f4000

08000fa4 <Controller_Compute>:

void Controller_Compute(PID_Controller* controller) {
 8000fa4:	b5b0      	push	{r4, r5, r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

	/*Compute all the working error variables*/
	  double input = *(controller->Input);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  double error = *(controller->Setpoint) - input;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fc4:	f7ff f960 	bl	8000288 <__aeabi_dsub>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  double dInput = (input - controller->LastInput);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000fd6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fda:	f7ff f955 	bl	8000288 <__aeabi_dsub>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  controller->OutputSum += (controller->Ki * error);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000ff2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ff6:	f7ff faff 	bl	80005f8 <__aeabi_dmul>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4620      	mov	r0, r4
 8001000:	4629      	mov	r1, r5
 8001002:	f7ff f943 	bl	800028c <__adddf3>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
//	  else if(outputSum < -0.3)  {
//		  outputSum= -0.3;
//	  }

	  /*Proportional Controller Contribution*/
	  double output = controller->Kp * error + controller->OutputSum - controller->Kd * dInput;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001016:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800101a:	f7ff faed 	bl	80005f8 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800102c:	f7ff f92e 	bl	800028c <__adddf3>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4614      	mov	r4, r2
 8001036:	461d      	mov	r5, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800103e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001042:	f7ff fad9 	bl	80005f8 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4620      	mov	r0, r4
 800104c:	4629      	mov	r1, r5
 800104e:	f7ff f91b 	bl	8000288 <__aeabi_dsub>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	e9c7 2308 	strd	r2, r3, [r7, #32]

	  /*Check for output saturation */
	  if(output > controller->OutMax) {
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001060:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001064:	f7ff fd58 	bl	8000b18 <__aeabi_dcmpgt>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <Controller_Compute+0xd6>
		  output = controller->OutMax;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001074:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001078:	e00e      	b.n	8001098 <Controller_Compute+0xf4>
	  }

	  else if(output < controller->OutMin) {
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001080:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001084:	f7ff fd2a 	bl	8000adc <__aeabi_dcmplt>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d004      	beq.n	8001098 <Controller_Compute+0xf4>
		  output = controller->OutMin;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001094:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  }

	  /*Populate controller output effort */
	  *(controller->Output) = output;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6859      	ldr	r1, [r3, #4]
 800109c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010a0:	e9c1 2300 	strd	r2, r3, [r1]

	  /*Remember some variables for next time*/
	  controller->LastInput = input;
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010aa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	  controller->DInputPrev = dInput;
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010b4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bdb0      	pop	{r4, r5, r7, pc}

080010c0 <Controller_SetOutputLimits>:

void Controller_SetOutputLimits(PID_Controller* controller, double min, double max) {
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6178      	str	r0, [r7, #20]
 80010c8:	ed87 0b02 	vstr	d0, [r7, #8]
 80010cc:	ed87 1b00 	vstr	d1, [r7]
	controller->OutMin = min;
 80010d0:	6979      	ldr	r1, [r7, #20]
 80010d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	controller->OutMax = max;
 80010da:	6979      	ldr	r1, [r7, #20]
 80010dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010e0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80010e4:	bf00      	nop
 80010e6:	371c      	adds	r7, #28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <Controller_SetTunings>:
	controller->SampleTime = sampleTime;

}

// Adjust PID control parameters
void Controller_SetTunings(PID_Controller* controller, double kp, double ki, double kd){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	61f8      	str	r0, [r7, #28]
 80010f8:	ed87 0b04 	vstr	d0, [r7, #16]
 80010fc:	ed87 1b02 	vstr	d1, [r7, #8]
 8001100:	ed87 2b00 	vstr	d2, [r7]
   if (kp<0 || ki<0 || kd<0) return;
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001110:	f7ff fce4 	bl	8000adc <__aeabi_dcmplt>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d13f      	bne.n	800119a <Controller_SetTunings+0xaa>
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001126:	f7ff fcd9 	bl	8000adc <__aeabi_dcmplt>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d134      	bne.n	800119a <Controller_SetTunings+0xaa>
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	e9d7 0100 	ldrd	r0, r1, [r7]
 800113c:	f7ff fcce 	bl	8000adc <__aeabi_dcmplt>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d129      	bne.n	800119a <Controller_SetTunings+0xaa>
   double SampleTimeInSec = ((double)controller->SampleTime)/1000;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f9ea 	bl	8000524 <__aeabi_i2d>
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <Controller_SetTunings+0xb4>)
 8001156:	f7ff fb79 	bl	800084c <__aeabi_ddiv>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	e9c7 2308 	strd	r2, r3, [r7, #32]

   controller->Kp = kp;
 8001162:	69f9      	ldr	r1, [r7, #28]
 8001164:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001168:	e9c1 2304 	strd	r2, r3, [r1, #16]
   controller->Ki = ki * SampleTimeInSec;
 800116c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001170:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001174:	f7ff fa40 	bl	80005f8 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	69f9      	ldr	r1, [r7, #28]
 800117e:	e9c1 2306 	strd	r2, r3, [r1, #24]
   controller->Kd = kd / SampleTimeInSec;
 8001182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001186:	e9d7 0100 	ldrd	r0, r1, [r7]
 800118a:	f7ff fb5f 	bl	800084c <__aeabi_ddiv>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	69f9      	ldr	r1, [r7, #28]
 8001194:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001198:	e000      	b.n	800119c <Controller_SetTunings+0xac>
   if (kp<0 || ki<0 || kd<0) return;
 800119a:	bf00      	nop
}
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	408f4000 	.word	0x408f4000

080011a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80011b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <vApplicationGetIdleTaskMemory+0x30>)
 80011be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000224 	.word	0x20000224
 80011d8:	20000278 	.word	0x20000278

080011dc <updatePosition>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void updatePosition(uint32_t currentCounter, uint32_t *prevCounter, int32_t *net) {
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
    // Calculate the change in counter value since the last callback
    int32_t counterChange = currentCounter - *prevCounter;
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	617b      	str	r3, [r7, #20]

    // Update the previous counter value for the next iteration
    *prevCounter = currentCounter;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	601a      	str	r2, [r3, #0]

    // Handle wrap-around by checking if the change is larger than half the range
    if (counterChange > MAX_COUNTER_VALUE / 2) {
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011fe:	db04      	blt.n	800120a <updatePosition+0x2e>
        counterChange -= MAX_COUNTER_VALUE + 1;  // Handle wrap from high to low
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	e007      	b.n	800121a <updatePosition+0x3e>
    } else if (counterChange < -MAX_COUNTER_VALUE / 2) {
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001210:	dc03      	bgt.n	800121a <updatePosition+0x3e>
        counterChange += MAX_COUNTER_VALUE + 1;  // Handle wrap from low to high
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001218:	617b      	str	r3, [r7, #20]
    }

    // Update the net position
    *net += counterChange;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	441a      	add	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	0000      	movs	r0, r0
 8001234:	0000      	movs	r0, r0
	...

08001238 <updatePendulumState>:

void updatePendulumState(uint32_t armEncoder, uint32_t pendEncoder){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]

	// Read current pendulum position state (in encoder pulses)
	updatePosition(armEncoder, &previousCounterArm, &netPositionArm);
 8001242:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <updatePendulumState+0x88>)
 8001244:	491f      	ldr	r1, [pc, #124]	; (80012c4 <updatePendulumState+0x8c>)
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffc8 	bl	80011dc <updatePosition>
	updatePosition(pendEncoder, &previousCounterPend, &netPositionPend);
 800124c:	4a1e      	ldr	r2, [pc, #120]	; (80012c8 <updatePendulumState+0x90>)
 800124e:	491f      	ldr	r1, [pc, #124]	; (80012cc <updatePendulumState+0x94>)
 8001250:	6838      	ldr	r0, [r7, #0]
 8001252:	f7ff ffc3 	bl	80011dc <updatePosition>

	// Updates pendulum & arm position in degrees from encoder readings
	armCurrPos = netPositionArm*STEPS_TO_DEG;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <updatePendulumState+0x88>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f962 	bl	8000524 <__aeabi_i2d>
 8001260:	a315      	add	r3, pc, #84	; (adr r3, 80012b8 <updatePendulumState+0x80>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9c7 	bl	80005f8 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4918      	ldr	r1, [pc, #96]	; (80012d0 <updatePendulumState+0x98>)
 8001270:	e9c1 2300 	strd	r2, r3, [r1]
	pendCurrPos = -1*netPositionPend*STEPS_TO_DEG;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <updatePendulumState+0x90>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	425b      	negs	r3, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f952 	bl	8000524 <__aeabi_i2d>
 8001280:	a30d      	add	r3, pc, #52	; (adr r3, 80012b8 <updatePendulumState+0x80>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7ff f9b7 	bl	80005f8 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4911      	ldr	r1, [pc, #68]	; (80012d4 <updatePendulumState+0x9c>)
 8001290:	e9c1 2300 	strd	r2, r3, [r1]

	if(!swingUpFlag) {
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <updatePendulumState+0xa0>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d106      	bne.n	80012aa <updatePendulumState+0x72>
		pendSetPoint = *arm_controller.Output;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <updatePendulumState+0xa4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	490e      	ldr	r1, [pc, #56]	; (80012e0 <updatePendulumState+0xa8>)
 80012a6:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	f3af 8000 	nop.w
 80012b8:	ea86711e 	.word	0xea86711e
 80012bc:	3fa67fff 	.word	0x3fa67fff
 80012c0:	200006b4 	.word	0x200006b4
 80012c4:	200006a8 	.word	0x200006a8
 80012c8:	200006b0 	.word	0x200006b0
 80012cc:	200006ac 	.word	0x200006ac
 80012d0:	20000788 	.word	0x20000788
 80012d4:	20000780 	.word	0x20000780
 80012d8:	200006e3 	.word	0x200006e3
 80012dc:	20000650 	.word	0x20000650
 80012e0:	200007a0 	.word	0x200007a0
 80012e4:	00000000 	.word	0x00000000

080012e8 <swingUpPendulum>:


void swingUpPendulum() {
 80012e8:	b5b0      	push	{r4, r5, r7, lr}
 80012ea:	af00      	add	r7, sp, #0

	if(balanceState) {
 80012ec:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <swingUpPendulum+0xd0>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d143      	bne.n	800137c <swingUpPendulum+0x94>
		return;
	}

	disturbance_threshold = SWINGUP_THRESH;
 80012f4:	4b31      	ldr	r3, [pc, #196]	; (80013bc <swingUpPendulum+0xd4>)
 80012f6:	2202      	movs	r2, #2
 80012f8:	701a      	strb	r2, [r3, #0]
	netPositionPend = 180.0/STEPS_TO_DEG;
 80012fa:	4b31      	ldr	r3, [pc, #196]	; (80013c0 <swingUpPendulum+0xd8>)
 80012fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001300:	601a      	str	r2, [r3, #0]
	Controller_SetOutputLimits(&arm_controller, -VOLTAGE_LIMIT_SWINGUP, VOLTAGE_LIMIT_SWINGUP);
 8001302:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8001380 <swingUpPendulum+0x98>
 8001306:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001388 <swingUpPendulum+0xa0>
 800130a:	482e      	ldr	r0, [pc, #184]	; (80013c4 <swingUpPendulum+0xdc>)
 800130c:	f7ff fed8 	bl	80010c0 <Controller_SetOutputLimits>
	Controller_SetTunings(&arm_controller, 2, 0.15, 0.045);
 8001310:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8001390 <swingUpPendulum+0xa8>
 8001314:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8001398 <swingUpPendulum+0xb0>
 8001318:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80013a0 <swingUpPendulum+0xb8>
 800131c:	4829      	ldr	r0, [pc, #164]	; (80013c4 <swingUpPendulum+0xdc>)
 800131e:	f7ff fee7 	bl	80010f0 <Controller_SetTunings>
	arm_controller.OutputSum = 0.00;
 8001322:	4928      	ldr	r1, [pc, #160]	; (80013c4 <swingUpPendulum+0xdc>)
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	armSetPoint = armCurrPos + SWINGUP_SETPOINT + SWINGUP_MULTIPLIER*armCurrPos;
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <swingUpPendulum+0xe0>)
 8001332:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001336:	a31c      	add	r3, pc, #112	; (adr r3, 80013a8 <swingUpPendulum+0xc0>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7fe ffa6 	bl	800028c <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4614      	mov	r4, r2
 8001346:	461d      	mov	r5, r3
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <swingUpPendulum+0xe0>)
 800134a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800134e:	a318      	add	r3, pc, #96	; (adr r3, 80013b0 <swingUpPendulum+0xc8>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff f950 	bl	80005f8 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4620      	mov	r0, r4
 800135e:	4629      	mov	r1, r5
 8001360:	f7fe ff94 	bl	800028c <__adddf3>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4918      	ldr	r1, [pc, #96]	; (80013cc <swingUpPendulum+0xe4>)
 800136a:	e9c1 2300 	strd	r2, r3, [r1]
	swingUpFlag = 1;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <swingUpPendulum+0xe8>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
	balanceState = 1;
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <swingUpPendulum+0xd0>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	e000      	b.n	800137e <swingUpPendulum+0x96>
		return;
 800137c:	bf00      	nop
}
 800137e:	bdb0      	pop	{r4, r5, r7, pc}
 8001380:	33333333 	.word	0x33333333
 8001384:	402a3333 	.word	0x402a3333
 8001388:	33333333 	.word	0x33333333
 800138c:	c02a3333 	.word	0xc02a3333
 8001390:	70a3d70a 	.word	0x70a3d70a
 8001394:	3fa70a3d 	.word	0x3fa70a3d
 8001398:	33333333 	.word	0x33333333
 800139c:	3fc33333 	.word	0x3fc33333
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40000000 	.word	0x40000000
 80013a8:	00000000 	.word	0x00000000
 80013ac:	40527000 	.word	0x40527000
 80013b0:	47ae147b 	.word	0x47ae147b
 80013b4:	3f947ae1 	.word	0x3f947ae1
 80013b8:	200006e4 	.word	0x200006e4
 80013bc:	200006b8 	.word	0x200006b8
 80013c0:	200006b0 	.word	0x200006b0
 80013c4:	20000650 	.word	0x20000650
 80013c8:	20000788 	.word	0x20000788
 80013cc:	200007a8 	.word	0x200007a8
 80013d0:	200006e3 	.word	0x200006e3

080013d4 <calculateVelocity>:

double calculateVelocity(double *currPos, double *prevPos, double period) {
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	ed87 0b00 	vstr	d0, [r7]
	double vel = (*currPos - *prevPos)/(period/1000.0);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7fe ff4b 	bl	8000288 <__aeabi_dsub>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4614      	mov	r4, r2
 80013f8:	461d      	mov	r5, r3
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <calculateVelocity+0x60>)
 8001400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001404:	f7ff fa22 	bl	800084c <__aeabi_ddiv>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4620      	mov	r0, r4
 800140e:	4629      	mov	r1, r5
 8001410:	f7ff fa1c 	bl	800084c <__aeabi_ddiv>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return vel;
 800141c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001420:	ec43 2b17 	vmov	d7, r2, r3
}
 8001424:	eeb0 0a47 	vmov.f32	s0, s14
 8001428:	eef0 0a67 	vmov.f32	s1, s15
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bdb0      	pop	{r4, r5, r7, pc}
 8001432:	bf00      	nop
 8001434:	408f4000 	.word	0x408f4000

08001438 <swingDownPendulum>:

void swingDownPendulum() {
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0

	swingUpFlag = 0;
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <swingDownPendulum+0x80>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
	posOffsetFlag = 1;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <swingDownPendulum+0x84>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
	swingDownFlag = 1;
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <swingDownPendulum+0x88>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
	armSetPoint = 0;
 800144e:	491d      	ldr	r1, [pc, #116]	; (80014c4 <swingDownPendulum+0x8c>)
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	e9c1 2300 	strd	r2, r3, [r1]
	Controller_SetTunings(&arm_controller, 0.45, 0.1, 0.15);
 800145c:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8001488 <swingDownPendulum+0x50>
 8001460:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8001490 <swingDownPendulum+0x58>
 8001464:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001498 <swingDownPendulum+0x60>
 8001468:	4817      	ldr	r0, [pc, #92]	; (80014c8 <swingDownPendulum+0x90>)
 800146a:	f7ff fe41 	bl	80010f0 <Controller_SetTunings>
	Controller_SetTunings(&pend_controller, 0.8, 0, 0.01);
 800146e:	ed9f 2b0c 	vldr	d2, [pc, #48]	; 80014a0 <swingDownPendulum+0x68>
 8001472:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 80014a8 <swingDownPendulum+0x70>
 8001476:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80014b0 <swingDownPendulum+0x78>
 800147a:	4814      	ldr	r0, [pc, #80]	; (80014cc <swingDownPendulum+0x94>)
 800147c:	f7ff fe38 	bl	80010f0 <Controller_SetTunings>
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	f3af 8000 	nop.w
 8001488:	33333333 	.word	0x33333333
 800148c:	3fc33333 	.word	0x3fc33333
 8001490:	9999999a 	.word	0x9999999a
 8001494:	3fb99999 	.word	0x3fb99999
 8001498:	cccccccd 	.word	0xcccccccd
 800149c:	3fdccccc 	.word	0x3fdccccc
 80014a0:	47ae147b 	.word	0x47ae147b
 80014a4:	3f847ae1 	.word	0x3f847ae1
	...
 80014b0:	9999999a 	.word	0x9999999a
 80014b4:	3fe99999 	.word	0x3fe99999
 80014b8:	200006e3 	.word	0x200006e3
 80014bc:	200006e0 	.word	0x200006e0
 80014c0:	200006e1 	.word	0x200006e1
 80014c4:	200007a8 	.word	0x200007a8
 80014c8:	20000650 	.word	0x20000650
 80014cc:	200005f8 	.word	0x200005f8

080014d0 <swingDownControl>:

void swingDownControl() {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0

	// Update control output
	updateControllers(&pend_controller, &arm_controller);
 80014d6:	4934      	ldr	r1, [pc, #208]	; (80015a8 <swingDownControl+0xd8>)
 80014d8:	4834      	ldr	r0, [pc, #208]	; (80015ac <swingDownControl+0xdc>)
 80014da:	f001 f90e 	bl	80026fa <updateControllers>

	double outVoltage = *pend_controller.Output;
 80014de:	4b33      	ldr	r3, [pc, #204]	; (80015ac <swingDownControl+0xdc>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Set Motor Direction
	if(outVoltage > 0)
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014f6:	f7ff fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00e      	beq.n	800151e <swingDownControl+0x4e>
	{

		HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_SET);
 8001500:	2201      	movs	r2, #1
 8001502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f001 ff99 	bl	8003440 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001518:	f001 ff92 	bl	8003440 <HAL_GPIO_WritePin>
 800151c:	e00d      	b.n	800153a <swingDownControl+0x6a>
	}

	else
	{
		HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001528:	f001 ff8a 	bl	8003440 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001536:	f001 ff83 	bl	8003440 <HAL_GPIO_WritePin>
	}

	// Calculate PWM counter for given voltage
	int dutyCycle = (abs(outVoltage) + dz)* MAX_PWM / MAX_MOTOR_VOLTAGE;
 800153a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800153e:	f7ff fb0b 	bl	8000b58 <__aeabi_d2iz>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	bfb8      	it	lt
 8001548:	425b      	neglt	r3, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ffea 	bl	8000524 <__aeabi_i2d>
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <swingDownControl+0xe0>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7fe fe99 	bl	800028c <__adddf3>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	a30f      	add	r3, pc, #60	; (adr r3, 80015a0 <swingDownControl+0xd0>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f846 	bl	80005f8 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <swingDownControl+0xe4>)
 800157a:	f7ff f967 	bl	800084c <__aeabi_ddiv>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff fae7 	bl	8000b58 <__aeabi_d2iz>
 800158a:	4603      	mov	r3, r0
 800158c:	607b      	str	r3, [r7, #4]

	// Set Motor PWM Cycle
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dutyCycle);
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <swingDownControl+0xe8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	639a      	str	r2, [r3, #56]	; 0x38

}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	00000000 	.word	0x00000000
 80015a4:	40c38800 	.word	0x40c38800
 80015a8:	20000650 	.word	0x20000650
 80015ac:	200005f8 	.word	0x200005f8
 80015b0:	20000028 	.word	0x20000028
 80015b4:	40380000 	.word	0x40380000
 80015b8:	20000510 	.word	0x20000510
 80015bc:	00000000 	.word	0x00000000

080015c0 <checkFallDirection>:

void checkFallDirection() {
 80015c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015c4:	af00      	add	r7, sp, #0


	if(abs(pendCurrPos) > MAX_DISTURBANCE){
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <checkFallDirection+0xa0>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fac2 	bl	8000b58 <__aeabi_d2iz>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	bfb8      	it	lt
 80015da:	425b      	neglt	r3, r3
 80015dc:	2b25      	cmp	r3, #37	; 0x25
 80015de:	dd38      	ble.n	8001652 <checkFallDirection+0x92>
		netPositionPend += 180/STEPS_TO_DEG*(pendCurrPos)/abs(pendCurrPos);
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <checkFallDirection+0xa4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff9d 	bl	8000524 <__aeabi_i2d>
 80015ea:	4604      	mov	r4, r0
 80015ec:	460d      	mov	r5, r1
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <checkFallDirection+0xa0>)
 80015f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f4:	a318      	add	r3, pc, #96	; (adr r3, 8001658 <checkFallDirection+0x98>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe fffd 	bl	80005f8 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4690      	mov	r8, r2
 8001604:	4699      	mov	r9, r3
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <checkFallDirection+0xa0>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff faa2 	bl	8000b58 <__aeabi_d2iz>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	bfb8      	it	lt
 800161a:	425b      	neglt	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff81 	bl	8000524 <__aeabi_i2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4640      	mov	r0, r8
 8001628:	4649      	mov	r1, r9
 800162a:	f7ff f90f 	bl	800084c <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4620      	mov	r0, r4
 8001634:	4629      	mov	r1, r5
 8001636:	f7fe fe29 	bl	800028c <__adddf3>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff fa89 	bl	8000b58 <__aeabi_d2iz>
 8001646:	4603      	mov	r3, r0
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <checkFallDirection+0xa4>)
 800164a:	6013      	str	r3, [r2, #0]
		balanceState = 0;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <checkFallDirection+0xa8>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
	}
}
 8001652:	bf00      	nop
 8001654:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001658:	0f455ff9 	.word	0x0f455ff9
 800165c:	40b00000 	.word	0x40b00000
 8001660:	20000780 	.word	0x20000780
 8001664:	200006b0 	.word	0x200006b0
 8001668:	200006e4 	.word	0x200006e4
 800166c:	00000000 	.word	0x00000000

08001670 <swingUpControl>:

void swingUpControl() {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0

	// Update control output
	updateControllers(&pend_controller, &arm_controller);
 8001676:	4934      	ldr	r1, [pc, #208]	; (8001748 <swingUpControl+0xd8>)
 8001678:	4834      	ldr	r0, [pc, #208]	; (800174c <swingUpControl+0xdc>)
 800167a:	f001 f83e 	bl	80026fa <updateControllers>

	double outVoltage = *arm_controller.Output;
 800167e:	4b32      	ldr	r3, [pc, #200]	; (8001748 <swingUpControl+0xd8>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Set Motor Direction
	if(outVoltage > 0)
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001696:	f7ff fa3f 	bl	8000b18 <__aeabi_dcmpgt>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00e      	beq.n	80016be <swingUpControl+0x4e>
	{

		HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016aa:	f001 fec9 	bl	8003440 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b8:	f001 fec2 	bl	8003440 <HAL_GPIO_WritePin>
 80016bc:	e00d      	b.n	80016da <swingUpControl+0x6a>
	}

	else
	{
		HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c8:	f001 feba 	bl	8003440 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d6:	f001 feb3 	bl	8003440 <HAL_GPIO_WritePin>
	}

	// Calculate PWM counter for given voltage
	int dutyCycle = (abs(outVoltage) + dz)* MAX_PWM / MAX_MOTOR_VOLTAGE;
 80016da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016de:	f7ff fa3b 	bl	8000b58 <__aeabi_d2iz>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bfb8      	it	lt
 80016e8:	425b      	neglt	r3, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff1a 	bl	8000524 <__aeabi_i2d>
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <swingUpControl+0xe0>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	f7fe fdc9 	bl	800028c <__adddf3>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	a30f      	add	r3, pc, #60	; (adr r3, 8001740 <swingUpControl+0xd0>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7fe ff76 	bl	80005f8 <__aeabi_dmul>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <swingUpControl+0xe4>)
 800171a:	f7ff f897 	bl	800084c <__aeabi_ddiv>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff fa17 	bl	8000b58 <__aeabi_d2iz>
 800172a:	4603      	mov	r3, r0
 800172c:	607b      	str	r3, [r7, #4]

	// Set Motor PWM Cycle
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dutyCycle);
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <swingUpControl+0xe8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	00000000 	.word	0x00000000
 8001744:	40c38800 	.word	0x40c38800
 8001748:	20000650 	.word	0x20000650
 800174c:	200005f8 	.word	0x200005f8
 8001750:	20000028 	.word	0x20000028
 8001754:	40380000 	.word	0x40380000
 8001758:	20000510 	.word	0x20000510
 800175c:	00000000 	.word	0x00000000

08001760 <balanceControl>:

void balanceControl() {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0

	// Update Pendulum Control Output
	updateControllers(&pend_controller, &arm_controller);
 8001766:	4934      	ldr	r1, [pc, #208]	; (8001838 <balanceControl+0xd8>)
 8001768:	4834      	ldr	r0, [pc, #208]	; (800183c <balanceControl+0xdc>)
 800176a:	f000 ffc6 	bl	80026fa <updateControllers>

	double outVoltage = *pend_controller.Output;
 800176e:	4b33      	ldr	r3, [pc, #204]	; (800183c <balanceControl+0xdc>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Set Motor Direction
	if(outVoltage < 0)
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001786:	f7ff f9a9 	bl	8000adc <__aeabi_dcmplt>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00e      	beq.n	80017ae <balanceControl+0x4e>
	{

		HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f001 fe51 	bl	8003440 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a8:	f001 fe4a 	bl	8003440 <HAL_GPIO_WritePin>
 80017ac:	e00d      	b.n	80017ca <balanceControl+0x6a>
	}

	else
	{
		HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b8:	f001 fe42 	bl	8003440 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c6:	f001 fe3b 	bl	8003440 <HAL_GPIO_WritePin>
	}

	// Calculate PWM counter for given voltage
	int dutyCycle = (abs(outVoltage) + dz)* MAX_PWM / MAX_MOTOR_VOLTAGE;
 80017ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017ce:	f7ff f9c3 	bl	8000b58 <__aeabi_d2iz>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bfb8      	it	lt
 80017d8:	425b      	neglt	r3, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fea2 	bl	8000524 <__aeabi_i2d>
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <balanceControl+0xe0>)
 80017e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e6:	f7fe fd51 	bl	800028c <__adddf3>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	a30f      	add	r3, pc, #60	; (adr r3, 8001830 <balanceControl+0xd0>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f7fe fefe 	bl	80005f8 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <balanceControl+0xe4>)
 800180a:	f7ff f81f 	bl	800084c <__aeabi_ddiv>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff f99f 	bl	8000b58 <__aeabi_d2iz>
 800181a:	4603      	mov	r3, r0
 800181c:	607b      	str	r3, [r7, #4]

	// Set Motor PWM Cycle
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dutyCycle);
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <balanceControl+0xe8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	00000000 	.word	0x00000000
 8001834:	40c38800 	.word	0x40c38800
 8001838:	20000650 	.word	0x20000650
 800183c:	200005f8 	.word	0x200005f8
 8001840:	20000028 	.word	0x20000028
 8001844:	40380000 	.word	0x40380000
 8001848:	20000510 	.word	0x20000510
 800184c:	00000000 	.word	0x00000000

08001850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	b098      	sub	sp, #96	; 0x60
 8001854:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001856:	f001 faa7 	bl	8002da8 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* Initialize PID Controllers for Pendulum angle and Motor Arm Angle */
  Controller_Init(&pend_controller, &pendCurrPos, &pendOutCmd, &pendSetPoint, P1, I1, D1, SAMPLE_PERIOD);
 800185a:	4b77      	ldr	r3, [pc, #476]	; (8001a38 <main+0x1e8>)
 800185c:	ed93 7b00 	vldr	d7, [r3]
 8001860:	4b76      	ldr	r3, [pc, #472]	; (8001a3c <main+0x1ec>)
 8001862:	ed93 6b00 	vldr	d6, [r3]
 8001866:	4b76      	ldr	r3, [pc, #472]	; (8001a40 <main+0x1f0>)
 8001868:	ed93 5b00 	vldr	d5, [r3]
 800186c:	2301      	movs	r3, #1
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	eeb0 2a45 	vmov.f32	s4, s10
 8001874:	eef0 2a65 	vmov.f32	s5, s11
 8001878:	eeb0 1a46 	vmov.f32	s2, s12
 800187c:	eef0 1a66 	vmov.f32	s3, s13
 8001880:	eeb0 0a47 	vmov.f32	s0, s14
 8001884:	eef0 0a67 	vmov.f32	s1, s15
 8001888:	4b6e      	ldr	r3, [pc, #440]	; (8001a44 <main+0x1f4>)
 800188a:	4a6f      	ldr	r2, [pc, #444]	; (8001a48 <main+0x1f8>)
 800188c:	496f      	ldr	r1, [pc, #444]	; (8001a4c <main+0x1fc>)
 800188e:	4870      	ldr	r0, [pc, #448]	; (8001a50 <main+0x200>)
 8001890:	f7ff fb08 	bl	8000ea4 <Controller_Init>
  Controller_Init(&arm_controller, &armCurrPos, &armOutCmd, &armSetPoint, P2, I2, D2, SAMPLE_PERIOD);
 8001894:	4b6f      	ldr	r3, [pc, #444]	; (8001a54 <main+0x204>)
 8001896:	ed93 7b00 	vldr	d7, [r3]
 800189a:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <main+0x208>)
 800189c:	ed93 6b00 	vldr	d6, [r3]
 80018a0:	4b6e      	ldr	r3, [pc, #440]	; (8001a5c <main+0x20c>)
 80018a2:	ed93 5b00 	vldr	d5, [r3]
 80018a6:	2301      	movs	r3, #1
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	eeb0 2a45 	vmov.f32	s4, s10
 80018ae:	eef0 2a65 	vmov.f32	s5, s11
 80018b2:	eeb0 1a46 	vmov.f32	s2, s12
 80018b6:	eef0 1a66 	vmov.f32	s3, s13
 80018ba:	eeb0 0a47 	vmov.f32	s0, s14
 80018be:	eef0 0a67 	vmov.f32	s1, s15
 80018c2:	4b67      	ldr	r3, [pc, #412]	; (8001a60 <main+0x210>)
 80018c4:	4a67      	ldr	r2, [pc, #412]	; (8001a64 <main+0x214>)
 80018c6:	4968      	ldr	r1, [pc, #416]	; (8001a68 <main+0x218>)
 80018c8:	4868      	ldr	r0, [pc, #416]	; (8001a6c <main+0x21c>)
 80018ca:	f7ff faeb 	bl	8000ea4 <Controller_Init>

  /* Set Saturation Limits on Control Output */
  Controller_SetOutputLimits(&pend_controller, -VOLTAGE_LIMIT_BALANCE, VOLTAGE_LIMIT_BALANCE);
 80018ce:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8001a18 <main+0x1c8>
 80018d2:	ed9f 0b53 	vldr	d0, [pc, #332]	; 8001a20 <main+0x1d0>
 80018d6:	485e      	ldr	r0, [pc, #376]	; (8001a50 <main+0x200>)
 80018d8:	f7ff fbf2 	bl	80010c0 <Controller_SetOutputLimits>
  Controller_SetOutputLimits(&arm_controller, -VOLTAGE_LIMIT_SWINGUP, VOLTAGE_LIMIT_SWINGUP);
 80018dc:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8001a28 <main+0x1d8>
 80018e0:	ed9f 0b53 	vldr	d0, [pc, #332]	; 8001a30 <main+0x1e0>
 80018e4:	4861      	ldr	r0, [pc, #388]	; (8001a6c <main+0x21c>)
 80018e6:	f7ff fbeb 	bl	80010c0 <Controller_SetOutputLimits>

  /* Initialize Variables */
  pendCurrPos = 180;
 80018ea:	4958      	ldr	r1, [pc, #352]	; (8001a4c <main+0x1fc>)
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <main+0x220>)
 80018f2:	e9c1 2300 	strd	r2, r3, [r1]
  pendPrevPos = pendCurrPos;
 80018f6:	4b55      	ldr	r3, [pc, #340]	; (8001a4c <main+0x1fc>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	495d      	ldr	r1, [pc, #372]	; (8001a74 <main+0x224>)
 80018fe:	e9c1 2300 	strd	r2, r3, [r1]
  armPrevPos = armCurrPos;
 8001902:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <main+0x218>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	495b      	ldr	r1, [pc, #364]	; (8001a78 <main+0x228>)
 800190a:	e9c1 2300 	strd	r2, r3, [r1]
  pendOutCmd = 0;
 800190e:	494e      	ldr	r1, [pc, #312]	; (8001a48 <main+0x1f8>)
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	e9c1 2300 	strd	r2, r3, [r1]
  armCurrPos = 0;
 800191c:	4952      	ldr	r1, [pc, #328]	; (8001a68 <main+0x218>)
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	e9c1 2300 	strd	r2, r3, [r1]
  armOutCmd = 0;
 800192a:	494e      	ldr	r1, [pc, #312]	; (8001a64 <main+0x214>)
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	e9c1 2300 	strd	r2, r3, [r1]
  pendSetPoint = 0;
 8001938:	4942      	ldr	r1, [pc, #264]	; (8001a44 <main+0x1f4>)
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9c1 2300 	strd	r2, r3, [r1]
  armSetPoint = 0;
 8001946:	4946      	ldr	r1, [pc, #280]	; (8001a60 <main+0x210>)
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	e9c1 2300 	strd	r2, r3, [r1]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001954:	f000 f8aa 	bl	8001aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001958:	f000 fa80 	bl	8001e5c <MX_GPIO_Init>
  MX_TIM8_Init();
 800195c:	f000 f9a2 	bl	8001ca4 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001960:	f000 f8f6 	bl	8001b50 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001964:	f000 f948 	bl	8001bf8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001968:	f000 fa48 	bl	8001dfc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize UART Receive
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800196c:	2201      	movs	r2, #1
 800196e:	4943      	ldr	r1, [pc, #268]	; (8001a7c <main+0x22c>)
 8001970:	4843      	ldr	r0, [pc, #268]	; (8001a80 <main+0x230>)
 8001972:	f004 fd67 	bl	8006444 <HAL_UART_Receive_IT>

  /* Start PWM for DC Motor and timers for encoders */
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001976:	2104      	movs	r1, #4
 8001978:	4842      	ldr	r0, [pc, #264]	; (8001a84 <main+0x234>)
 800197a:	f003 f9f5 	bl	8004d68 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800197e:	213c      	movs	r1, #60	; 0x3c
 8001980:	4841      	ldr	r0, [pc, #260]	; (8001a88 <main+0x238>)
 8001982:	f003 fb9d 	bl	80050c0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001986:	213c      	movs	r1, #60	; 0x3c
 8001988:	4840      	ldr	r0, [pc, #256]	; (8001a8c <main+0x23c>)
 800198a:	f003 fb99 	bl	80050c0 <HAL_TIM_Encoder_Start>

  threadLock = xSemaphoreCreateMutex();
 800198e:	2001      	movs	r0, #1
 8001990:	f006 fa57 	bl	8007e42 <xQueueCreateMutex>
 8001994:	4603      	mov	r3, r0
 8001996:	4a3e      	ldr	r2, [pc, #248]	; (8001a90 <main+0x240>)
 8001998:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of controlAlgo */
  osThreadDef(controlAlgo, computeControlEffort, osPriorityHigh, 0, 128);
 800199a:	4b3e      	ldr	r3, [pc, #248]	; (8001a94 <main+0x244>)
 800199c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80019a0:	461d      	mov	r5, r3
 80019a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlAlgoHandle = osThreadCreate(osThread(controlAlgo), NULL);
 80019ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f006 f854 	bl	8007a62 <osThreadCreate>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a36      	ldr	r2, [pc, #216]	; (8001a98 <main+0x248>)
 80019be:	6013      	str	r3, [r2, #0]

  /* definition and creation of sendMessage */
  osThreadDef(sendMessage, sendData, osPriorityLow, 0, 128);
 80019c0:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <main+0x24c>)
 80019c2:	f107 0420 	add.w	r4, r7, #32
 80019c6:	461d      	mov	r5, r3
 80019c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendMessageHandle = osThreadCreate(osThread(sendMessage), NULL);
 80019d4:	f107 0320 	add.w	r3, r7, #32
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f006 f841 	bl	8007a62 <osThreadCreate>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a2f      	ldr	r2, [pc, #188]	; (8001aa0 <main+0x250>)
 80019e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of safetyLimits */
  osThreadDef(safetyLimits, checkLimits, osPriorityHigh, 0, 128);
 80019e6:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <main+0x254>)
 80019e8:	1d3c      	adds	r4, r7, #4
 80019ea:	461d      	mov	r5, r3
 80019ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  safetyLimitsHandle = osThreadCreate(osThread(safetyLimits), NULL);
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f006 f830 	bl	8007a62 <osThreadCreate>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4a28      	ldr	r2, [pc, #160]	; (8001aa8 <main+0x258>)
 8001a06:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001a08:	f006 f824 	bl	8007a54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  osDelay(2000);
 8001a0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a10:	f006 f873 	bl	8007afa <osDelay>

  while (1)
 8001a14:	e7fe      	b.n	8001a14 <main+0x1c4>
 8001a16:	bf00      	nop
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	40180000 	.word	0x40180000
 8001a20:	00000000 	.word	0x00000000
 8001a24:	c0180000 	.word	0xc0180000
 8001a28:	33333333 	.word	0x33333333
 8001a2c:	402a3333 	.word	0x402a3333
 8001a30:	33333333 	.word	0x33333333
 8001a34:	c02a3333 	.word	0xc02a3333
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	200007b0 	.word	0x200007b0
 8001a40:	20000008 	.word	0x20000008
 8001a44:	200007a0 	.word	0x200007a0
 8001a48:	20000790 	.word	0x20000790
 8001a4c:	20000780 	.word	0x20000780
 8001a50:	200005f8 	.word	0x200005f8
 8001a54:	20000010 	.word	0x20000010
 8001a58:	20000018 	.word	0x20000018
 8001a5c:	20000020 	.word	0x20000020
 8001a60:	200007a8 	.word	0x200007a8
 8001a64:	20000798 	.word	0x20000798
 8001a68:	20000788 	.word	0x20000788
 8001a6c:	20000650 	.word	0x20000650
 8001a70:	40668000 	.word	0x40668000
 8001a74:	200006c0 	.word	0x200006c0
 8001a78:	200006d0 	.word	0x200006d0
 8001a7c:	2000076c 	.word	0x2000076c
 8001a80:	2000055c 	.word	0x2000055c
 8001a84:	20000510 	.word	0x20000510
 8001a88:	20000478 	.word	0x20000478
 8001a8c:	200004c4 	.word	0x200004c4
 8001a90:	200005f0 	.word	0x200005f0
 8001a94:	0800cf0c 	.word	0x0800cf0c
 8001a98:	200005e4 	.word	0x200005e4
 8001a9c:	0800cf34 	.word	0x0800cf34
 8001aa0:	200005e8 	.word	0x200005e8
 8001aa4:	0800cf60 	.word	0x0800cf60
 8001aa8:	200005ec 	.word	0x200005ec

08001aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b096      	sub	sp, #88	; 0x58
 8001ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	2244      	movs	r2, #68	; 0x44
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f008 fd20 	bl	800a500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ace:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ad2:	f001 fcdb 	bl	800348c <HAL_PWREx_ControlVoltageScaling>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001adc:	f000 fe08 	bl	80026f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aea:	2310      	movs	r3, #16
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aee:	2302      	movs	r3, #2
 8001af0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001af2:	2302      	movs	r3, #2
 8001af4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001af6:	2301      	movs	r3, #1
 8001af8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001afa:	230a      	movs	r3, #10
 8001afc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001afe:	2307      	movs	r3, #7
 8001b00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b02:	2302      	movs	r3, #2
 8001b04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b06:	2302      	movs	r3, #2
 8001b08:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f001 fd12 	bl	8003538 <HAL_RCC_OscConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b1a:	f000 fde9 	bl	80026f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b1e:	230f      	movs	r3, #15
 8001b20:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b22:	2303      	movs	r3, #3
 8001b24:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b32:	463b      	mov	r3, r7
 8001b34:	2104      	movs	r1, #4
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 f8da 	bl	8003cf0 <HAL_RCC_ClockConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b42:	f000 fdd5 	bl	80026f0 <Error_Handler>
  }
}
 8001b46:	bf00      	nop
 8001b48:	3758      	adds	r7, #88	; 0x58
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08c      	sub	sp, #48	; 0x30
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	2224      	movs	r2, #36	; 0x24
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f008 fcce 	bl	800a500 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b64:	463b      	mov	r3, r7
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <MX_TIM2_Init+0xa4>)
 8001b70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <MX_TIM2_Init+0xa4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <MX_TIM2_Init+0xa4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b82:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <MX_TIM2_Init+0xa4>)
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <MX_TIM2_Init+0xa4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <MX_TIM2_Init+0xa4>)
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b96:	2303      	movs	r3, #3
 8001b98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <MX_TIM2_Init+0xa4>)
 8001bc2:	f003 f9d7 	bl	8004f74 <HAL_TIM_Encoder_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001bcc:	f000 fd90 	bl	80026f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bd8:	463b      	mov	r3, r7
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <MX_TIM2_Init+0xa4>)
 8001bde:	f004 fa35 	bl	800604c <HAL_TIMEx_MasterConfigSynchronization>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001be8:	f000 fd82 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bec:	bf00      	nop
 8001bee:	3730      	adds	r7, #48	; 0x30
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000478 	.word	0x20000478

08001bf8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08c      	sub	sp, #48	; 0x30
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	2224      	movs	r2, #36	; 0x24
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f008 fc7a 	bl	800a500 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <MX_TIM3_Init+0xa4>)
 8001c18:	4a21      	ldr	r2, [pc, #132]	; (8001ca0 <MX_TIM3_Init+0xa8>)
 8001c1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <MX_TIM3_Init+0xa4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c22:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <MX_TIM3_Init+0xa4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <MX_TIM3_Init+0xa4>)
 8001c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c30:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <MX_TIM3_Init+0xa4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <MX_TIM3_Init+0xa4>)
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c44:	2301      	movs	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c54:	2301      	movs	r3, #1
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	4619      	mov	r1, r3
 8001c66:	480d      	ldr	r0, [pc, #52]	; (8001c9c <MX_TIM3_Init+0xa4>)
 8001c68:	f003 f984 	bl	8004f74 <HAL_TIM_Encoder_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c72:	f000 fd3d 	bl	80026f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c7e:	463b      	mov	r3, r7
 8001c80:	4619      	mov	r1, r3
 8001c82:	4806      	ldr	r0, [pc, #24]	; (8001c9c <MX_TIM3_Init+0xa4>)
 8001c84:	f004 f9e2 	bl	800604c <HAL_TIMEx_MasterConfigSynchronization>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c8e:	f000 fd2f 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	3730      	adds	r7, #48	; 0x30
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200004c4 	.word	0x200004c4
 8001ca0:	40000400 	.word	0x40000400

08001ca4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b09a      	sub	sp, #104	; 0x68
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001caa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
 8001cd4:	615a      	str	r2, [r3, #20]
 8001cd6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	222c      	movs	r2, #44	; 0x2c
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f008 fc0e 	bl	800a500 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ce4:	4b43      	ldr	r3, [pc, #268]	; (8001df4 <MX_TIM8_Init+0x150>)
 8001ce6:	4a44      	ldr	r2, [pc, #272]	; (8001df8 <MX_TIM8_Init+0x154>)
 8001ce8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001cea:	4b42      	ldr	r3, [pc, #264]	; (8001df4 <MX_TIM8_Init+0x150>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf0:	4b40      	ldr	r3, [pc, #256]	; (8001df4 <MX_TIM8_Init+0x150>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000;
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <MX_TIM8_Init+0x150>)
 8001cf8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001cfc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfe:	4b3d      	ldr	r3, [pc, #244]	; (8001df4 <MX_TIM8_Init+0x150>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d04:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <MX_TIM8_Init+0x150>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d0a:	4b3a      	ldr	r3, [pc, #232]	; (8001df4 <MX_TIM8_Init+0x150>)
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d10:	4838      	ldr	r0, [pc, #224]	; (8001df4 <MX_TIM8_Init+0x150>)
 8001d12:	f002 feff 	bl	8004b14 <HAL_TIM_Base_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001d1c:	f000 fce8 	bl	80026f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d24:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4831      	ldr	r0, [pc, #196]	; (8001df4 <MX_TIM8_Init+0x150>)
 8001d2e:	f003 fc6b 	bl	8005608 <HAL_TIM_ConfigClockSource>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001d38:	f000 fcda 	bl	80026f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d3c:	482d      	ldr	r0, [pc, #180]	; (8001df4 <MX_TIM8_Init+0x150>)
 8001d3e:	f002 ffb1 	bl	8004ca4 <HAL_TIM_PWM_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001d48:	f000 fcd2 	bl	80026f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d50:	2300      	movs	r3, #0
 8001d52:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4825      	ldr	r0, [pc, #148]	; (8001df4 <MX_TIM8_Init+0x150>)
 8001d60:	f004 f974 	bl	800604c <HAL_TIMEx_MasterConfigSynchronization>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001d6a:	f000 fcc1 	bl	80026f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6e:	2360      	movs	r3, #96	; 0x60
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d76:	2300      	movs	r3, #0
 8001d78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d8e:	2204      	movs	r2, #4
 8001d90:	4619      	mov	r1, r3
 8001d92:	4818      	ldr	r0, [pc, #96]	; (8001df4 <MX_TIM8_Init+0x150>)
 8001d94:	f003 fb24 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001d9e:	f000 fca7 	bl	80026f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001db6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001dc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4807      	ldr	r0, [pc, #28]	; (8001df4 <MX_TIM8_Init+0x150>)
 8001dd8:	f004 f9c0 	bl	800615c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001de2:	f000 fc85 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001de6:	4803      	ldr	r0, [pc, #12]	; (8001df4 <MX_TIM8_Init+0x150>)
 8001de8:	f000 fd60 	bl	80028ac <HAL_TIM_MspPostInit>

}
 8001dec:	bf00      	nop
 8001dee:	3768      	adds	r7, #104	; 0x68
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000510 	.word	0x20000510
 8001df8:	40013400 	.word	0x40013400

08001dfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <MX_USART2_UART_Init+0x58>)
 8001e02:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <MX_USART2_UART_Init+0x5c>)
 8001e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <MX_USART2_UART_Init+0x58>)
 8001e08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <MX_USART2_UART_Init+0x58>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <MX_USART2_UART_Init+0x58>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_USART2_UART_Init+0x58>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <MX_USART2_UART_Init+0x58>)
 8001e22:	220c      	movs	r2, #12
 8001e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <MX_USART2_UART_Init+0x58>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <MX_USART2_UART_Init+0x58>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <MX_USART2_UART_Init+0x58>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <MX_USART2_UART_Init+0x58>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <MX_USART2_UART_Init+0x58>)
 8001e40:	f004 fa28 	bl	8006294 <HAL_UART_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e4a:	f000 fc51 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	2000055c 	.word	0x2000055c
 8001e58:	40004400 	.word	0x40004400

08001e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
 8001e70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <MX_GPIO_Init+0x7c>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <MX_GPIO_Init+0x7c>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <MX_GPIO_Init+0x7c>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <MX_GPIO_Init+0x7c>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <MX_GPIO_Init+0x7c>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <MX_GPIO_Init+0x7c>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN_1_Pin|IN_2_Pin, GPIO_PIN_RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eac:	f001 fac8 	bl	8003440 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN_1_Pin IN_2_Pin */
  GPIO_InitStruct.Pin = IN_1_Pin|IN_2_Pin;
 8001eb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ecc:	f001 f90e 	bl	80030ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ed0:	bf00      	nop
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000

08001edc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001edc:	b5b0      	push	{r4, r5, r7, lr}
 8001ede:	ed2d 8b04 	vpush	{d8-d9}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af06      	add	r7, sp, #24
 8001ee6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) // Adjust accordingly if using a different USART instance
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a90      	ldr	r2, [pc, #576]	; (8002130 <HAL_UART_RxCpltCallback+0x254>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	f040 8117 	bne.w	8002122 <HAL_UART_RxCpltCallback+0x246>
    {

    	if(rx_data == 'P') {
 8001ef4:	4b8f      	ldr	r3, [pc, #572]	; (8002134 <HAL_UART_RxCpltCallback+0x258>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b50      	cmp	r3, #80	; 0x50
 8001efa:	d102      	bne.n	8001f02 <HAL_UART_RxCpltCallback+0x26>
    		paramStringFlag = 1;
 8001efc:	4b8e      	ldr	r3, [pc, #568]	; (8002138 <HAL_UART_RxCpltCallback+0x25c>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
    	}

    	if(paramStringFlag) {
 8001f02:	4b8d      	ldr	r3, [pc, #564]	; (8002138 <HAL_UART_RxCpltCallback+0x25c>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80d1 	beq.w	80020ae <HAL_UART_RxCpltCallback+0x1d2>

    		// Z indicates end of parameter message string
    		if (rx_data == 'Z')
 8001f0c:	4b89      	ldr	r3, [pc, #548]	; (8002134 <HAL_UART_RxCpltCallback+0x258>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b5a      	cmp	r3, #90	; 0x5a
 8001f12:	f040 80c2 	bne.w	800209a <HAL_UART_RxCpltCallback+0x1be>
			{

				// Extract values from the received string
				sscanf(rx_buffer, "P%dA%dA%dA%dA%dA%dA%dA%dAZ",
 8001f16:	4b89      	ldr	r3, [pc, #548]	; (800213c <HAL_UART_RxCpltCallback+0x260>)
 8001f18:	9305      	str	r3, [sp, #20]
 8001f1a:	4b89      	ldr	r3, [pc, #548]	; (8002140 <HAL_UART_RxCpltCallback+0x264>)
 8001f1c:	9304      	str	r3, [sp, #16]
 8001f1e:	4b89      	ldr	r3, [pc, #548]	; (8002144 <HAL_UART_RxCpltCallback+0x268>)
 8001f20:	9303      	str	r3, [sp, #12]
 8001f22:	4b89      	ldr	r3, [pc, #548]	; (8002148 <HAL_UART_RxCpltCallback+0x26c>)
 8001f24:	9302      	str	r3, [sp, #8]
 8001f26:	4b89      	ldr	r3, [pc, #548]	; (800214c <HAL_UART_RxCpltCallback+0x270>)
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	4b89      	ldr	r3, [pc, #548]	; (8002150 <HAL_UART_RxCpltCallback+0x274>)
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	4b89      	ldr	r3, [pc, #548]	; (8002154 <HAL_UART_RxCpltCallback+0x278>)
 8001f30:	4a89      	ldr	r2, [pc, #548]	; (8002158 <HAL_UART_RxCpltCallback+0x27c>)
 8001f32:	498a      	ldr	r1, [pc, #552]	; (800215c <HAL_UART_RxCpltCallback+0x280>)
 8001f34:	488a      	ldr	r0, [pc, #552]	; (8002160 <HAL_UART_RxCpltCallback+0x284>)
 8001f36:	f008 f9dd 	bl	800a2f4 <siscanf>
					   &P1t, &I1t, &D1t, &P2t, &I2t, &D2t, &dzt, &voltageLim);

				printf("%s\n", rx_buffer);
 8001f3a:	4889      	ldr	r0, [pc, #548]	; (8002160 <HAL_UART_RxCpltCallback+0x284>)
 8001f3c:	f008 f9b2 	bl	800a2a4 <puts>

				// divide dead zone;
				dz = dzt/1000.0;
 8001f40:	4b7f      	ldr	r3, [pc, #508]	; (8002140 <HAL_UART_RxCpltCallback+0x264>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe faed 	bl	8000524 <__aeabi_i2d>
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	4b85      	ldr	r3, [pc, #532]	; (8002164 <HAL_UART_RxCpltCallback+0x288>)
 8001f50:	f7fe fc7c 	bl	800084c <__aeabi_ddiv>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4983      	ldr	r1, [pc, #524]	; (8002168 <HAL_UART_RxCpltCallback+0x28c>)
 8001f5a:	e9c1 2300 	strd	r2, r3, [r1]

				// Reset the buffer and index for the next message
				memset(rx_buffer, 0, sizeof(rx_buffer));
 8001f5e:	2264      	movs	r2, #100	; 0x64
 8001f60:	2100      	movs	r1, #0
 8001f62:	487f      	ldr	r0, [pc, #508]	; (8002160 <HAL_UART_RxCpltCallback+0x284>)
 8001f64:	f008 facc 	bl	800a500 <memset>
				rx_index = 0;
 8001f68:	4b80      	ldr	r3, [pc, #512]	; (800216c <HAL_UART_RxCpltCallback+0x290>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]


				if(!(swingUpFlag || swingDownFlag)) {
 8001f6e:	4b80      	ldr	r3, [pc, #512]	; (8002170 <HAL_UART_RxCpltCallback+0x294>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 808d 	bne.w	8002092 <HAL_UART_RxCpltCallback+0x1b6>
 8001f78:	4b7e      	ldr	r3, [pc, #504]	; (8002174 <HAL_UART_RxCpltCallback+0x298>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f040 8088 	bne.w	8002092 <HAL_UART_RxCpltCallback+0x1b6>
					Controller_SetTunings(&arm_controller, P2t/1000.0, I2t/1000.0, D2t/1000.0);
 8001f82:	4b72      	ldr	r3, [pc, #456]	; (800214c <HAL_UART_RxCpltCallback+0x270>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe facc 	bl	8000524 <__aeabi_i2d>
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	4b74      	ldr	r3, [pc, #464]	; (8002164 <HAL_UART_RxCpltCallback+0x288>)
 8001f92:	f7fe fc5b 	bl	800084c <__aeabi_ddiv>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	ec43 2b18 	vmov	d8, r2, r3
 8001f9e:	4b6a      	ldr	r3, [pc, #424]	; (8002148 <HAL_UART_RxCpltCallback+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fabe 	bl	8000524 <__aeabi_i2d>
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	4b6d      	ldr	r3, [pc, #436]	; (8002164 <HAL_UART_RxCpltCallback+0x288>)
 8001fae:	f7fe fc4d 	bl	800084c <__aeabi_ddiv>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	ec43 2b19 	vmov	d9, r2, r3
 8001fba:	4b62      	ldr	r3, [pc, #392]	; (8002144 <HAL_UART_RxCpltCallback+0x268>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fab0 	bl	8000524 <__aeabi_i2d>
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	4b66      	ldr	r3, [pc, #408]	; (8002164 <HAL_UART_RxCpltCallback+0x288>)
 8001fca:	f7fe fc3f 	bl	800084c <__aeabi_ddiv>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	ec43 2b17 	vmov	d7, r2, r3
 8001fd6:	eeb0 2a47 	vmov.f32	s4, s14
 8001fda:	eef0 2a67 	vmov.f32	s5, s15
 8001fde:	eeb0 1a49 	vmov.f32	s2, s18
 8001fe2:	eef0 1a69 	vmov.f32	s3, s19
 8001fe6:	eeb0 0a48 	vmov.f32	s0, s16
 8001fea:	eef0 0a68 	vmov.f32	s1, s17
 8001fee:	4862      	ldr	r0, [pc, #392]	; (8002178 <HAL_UART_RxCpltCallback+0x29c>)
 8001ff0:	f7ff f87e 	bl	80010f0 <Controller_SetTunings>
					Controller_SetTunings(&pend_controller, P1t/1000.0, I1t/1000.0, D1t/1000.0);
 8001ff4:	4b58      	ldr	r3, [pc, #352]	; (8002158 <HAL_UART_RxCpltCallback+0x27c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fa93 	bl	8000524 <__aeabi_i2d>
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	4b58      	ldr	r3, [pc, #352]	; (8002164 <HAL_UART_RxCpltCallback+0x288>)
 8002004:	f7fe fc22 	bl	800084c <__aeabi_ddiv>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	ec43 2b18 	vmov	d8, r2, r3
 8002010:	4b50      	ldr	r3, [pc, #320]	; (8002154 <HAL_UART_RxCpltCallback+0x278>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fa85 	bl	8000524 <__aeabi_i2d>
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	4b51      	ldr	r3, [pc, #324]	; (8002164 <HAL_UART_RxCpltCallback+0x288>)
 8002020:	f7fe fc14 	bl	800084c <__aeabi_ddiv>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	ec43 2b19 	vmov	d9, r2, r3
 800202c:	4b48      	ldr	r3, [pc, #288]	; (8002150 <HAL_UART_RxCpltCallback+0x274>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fa77 	bl	8000524 <__aeabi_i2d>
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	4b4a      	ldr	r3, [pc, #296]	; (8002164 <HAL_UART_RxCpltCallback+0x288>)
 800203c:	f7fe fc06 	bl	800084c <__aeabi_ddiv>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	ec43 2b17 	vmov	d7, r2, r3
 8002048:	eeb0 2a47 	vmov.f32	s4, s14
 800204c:	eef0 2a67 	vmov.f32	s5, s15
 8002050:	eeb0 1a49 	vmov.f32	s2, s18
 8002054:	eef0 1a69 	vmov.f32	s3, s19
 8002058:	eeb0 0a48 	vmov.f32	s0, s16
 800205c:	eef0 0a68 	vmov.f32	s1, s17
 8002060:	4846      	ldr	r0, [pc, #280]	; (800217c <HAL_UART_RxCpltCallback+0x2a0>)
 8002062:	f7ff f845 	bl	80010f0 <Controller_SetTunings>
					Controller_SetOutputLimits(&pend_controller, -voltageLim, voltageLim);
 8002066:	4b35      	ldr	r3, [pc, #212]	; (800213c <HAL_UART_RxCpltCallback+0x260>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	425b      	negs	r3, r3
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fa59 	bl	8000524 <__aeabi_i2d>
 8002072:	4604      	mov	r4, r0
 8002074:	460d      	mov	r5, r1
 8002076:	4b31      	ldr	r3, [pc, #196]	; (800213c <HAL_UART_RxCpltCallback+0x260>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fa52 	bl	8000524 <__aeabi_i2d>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	ec43 2b11 	vmov	d1, r2, r3
 8002088:	ec45 4b10 	vmov	d0, r4, r5
 800208c:	483b      	ldr	r0, [pc, #236]	; (800217c <HAL_UART_RxCpltCallback+0x2a0>)
 800208e:	f7ff f817 	bl	80010c0 <Controller_SetOutputLimits>
				}

				paramStringFlag = 0;
 8002092:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_UART_RxCpltCallback+0x25c>)
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	e03e      	b.n	8002118 <HAL_UART_RxCpltCallback+0x23c>
			}

			else
			{
				// Add the received character to the buffer
				rx_buffer[rx_index++] = rx_data;
 800209a:	4b34      	ldr	r3, [pc, #208]	; (800216c <HAL_UART_RxCpltCallback+0x290>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	4932      	ldr	r1, [pc, #200]	; (800216c <HAL_UART_RxCpltCallback+0x290>)
 80020a2:	600a      	str	r2, [r1, #0]
 80020a4:	4a23      	ldr	r2, [pc, #140]	; (8002134 <HAL_UART_RxCpltCallback+0x258>)
 80020a6:	7811      	ldrb	r1, [r2, #0]
 80020a8:	4a2d      	ldr	r2, [pc, #180]	; (8002160 <HAL_UART_RxCpltCallback+0x284>)
 80020aa:	54d1      	strb	r1, [r2, r3]
 80020ac:	e034      	b.n	8002118 <HAL_UART_RxCpltCallback+0x23c>

			}
    	}

    	// Swing up pendulum
    	else if(rx_data == 'U') {
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_UART_RxCpltCallback+0x258>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b55      	cmp	r3, #85	; 0x55
 80020b4:	d102      	bne.n	80020bc <HAL_UART_RxCpltCallback+0x1e0>
    		swingUpPendulum();
 80020b6:	f7ff f917 	bl	80012e8 <swingUpPendulum>
 80020ba:	e02d      	b.n	8002118 <HAL_UART_RxCpltCallback+0x23c>
    	}

    	// Swing down pendulum
    	else if(rx_data == 'D') {
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_UART_RxCpltCallback+0x258>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b44      	cmp	r3, #68	; 0x44
 80020c2:	d102      	bne.n	80020ca <HAL_UART_RxCpltCallback+0x1ee>
    		swingDownPendulum();
 80020c4:	f7ff f9b8 	bl	8001438 <swingDownPendulum>
 80020c8:	e026      	b.n	8002118 <HAL_UART_RxCpltCallback+0x23c>
    	}

    	else if(rx_data == 'Y') {
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <HAL_UART_RxCpltCallback+0x258>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b59      	cmp	r3, #89	; 0x59
 80020d0:	d10f      	bne.n	80020f2 <HAL_UART_RxCpltCallback+0x216>
    		*arm_controller.Setpoint += 90;
 80020d2:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_UART_RxCpltCallback+0x29c>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020da:	4b27      	ldr	r3, [pc, #156]	; (8002178 <HAL_UART_RxCpltCallback+0x29c>)
 80020dc:	689c      	ldr	r4, [r3, #8]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	4b27      	ldr	r3, [pc, #156]	; (8002180 <HAL_UART_RxCpltCallback+0x2a4>)
 80020e4:	f7fe f8d2 	bl	800028c <__adddf3>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	e9c4 2300 	strd	r2, r3, [r4]
 80020f0:	e012      	b.n	8002118 <HAL_UART_RxCpltCallback+0x23c>
    	}

    	else if(rx_data == 'J') {
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_UART_RxCpltCallback+0x258>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b4a      	cmp	r3, #74	; 0x4a
 80020f8:	d10e      	bne.n	8002118 <HAL_UART_RxCpltCallback+0x23c>
    		*arm_controller.Setpoint -= 90;
 80020fa:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <HAL_UART_RxCpltCallback+0x29c>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002102:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_UART_RxCpltCallback+0x29c>)
 8002104:	689c      	ldr	r4, [r3, #8]
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_UART_RxCpltCallback+0x2a4>)
 800210c:	f7fe f8bc 	bl	8000288 <__aeabi_dsub>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	e9c4 2300 	strd	r2, r3, [r4]
    	}

    	// Enable UART to receive another byte
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8002118:	2201      	movs	r2, #1
 800211a:	4906      	ldr	r1, [pc, #24]	; (8002134 <HAL_UART_RxCpltCallback+0x258>)
 800211c:	4819      	ldr	r0, [pc, #100]	; (8002184 <HAL_UART_RxCpltCallback+0x2a8>)
 800211e:	f004 f991 	bl	8006444 <HAL_UART_Receive_IT>
    }
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	ecbd 8b04 	vpop	{d8-d9}
 800212c:	bdb0      	pop	{r4, r5, r7, pc}
 800212e:	bf00      	nop
 8002130:	40004400 	.word	0x40004400
 8002134:	2000076c 	.word	0x2000076c
 8002138:	200006e5 	.word	0x200006e5
 800213c:	20000704 	.word	0x20000704
 8002140:	20000700 	.word	0x20000700
 8002144:	200006fc 	.word	0x200006fc
 8002148:	200006f8 	.word	0x200006f8
 800214c:	200006f4 	.word	0x200006f4
 8002150:	200006f0 	.word	0x200006f0
 8002154:	200006ec 	.word	0x200006ec
 8002158:	200006e8 	.word	0x200006e8
 800215c:	0800cf7c 	.word	0x0800cf7c
 8002160:	20000708 	.word	0x20000708
 8002164:	408f4000 	.word	0x408f4000
 8002168:	20000028 	.word	0x20000028
 800216c:	20000770 	.word	0x20000770
 8002170:	200006e3 	.word	0x200006e3
 8002174:	200006e1 	.word	0x200006e1
 8002178:	20000650 	.word	0x20000650
 800217c:	200005f8 	.word	0x200005f8
 8002180:	40568000 	.word	0x40568000
 8002184:	2000055c 	.word	0x2000055c

08002188 <computeControlEffort>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_computeControlEffort */
void computeControlEffort(void const * argument)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	ed2d 8b04 	vpush	{d8-d9}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

	for(;;)
	{

		// Refresh device position values
		updatePendulumState(TIM2->CNT, TIM3->CNT);
 8002194:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	4a9d      	ldr	r2, [pc, #628]	; (8002410 <computeControlEffort+0x288>)
 800219c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f849 	bl	8001238 <updatePendulumState>

		// Calculate velocity of pendulum and motor
		if(velCount++ == VEL_SAMPLE_PERIOD){
 80021a6:	4b9b      	ldr	r3, [pc, #620]	; (8002414 <computeControlEffort+0x28c>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	b2d1      	uxtb	r1, r2
 80021ae:	4a99      	ldr	r2, [pc, #612]	; (8002414 <computeControlEffort+0x28c>)
 80021b0:	7011      	strb	r1, [r2, #0]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d128      	bne.n	8002208 <computeControlEffort+0x80>

			pendCurrVel = calculateVelocity(&pendCurrPos, &pendPrevPos, VEL_SAMPLE_PERIOD);
 80021b6:	ed9f 0b90 	vldr	d0, [pc, #576]	; 80023f8 <computeControlEffort+0x270>
 80021ba:	4997      	ldr	r1, [pc, #604]	; (8002418 <computeControlEffort+0x290>)
 80021bc:	4897      	ldr	r0, [pc, #604]	; (800241c <computeControlEffort+0x294>)
 80021be:	f7ff f909 	bl	80013d4 <calculateVelocity>
 80021c2:	eeb0 7a40 	vmov.f32	s14, s0
 80021c6:	eef0 7a60 	vmov.f32	s15, s1
 80021ca:	4b95      	ldr	r3, [pc, #596]	; (8002420 <computeControlEffort+0x298>)
 80021cc:	ed83 7b00 	vstr	d7, [r3]
			armCurrVel = calculateVelocity(&armCurrPos, &armPrevPos, VEL_SAMPLE_PERIOD);
 80021d0:	ed9f 0b89 	vldr	d0, [pc, #548]	; 80023f8 <computeControlEffort+0x270>
 80021d4:	4993      	ldr	r1, [pc, #588]	; (8002424 <computeControlEffort+0x29c>)
 80021d6:	4894      	ldr	r0, [pc, #592]	; (8002428 <computeControlEffort+0x2a0>)
 80021d8:	f7ff f8fc 	bl	80013d4 <calculateVelocity>
 80021dc:	eeb0 7a40 	vmov.f32	s14, s0
 80021e0:	eef0 7a60 	vmov.f32	s15, s1
 80021e4:	4b91      	ldr	r3, [pc, #580]	; (800242c <computeControlEffort+0x2a4>)
 80021e6:	ed83 7b00 	vstr	d7, [r3]

			// Update Pendulum Position
			pendPrevPos = pendCurrPos;
 80021ea:	4b8c      	ldr	r3, [pc, #560]	; (800241c <computeControlEffort+0x294>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	4989      	ldr	r1, [pc, #548]	; (8002418 <computeControlEffort+0x290>)
 80021f2:	e9c1 2300 	strd	r2, r3, [r1]
			armPrevPos = armCurrPos;
 80021f6:	4b8c      	ldr	r3, [pc, #560]	; (8002428 <computeControlEffort+0x2a0>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	4989      	ldr	r1, [pc, #548]	; (8002424 <computeControlEffort+0x29c>)
 80021fe:	e9c1 2300 	strd	r2, r3, [r1]

			// Reset velocity period counter
			velCount = 0;
 8002202:	4b84      	ldr	r3, [pc, #528]	; (8002414 <computeControlEffort+0x28c>)
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
		}

		// Swing up and balance is enabled
		if(balanceState) {
 8002208:	4b89      	ldr	r3, [pc, #548]	; (8002430 <computeControlEffort+0x2a8>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 81c6 	beq.w	800259e <computeControlEffort+0x416>

			// Swing up
			if(swingUpFlag) {
 8002212:	4b88      	ldr	r3, [pc, #544]	; (8002434 <computeControlEffort+0x2ac>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <computeControlEffort+0xa0>
				swingUpControl();
 800221a:	f7ff fa29 	bl	8001670 <swingUpControl>

				// Delay entering the balancing loop until the pendulum has started to move
				swingUpCount++;
 800221e:	4b86      	ldr	r3, [pc, #536]	; (8002438 <computeControlEffort+0x2b0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	3301      	adds	r3, #1
 8002224:	4a84      	ldr	r2, [pc, #528]	; (8002438 <computeControlEffort+0x2b0>)
 8002226:	6013      	str	r3, [r2, #0]
			}

			//Balance pendulum
			if (swingUpCount > SWINGUP_DELAY && !swingDownFlag && ((abs(pendCurrPos) < disturbance_threshold) || ((abs(pendCurrVel) < VELOCITY_SWINGUP_THRESH || pendCurrPos > 0))))
 8002228:	4b83      	ldr	r3, [pc, #524]	; (8002438 <computeControlEffort+0x2b0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b19      	cmp	r3, #25
 800222e:	f240 80c3 	bls.w	80023b8 <computeControlEffort+0x230>
 8002232:	4b82      	ldr	r3, [pc, #520]	; (800243c <computeControlEffort+0x2b4>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 80be 	bne.w	80023b8 <computeControlEffort+0x230>
 800223c:	4b77      	ldr	r3, [pc, #476]	; (800241c <computeControlEffort+0x294>)
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	f7fe fc87 	bl	8000b58 <__aeabi_d2iz>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	bfb8      	it	lt
 8002250:	425b      	neglt	r3, r3
 8002252:	4a7b      	ldr	r2, [pc, #492]	; (8002440 <computeControlEffort+0x2b8>)
 8002254:	7812      	ldrb	r2, [r2, #0]
 8002256:	4293      	cmp	r3, r2
 8002258:	db20      	blt.n	800229c <computeControlEffort+0x114>
 800225a:	4b71      	ldr	r3, [pc, #452]	; (8002420 <computeControlEffort+0x298>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	4610      	mov	r0, r2
 8002262:	4619      	mov	r1, r3
 8002264:	f7fe fc78 	bl	8000b58 <__aeabi_d2iz>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	db09      	blt.n	8002282 <computeControlEffort+0xfa>
 800226e:	4b6c      	ldr	r3, [pc, #432]	; (8002420 <computeControlEffort+0x298>)
 8002270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f7fe fc6e 	bl	8000b58 <__aeabi_d2iz>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	dd0c      	ble.n	800229c <computeControlEffort+0x114>
 8002282:	4b66      	ldr	r3, [pc, #408]	; (800241c <computeControlEffort+0x294>)
 8002284:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	f7fe fc42 	bl	8000b18 <__aeabi_dcmpgt>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 808e 	beq.w	80023b8 <computeControlEffort+0x230>
			{
				// Reset flag once swing up is complete and update control parameters and disturbance threshold
				if(swingUpFlag)
 800229c:	4b65      	ldr	r3, [pc, #404]	; (8002434 <computeControlEffort+0x2ac>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 8086 	beq.w	80023b2 <computeControlEffort+0x22a>
				{
					swingUpFlag = 0;
 80022a6:	4b63      	ldr	r3, [pc, #396]	; (8002434 <computeControlEffort+0x2ac>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
					Controller_SetTunings(&arm_controller, P2t/1000.0, I2t/1000.0, D2t/1000.0);
 80022ac:	4b65      	ldr	r3, [pc, #404]	; (8002444 <computeControlEffort+0x2bc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f937 	bl	8000524 <__aeabi_i2d>
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <computeControlEffort+0x2c0>)
 80022bc:	f7fe fac6 	bl	800084c <__aeabi_ddiv>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	ec43 2b18 	vmov	d8, r2, r3
 80022c8:	4b60      	ldr	r3, [pc, #384]	; (800244c <computeControlEffort+0x2c4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f929 	bl	8000524 <__aeabi_i2d>
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	4b5c      	ldr	r3, [pc, #368]	; (8002448 <computeControlEffort+0x2c0>)
 80022d8:	f7fe fab8 	bl	800084c <__aeabi_ddiv>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	ec43 2b19 	vmov	d9, r2, r3
 80022e4:	4b5a      	ldr	r3, [pc, #360]	; (8002450 <computeControlEffort+0x2c8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe f91b 	bl	8000524 <__aeabi_i2d>
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	4b55      	ldr	r3, [pc, #340]	; (8002448 <computeControlEffort+0x2c0>)
 80022f4:	f7fe faaa 	bl	800084c <__aeabi_ddiv>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	ec43 2b17 	vmov	d7, r2, r3
 8002300:	eeb0 2a47 	vmov.f32	s4, s14
 8002304:	eef0 2a67 	vmov.f32	s5, s15
 8002308:	eeb0 1a49 	vmov.f32	s2, s18
 800230c:	eef0 1a69 	vmov.f32	s3, s19
 8002310:	eeb0 0a48 	vmov.f32	s0, s16
 8002314:	eef0 0a68 	vmov.f32	s1, s17
 8002318:	484e      	ldr	r0, [pc, #312]	; (8002454 <computeControlEffort+0x2cc>)
 800231a:	f7fe fee9 	bl	80010f0 <Controller_SetTunings>
					Controller_SetTunings(&pend_controller, P1t/1000.0, I1t/1000.0, D1t/1000.0);
 800231e:	4b4e      	ldr	r3, [pc, #312]	; (8002458 <computeControlEffort+0x2d0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f8fe 	bl	8000524 <__aeabi_i2d>
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	4b46      	ldr	r3, [pc, #280]	; (8002448 <computeControlEffort+0x2c0>)
 800232e:	f7fe fa8d 	bl	800084c <__aeabi_ddiv>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	ec43 2b18 	vmov	d8, r2, r3
 800233a:	4b48      	ldr	r3, [pc, #288]	; (800245c <computeControlEffort+0x2d4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe f8f0 	bl	8000524 <__aeabi_i2d>
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	4b3f      	ldr	r3, [pc, #252]	; (8002448 <computeControlEffort+0x2c0>)
 800234a:	f7fe fa7f 	bl	800084c <__aeabi_ddiv>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	ec43 2b19 	vmov	d9, r2, r3
 8002356:	4b42      	ldr	r3, [pc, #264]	; (8002460 <computeControlEffort+0x2d8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe f8e2 	bl	8000524 <__aeabi_i2d>
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	4b38      	ldr	r3, [pc, #224]	; (8002448 <computeControlEffort+0x2c0>)
 8002366:	f7fe fa71 	bl	800084c <__aeabi_ddiv>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	ec43 2b17 	vmov	d7, r2, r3
 8002372:	eeb0 2a47 	vmov.f32	s4, s14
 8002376:	eef0 2a67 	vmov.f32	s5, s15
 800237a:	eeb0 1a49 	vmov.f32	s2, s18
 800237e:	eef0 1a69 	vmov.f32	s3, s19
 8002382:	eeb0 0a48 	vmov.f32	s0, s16
 8002386:	eef0 0a68 	vmov.f32	s1, s17
 800238a:	4836      	ldr	r0, [pc, #216]	; (8002464 <computeControlEffort+0x2dc>)
 800238c:	f7fe feb0 	bl	80010f0 <Controller_SetTunings>
					Controller_SetOutputLimits(&arm_controller, -ARM_CONTROL_LIMIT, ARM_CONTROL_LIMIT);
 8002390:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8002400 <computeControlEffort+0x278>
 8002394:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002408 <computeControlEffort+0x280>
 8002398:	482e      	ldr	r0, [pc, #184]	; (8002454 <computeControlEffort+0x2cc>)
 800239a:	f7fe fe91 	bl	80010c0 <Controller_SetOutputLimits>
					disturbance_threshold = MAX_DISTURBANCE;
 800239e:	4b28      	ldr	r3, [pc, #160]	; (8002440 <computeControlEffort+0x2b8>)
 80023a0:	2225      	movs	r2, #37	; 0x25
 80023a2:	701a      	strb	r2, [r3, #0]
					armSetPoint = 0;
 80023a4:	4930      	ldr	r1, [pc, #192]	; (8002468 <computeControlEffort+0x2e0>)
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e9c1 2300 	strd	r2, r3, [r1]
				}

				// Compute balancing control effort
				balanceControl();
 80023b2:	f7ff f9d5 	bl	8001760 <balanceControl>
 80023b6:	e102      	b.n	80025be <computeControlEffort+0x436>
			}

			else if(swingDownFlag) {
 80023b8:	4b20      	ldr	r3, [pc, #128]	; (800243c <computeControlEffort+0x2b4>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80e4 	beq.w	800258a <computeControlEffort+0x402>

				if(swingDownCount++ < SWINGDOWN_DELAY) {
 80023c2:	4b2a      	ldr	r3, [pc, #168]	; (800246c <computeControlEffort+0x2e4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	4928      	ldr	r1, [pc, #160]	; (800246c <computeControlEffort+0x2e4>)
 80023ca:	600a      	str	r2, [r1, #0]
 80023cc:	2b13      	cmp	r3, #19
 80023ce:	d851      	bhi.n	8002474 <computeControlEffort+0x2ec>
					HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_RESET);
 80023d0:	2200      	movs	r2, #0
 80023d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023da:	f001 f831 	bl	8003440 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_SET);
 80023de:	2201      	movs	r2, #1
 80023e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e8:	f001 f82a 	bl	8003440 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, SWINGDOWN_INIT_DUTY);
 80023ec:	4b20      	ldr	r3, [pc, #128]	; (8002470 <computeControlEffort+0x2e8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80023f4:	639a      	str	r2, [r3, #56]	; 0x38
 80023f6:	e0e2      	b.n	80025be <computeControlEffort+0x436>
 80023f8:	00000000 	.word	0x00000000
 80023fc:	40000000 	.word	0x40000000
 8002400:	00000000 	.word	0x00000000
 8002404:	40668000 	.word	0x40668000
 8002408:	00000000 	.word	0x00000000
 800240c:	c0668000 	.word	0xc0668000
 8002410:	40000400 	.word	0x40000400
 8002414:	200006e2 	.word	0x200006e2
 8002418:	200006c0 	.word	0x200006c0
 800241c:	20000780 	.word	0x20000780
 8002420:	200006c8 	.word	0x200006c8
 8002424:	200006d0 	.word	0x200006d0
 8002428:	20000788 	.word	0x20000788
 800242c:	200006d8 	.word	0x200006d8
 8002430:	200006e4 	.word	0x200006e4
 8002434:	200006e3 	.word	0x200006e3
 8002438:	20000774 	.word	0x20000774
 800243c:	200006e1 	.word	0x200006e1
 8002440:	200006b8 	.word	0x200006b8
 8002444:	200006f4 	.word	0x200006f4
 8002448:	408f4000 	.word	0x408f4000
 800244c:	200006f8 	.word	0x200006f8
 8002450:	200006fc 	.word	0x200006fc
 8002454:	20000650 	.word	0x20000650
 8002458:	200006e8 	.word	0x200006e8
 800245c:	200006ec 	.word	0x200006ec
 8002460:	200006f0 	.word	0x200006f0
 8002464:	200005f8 	.word	0x200005f8
 8002468:	200007a8 	.word	0x200007a8
 800246c:	20000778 	.word	0x20000778
 8002470:	20000510 	.word	0x20000510
				}

				else if(abs(pendCurrPos) > SWINGDOWN_THRESH || abs(armCurrPos) > SWINGDOWN_THRESH || abs(pendCurrVel) > VELOCITY_SWINGUP_THRESH || abs(armCurrVel) > VELOCITY_SWINGUP_THRESH){
 8002474:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <computeControlEffort+0x448>)
 8002476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	f7fe fb6b 	bl	8000b58 <__aeabi_d2iz>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	bfb8      	it	lt
 8002488:	425b      	neglt	r3, r3
 800248a:	2b01      	cmp	r3, #1
 800248c:	dc26      	bgt.n	80024dc <computeControlEffort+0x354>
 800248e:	4b51      	ldr	r3, [pc, #324]	; (80025d4 <computeControlEffort+0x44c>)
 8002490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f7fe fb5e 	bl	8000b58 <__aeabi_d2iz>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bfb8      	it	lt
 80024a2:	425b      	neglt	r3, r3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	dc19      	bgt.n	80024dc <computeControlEffort+0x354>
 80024a8:	4b4b      	ldr	r3, [pc, #300]	; (80025d8 <computeControlEffort+0x450>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f7fe fb51 	bl	8000b58 <__aeabi_d2iz>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bfb8      	it	lt
 80024bc:	425b      	neglt	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	dc0c      	bgt.n	80024dc <computeControlEffort+0x354>
 80024c2:	4b46      	ldr	r3, [pc, #280]	; (80025dc <computeControlEffort+0x454>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	f7fe fb44 	bl	8000b58 <__aeabi_d2iz>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bfb8      	it	lt
 80024d6:	425b      	neglt	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	dd49      	ble.n	8002570 <computeControlEffort+0x3e8>

					if(posOffsetFlag){
 80024dc:	4b40      	ldr	r3, [pc, #256]	; (80025e0 <computeControlEffort+0x458>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d02d      	beq.n	8002540 <computeControlEffort+0x3b8>
						// Refresh pendulum values
						updatePendulumState(TIM2->CNT, TIM3->CNT);
 80024e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	4a3e      	ldr	r2, [pc, #248]	; (80025e4 <computeControlEffort+0x45c>)
 80024ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fea1 	bl	8001238 <updatePendulumState>

						// Adjust based on new set point in stable position
						netPositionPend += 180.0/STEPS_TO_DEG;
 80024f6:	4b3c      	ldr	r3, [pc, #240]	; (80025e8 <computeControlEffort+0x460>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe f812 	bl	8000524 <__aeabi_i2d>
 8002500:	a331      	add	r3, pc, #196	; (adr r3, 80025c8 <computeControlEffort+0x440>)
 8002502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002506:	f7fd fec1 	bl	800028c <__adddf3>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4610      	mov	r0, r2
 8002510:	4619      	mov	r1, r3
 8002512:	f7fe fb21 	bl	8000b58 <__aeabi_d2iz>
 8002516:	4603      	mov	r3, r0
 8002518:	4a33      	ldr	r2, [pc, #204]	; (80025e8 <computeControlEffort+0x460>)
 800251a:	6013      	str	r3, [r2, #0]

						// Halt the motor
						HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
 800251e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002526:	f000 ff8b 	bl	8003440 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_RESET);
 800252a:	2200      	movs	r2, #0
 800252c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002534:	f000 ff84 	bl	8003440 <HAL_GPIO_WritePin>

						// Reset position offset flag
						posOffsetFlag = 0;
 8002538:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <computeControlEffort+0x458>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
					if(posOffsetFlag){
 800253e:	e03d      	b.n	80025bc <computeControlEffort+0x434>
					}

					// Don't begin active swing down controller until pendulum has naturally fallen below the midway point
					else if(abs(pendCurrPos) < SWINGDOWN_BEGIN_ANGLE) {
 8002540:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <computeControlEffort+0x448>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	f7fe fb05 	bl	8000b58 <__aeabi_d2iz>
 800254e:	4603      	mov	r3, r0
 8002550:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002554:	db32      	blt.n	80025bc <computeControlEffort+0x434>
 8002556:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <computeControlEffort+0x448>)
 8002558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	f7fe fafa 	bl	8000b58 <__aeabi_d2iz>
 8002564:	4603      	mov	r3, r0
 8002566:	2b54      	cmp	r3, #84	; 0x54
 8002568:	dc28      	bgt.n	80025bc <computeControlEffort+0x434>
						swingDownControl();
 800256a:	f7fe ffb1 	bl	80014d0 <swingDownControl>
					if(posOffsetFlag){
 800256e:	e025      	b.n	80025bc <computeControlEffort+0x434>
					}
				}

				// Pendulum is still in stable position, reset swing down flags and indicate that the pendulum is not balancing
				else {
					swingDownFlag = 0;
 8002570:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <computeControlEffort+0x464>)
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
					balanceState = 0;
 8002576:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <computeControlEffort+0x468>)
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
					swingDownCount = 0;
 800257c:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <computeControlEffort+0x46c>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
					swingUpCount = 0;
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <computeControlEffort+0x470>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e019      	b.n	80025be <computeControlEffort+0x436>
				}
			}


			else if(!swingUpFlag){
 800258a:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <computeControlEffort+0x474>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d115      	bne.n	80025be <computeControlEffort+0x436>
				// Reset balance flag to indicate pendulum is not balancing
				balanceState = 0;
 8002592:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <computeControlEffort+0x468>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
				checkFallDirection();
 8002598:	f7ff f812 	bl	80015c0 <checkFallDirection>
 800259c:	e00f      	b.n	80025be <computeControlEffort+0x436>
			}
		}

		else {
			// Brake Motor if outside of balancing range
			HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_RESET);
 800259e:	2200      	movs	r2, #0
 80025a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a8:	f000 ff4a 	bl	8003440 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_RESET);
 80025ac:	2200      	movs	r2, #0
 80025ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b6:	f000 ff43 	bl	8003440 <HAL_GPIO_WritePin>
 80025ba:	e000      	b.n	80025be <computeControlEffort+0x436>
					if(posOffsetFlag){
 80025bc:	bf00      	nop
		}

		// Thread sleep for sample time
		osDelay(SAMPLE_PERIOD);
 80025be:	2001      	movs	r0, #1
 80025c0:	f005 fa9b 	bl	8007afa <osDelay>
		updatePendulumState(TIM2->CNT, TIM3->CNT);
 80025c4:	e5e6      	b.n	8002194 <computeControlEffort+0xc>
 80025c6:	bf00      	nop
 80025c8:	0f455ff9 	.word	0x0f455ff9
 80025cc:	40b00000 	.word	0x40b00000
 80025d0:	20000780 	.word	0x20000780
 80025d4:	20000788 	.word	0x20000788
 80025d8:	200006c8 	.word	0x200006c8
 80025dc:	200006d8 	.word	0x200006d8
 80025e0:	200006e0 	.word	0x200006e0
 80025e4:	40000400 	.word	0x40000400
 80025e8:	200006b0 	.word	0x200006b0
 80025ec:	200006e1 	.word	0x200006e1
 80025f0:	200006e4 	.word	0x200006e4
 80025f4:	20000778 	.word	0x20000778
 80025f8:	20000774 	.word	0x20000774
 80025fc:	200006e3 	.word	0x200006e3

08002600 <sendData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendData */
void sendData(void const * argument)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  char tx_buf[30];

	  // Convert angles to string with two decimal places
	  sprintf(tx_buf, "%ldA%ldZ\n\r", netPositionArm, -1*netPositionPend);
 8002608:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <sendData+0x40>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <sendData+0x44>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	425b      	negs	r3, r3
 8002612:	f107 0008 	add.w	r0, r7, #8
 8002616:	490c      	ldr	r1, [pc, #48]	; (8002648 <sendData+0x48>)
 8002618:	f007 fe4c 	bl	800a2b4 <siprintf>

	  // Transmit the string via UART
	  HAL_UART_Transmit(&huart2, (uint8_t*)tx_buf, strlen(tx_buf), 100);
 800261c:	f107 0308 	add.w	r3, r7, #8
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd fe25 	bl	8000270 <strlen>
 8002626:	4603      	mov	r3, r0
 8002628:	b29a      	uxth	r2, r3
 800262a:	f107 0108 	add.w	r1, r7, #8
 800262e:	2364      	movs	r3, #100	; 0x64
 8002630:	4806      	ldr	r0, [pc, #24]	; (800264c <sendData+0x4c>)
 8002632:	f003 fe7d 	bl	8006330 <HAL_UART_Transmit>

      osDelay(20);
 8002636:	2014      	movs	r0, #20
 8002638:	f005 fa5f 	bl	8007afa <osDelay>
  {
 800263c:	e7e4      	b.n	8002608 <sendData+0x8>
 800263e:	bf00      	nop
 8002640:	200006b4 	.word	0x200006b4
 8002644:	200006b0 	.word	0x200006b0
 8002648:	0800cf98 	.word	0x0800cf98
 800264c:	2000055c 	.word	0x2000055c

08002650 <checkLimits>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_checkLimits */
void checkLimits(void const * argument)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN checkLimits */
  /* Infinite loop */
  for(;;)
  {
    osDelay(SAMPLE_PERIOD);
 8002658:	2001      	movs	r0, #1
 800265a:	f005 fa4e 	bl	8007afa <osDelay>

    // Shut down main motor if pendulum passes through physical limits
    if(abs(armCurrPos) > DEVICE_LIMIT) {
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <checkLimits+0x64>)
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	f7fe fa76 	bl	8000b58 <__aeabi_d2iz>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	bfb8      	it	lt
 8002672:	425b      	neglt	r3, r3
 8002674:	2baa      	cmp	r3, #170	; 0xaa
 8002676:	ddef      	ble.n	8002658 <checkLimits+0x8>
		HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_RESET);
 8002678:	2200      	movs	r2, #0
 800267a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800267e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002682:	f000 fedd 	bl	8003440 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_RESET);
 8002686:	2200      	movs	r2, #0
 8002688:	f44f 7100 	mov.w	r1, #512	; 0x200
 800268c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002690:	f000 fed6 	bl	8003440 <HAL_GPIO_WritePin>
		balanceState = 0;
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <checkLimits+0x68>)
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
		swingUpFlag = 0;
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <checkLimits+0x6c>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
		swingDownFlag = 0;
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <checkLimits+0x70>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
		swingUpCount = 0;
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <checkLimits+0x74>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
		swingDownCount = 0;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <checkLimits+0x78>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
    osDelay(SAMPLE_PERIOD);
 80026b2:	e7d1      	b.n	8002658 <checkLimits+0x8>
 80026b4:	20000788 	.word	0x20000788
 80026b8:	200006e4 	.word	0x200006e4
 80026bc:	200006e3 	.word	0x200006e3
 80026c0:	200006e1 	.word	0x200006e1
 80026c4:	20000774 	.word	0x20000774
 80026c8:	20000778 	.word	0x20000778

080026cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a04      	ldr	r2, [pc, #16]	; (80026ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026de:	f000 fb83 	bl	8002de8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40001000 	.word	0x40001000

080026f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026f4:	b672      	cpsid	i
}
 80026f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026f8:	e7fe      	b.n	80026f8 <Error_Handler+0x8>

080026fa <updateControllers>:
double I2 = 0.04;
double D2 = 0.07;
double dz = 2.75;
double parsedValues[9];

void updateControllers(PID_Controller * pend_PID, PID_Controller * arm_PID) {
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]

	 /* Update Control effort based on current state */
	 Controller_Compute(arm_PID);
 8002704:	6838      	ldr	r0, [r7, #0]
 8002706:	f7fe fc4d 	bl	8000fa4 <Controller_Compute>
	 Controller_Compute(pend_PID);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe fc4a 	bl	8000fa4 <Controller_Compute>
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271e:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_MspInit+0x4c>)
 8002720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002722:	4a10      	ldr	r2, [pc, #64]	; (8002764 <HAL_MspInit+0x4c>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6613      	str	r3, [r2, #96]	; 0x60
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <HAL_MspInit+0x4c>)
 800272c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_MspInit+0x4c>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <HAL_MspInit+0x4c>)
 800273c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002740:	6593      	str	r3, [r2, #88]	; 0x58
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <HAL_MspInit+0x4c>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	210f      	movs	r1, #15
 8002752:	f06f 0001 	mvn.w	r0, #1
 8002756:	f000 fc1f 	bl	8002f98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000

08002768 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08c      	sub	sp, #48	; 0x30
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 031c 	add.w	r3, r7, #28
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002788:	d131      	bne.n	80027ee <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800278a:	4b36      	ldr	r3, [pc, #216]	; (8002864 <HAL_TIM_Encoder_MspInit+0xfc>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	4a35      	ldr	r2, [pc, #212]	; (8002864 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6593      	str	r3, [r2, #88]	; 0x58
 8002796:	4b33      	ldr	r3, [pc, #204]	; (8002864 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a2:	4b30      	ldr	r3, [pc, #192]	; (8002864 <HAL_TIM_Encoder_MspInit+0xfc>)
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	4a2f      	ldr	r2, [pc, #188]	; (8002864 <HAL_TIM_Encoder_MspInit+0xfc>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ae:	4b2d      	ldr	r3, [pc, #180]	; (8002864 <HAL_TIM_Encoder_MspInit+0xfc>)
 80027b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027ba:	2303      	movs	r3, #3
 80027bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027ca:	2301      	movs	r3, #1
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ce:	f107 031c 	add.w	r3, r7, #28
 80027d2:	4619      	mov	r1, r3
 80027d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d8:	f000 fc88 	bl	80030ec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80027dc:	2200      	movs	r2, #0
 80027de:	2105      	movs	r1, #5
 80027e0:	201c      	movs	r0, #28
 80027e2:	f000 fbd9 	bl	8002f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027e6:	201c      	movs	r0, #28
 80027e8:	f000 fbf2 	bl	8002fd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027ec:	e035      	b.n	800285a <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM3)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <HAL_TIM_Encoder_MspInit+0x100>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d130      	bne.n	800285a <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027f8:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <HAL_TIM_Encoder_MspInit+0xfc>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	4a19      	ldr	r2, [pc, #100]	; (8002864 <HAL_TIM_Encoder_MspInit+0xfc>)
 80027fe:	f043 0302 	orr.w	r3, r3, #2
 8002802:	6593      	str	r3, [r2, #88]	; 0x58
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002810:	4b14      	ldr	r3, [pc, #80]	; (8002864 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	4a13      	ldr	r2, [pc, #76]	; (8002864 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_TIM_Encoder_MspInit+0xfc>)
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002828:	23c0      	movs	r3, #192	; 0xc0
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002834:	2300      	movs	r3, #0
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002838:	2302      	movs	r3, #2
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	4619      	mov	r1, r3
 8002842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002846:	f000 fc51 	bl	80030ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2105      	movs	r1, #5
 800284e:	201d      	movs	r0, #29
 8002850:	f000 fba2 	bl	8002f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002854:	201d      	movs	r0, #29
 8002856:	f000 fbbb 	bl	8002fd0 <HAL_NVIC_EnableIRQ>
}
 800285a:	bf00      	nop
 800285c:	3730      	adds	r7, #48	; 0x30
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	40000400 	.word	0x40000400

0800286c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <HAL_TIM_Base_MspInit+0x38>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10b      	bne.n	8002896 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_TIM_Base_MspInit+0x3c>)
 8002880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002882:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <HAL_TIM_Base_MspInit+0x3c>)
 8002884:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002888:	6613      	str	r3, [r2, #96]	; 0x60
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <HAL_TIM_Base_MspInit+0x3c>)
 800288c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40013400 	.word	0x40013400
 80028a8:	40021000 	.word	0x40021000

080028ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 030c 	add.w	r3, r7, #12
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a11      	ldr	r2, [pc, #68]	; (8002910 <HAL_TIM_MspPostInit+0x64>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d11b      	bne.n	8002906 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_TIM_MspPostInit+0x68>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HAL_TIM_MspPostInit+0x68>)
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <HAL_TIM_MspPostInit+0x68>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028ee:	2302      	movs	r3, #2
 80028f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80028f6:	2303      	movs	r3, #3
 80028f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fa:	f107 030c 	add.w	r3, r7, #12
 80028fe:	4619      	mov	r1, r3
 8002900:	4805      	ldr	r0, [pc, #20]	; (8002918 <HAL_TIM_MspPostInit+0x6c>)
 8002902:	f000 fbf3 	bl	80030ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002906:	bf00      	nop
 8002908:	3720      	adds	r7, #32
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40013400 	.word	0x40013400
 8002914:	40021000 	.word	0x40021000
 8002918:	48000800 	.word	0x48000800

0800291c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b0ac      	sub	sp, #176	; 0xb0
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	2288      	movs	r2, #136	; 0x88
 800293a:	2100      	movs	r1, #0
 800293c:	4618      	mov	r0, r3
 800293e:	f007 fddf 	bl	800a500 <memset>
  if(huart->Instance==USART2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a25      	ldr	r2, [pc, #148]	; (80029dc <HAL_UART_MspInit+0xc0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d143      	bne.n	80029d4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800294c:	2302      	movs	r3, #2
 800294e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002950:	2300      	movs	r3, #0
 8002952:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4618      	mov	r0, r3
 800295a:	f001 fc1f 	bl	800419c <HAL_RCCEx_PeriphCLKConfig>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002964:	f7ff fec4 	bl	80026f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_UART_MspInit+0xc4>)
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <HAL_UART_MspInit+0xc4>)
 800296e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002972:	6593      	str	r3, [r2, #88]	; 0x58
 8002974:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <HAL_UART_MspInit+0xc4>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002980:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <HAL_UART_MspInit+0xc4>)
 8002982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002984:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <HAL_UART_MspInit+0xc4>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800298c:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <HAL_UART_MspInit+0xc4>)
 800298e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002998:	230c      	movs	r3, #12
 800299a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029aa:	2303      	movs	r3, #3
 80029ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029b0:	2307      	movs	r3, #7
 80029b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029ba:	4619      	mov	r1, r3
 80029bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c0:	f000 fb94 	bl	80030ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80029c4:	2200      	movs	r2, #0
 80029c6:	2105      	movs	r1, #5
 80029c8:	2026      	movs	r0, #38	; 0x26
 80029ca:	f000 fae5 	bl	8002f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029ce:	2026      	movs	r0, #38	; 0x26
 80029d0:	f000 fafe 	bl	8002fd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029d4:	bf00      	nop
 80029d6:	37b0      	adds	r7, #176	; 0xb0
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40004400 	.word	0x40004400
 80029e0:	40021000 	.word	0x40021000

080029e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08e      	sub	sp, #56	; 0x38
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029f2:	4b34      	ldr	r3, [pc, #208]	; (8002ac4 <HAL_InitTick+0xe0>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	4a33      	ldr	r2, [pc, #204]	; (8002ac4 <HAL_InitTick+0xe0>)
 80029f8:	f043 0310 	orr.w	r3, r3, #16
 80029fc:	6593      	str	r3, [r2, #88]	; 0x58
 80029fe:	4b31      	ldr	r3, [pc, #196]	; (8002ac4 <HAL_InitTick+0xe0>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a0a:	f107 0210 	add.w	r2, r7, #16
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 fb2f 	bl	8004078 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d103      	bne.n	8002a2c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a24:	f001 fafc 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 8002a28:	6378      	str	r0, [r7, #52]	; 0x34
 8002a2a:	e004      	b.n	8002a36 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a2c:	f001 faf8 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 8002a30:	4603      	mov	r3, r0
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	4a23      	ldr	r2, [pc, #140]	; (8002ac8 <HAL_InitTick+0xe4>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0c9b      	lsrs	r3, r3, #18
 8002a40:	3b01      	subs	r3, #1
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a44:	4b21      	ldr	r3, [pc, #132]	; (8002acc <HAL_InitTick+0xe8>)
 8002a46:	4a22      	ldr	r2, [pc, #136]	; (8002ad0 <HAL_InitTick+0xec>)
 8002a48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_InitTick+0xe8>)
 8002a4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a50:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a52:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <HAL_InitTick+0xe8>)
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a58:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <HAL_InitTick+0xe8>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_InitTick+0xe8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_InitTick+0xe8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002a6a:	4818      	ldr	r0, [pc, #96]	; (8002acc <HAL_InitTick+0xe8>)
 8002a6c:	f002 f852 	bl	8004b14 <HAL_TIM_Base_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002a76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d11b      	bne.n	8002ab6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002a7e:	4813      	ldr	r0, [pc, #76]	; (8002acc <HAL_InitTick+0xe8>)
 8002a80:	f002 f8a0 	bl	8004bc4 <HAL_TIM_Base_Start_IT>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002a8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d111      	bne.n	8002ab6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a92:	2036      	movs	r0, #54	; 0x36
 8002a94:	f000 fa9c 	bl	8002fd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b0f      	cmp	r3, #15
 8002a9c:	d808      	bhi.n	8002ab0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	2036      	movs	r0, #54	; 0x36
 8002aa4:	f000 fa78 	bl	8002f98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002aa8:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <HAL_InitTick+0xf0>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	e002      	b.n	8002ab6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002ab6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3738      	adds	r7, #56	; 0x38
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	431bde83 	.word	0x431bde83
 8002acc:	200007b8 	.word	0x200007b8
 8002ad0:	40001000 	.word	0x40001000
 8002ad4:	20000034 	.word	0x20000034

08002ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002adc:	e7fe      	b.n	8002adc <NMI_Handler+0x4>

08002ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <HardFault_Handler+0x4>

08002ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <MemManage_Handler+0x4>

08002aea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aee:	e7fe      	b.n	8002aee <BusFault_Handler+0x4>

08002af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af4:	e7fe      	b.n	8002af4 <UsageFault_Handler+0x4>

08002af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b08:	4802      	ldr	r0, [pc, #8]	; (8002b14 <TIM2_IRQHandler+0x10>)
 8002b0a:	f002 fb67 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000478 	.word	0x20000478

08002b18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b1c:	4802      	ldr	r0, [pc, #8]	; (8002b28 <TIM3_IRQHandler+0x10>)
 8002b1e:	f002 fb5d 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200004c4 	.word	0x200004c4

08002b2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b30:	4802      	ldr	r0, [pc, #8]	; (8002b3c <USART2_IRQHandler+0x10>)
 8002b32:	f003 fcd3 	bl	80064dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	2000055c 	.word	0x2000055c

08002b40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b44:	4802      	ldr	r0, [pc, #8]	; (8002b50 <TIM6_DAC_IRQHandler+0x10>)
 8002b46:	f002 fb49 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200007b8 	.word	0x200007b8

08002b54 <ITM_SendChar>:
#define DEMCR	*((volatile uint32_t*)0xE000EDFCU)
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*)0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1<<24);
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <ITM_SendChar+0x48>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a0e      	ldr	r2, [pc, #56]	; (8002b9c <ITM_SendChar+0x48>)
 8002b64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b68:	6013      	str	r3, [r2, #0]
	ITM_TRACE_EN |= (1<<0);
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <ITM_SendChar+0x4c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ba0 <ITM_SendChar+0x4c>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6013      	str	r3, [r2, #0]
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002b76:	bf00      	nop
 8002b78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f8      	beq.n	8002b78 <ITM_SendChar+0x24>
	ITM_STIMULUS_PORT0 = ch;
 8002b86:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	6013      	str	r3, [r2, #0]
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000edfc 	.word	0xe000edfc
 8002ba0:	e0000e00 	.word	0xe0000e00

08002ba4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return 1;
 8002ba8:	2301      	movs	r3, #1
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <_kill>:

int _kill(int pid, int sig)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bbe:	f007 fcf1 	bl	800a5a4 <__errno>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2216      	movs	r2, #22
 8002bc6:	601a      	str	r2, [r3, #0]
  return -1;
 8002bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <_exit>:

void _exit (int status)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ffe7 	bl	8002bb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002be6:	e7fe      	b.n	8002be6 <_exit+0x12>

08002be8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	e00a      	b.n	8002c10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bfa:	f3af 8000 	nop.w
 8002bfe:	4601      	mov	r1, r0
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	60ba      	str	r2, [r7, #8]
 8002c06:	b2ca      	uxtb	r2, r1
 8002c08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	dbf0      	blt.n	8002bfa <_read+0x12>
  }

  return len;
 8002c18:	687b      	ldr	r3, [r7, #4]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	e009      	b.n	8002c48 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	60ba      	str	r2, [r7, #8]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff89 	bl	8002b54 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	3301      	adds	r3, #1
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	dbf1      	blt.n	8002c34 <_write+0x12>
  }
  return len;
 8002c50:	687b      	ldr	r3, [r7, #4]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <_close>:

int _close(int file)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c82:	605a      	str	r2, [r3, #4]
  return 0;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <_isatty>:

int _isatty(int file)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c9a:	2301      	movs	r3, #1
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ccc:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <_sbrk+0x5c>)
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <_sbrk+0x60>)
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cd8:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <_sbrk+0x64>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d102      	bne.n	8002ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ce0:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <_sbrk+0x64>)
 8002ce2:	4a12      	ldr	r2, [pc, #72]	; (8002d2c <_sbrk+0x68>)
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <_sbrk+0x64>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d207      	bcs.n	8002d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cf4:	f007 fc56 	bl	800a5a4 <__errno>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	220c      	movs	r2, #12
 8002cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002d02:	e009      	b.n	8002d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d04:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <_sbrk+0x64>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d0a:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <_sbrk+0x64>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	4a05      	ldr	r2, [pc, #20]	; (8002d28 <_sbrk+0x64>)
 8002d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d16:	68fb      	ldr	r3, [r7, #12]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20018000 	.word	0x20018000
 8002d24:	00000400 	.word	0x00000400
 8002d28:	20000804 	.word	0x20000804
 8002d2c:	20001668 	.word	0x20001668

08002d30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <SystemInit+0x20>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <SystemInit+0x20>)
 8002d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d58:	f7ff ffea 	bl	8002d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d5c:	480c      	ldr	r0, [pc, #48]	; (8002d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d5e:	490d      	ldr	r1, [pc, #52]	; (8002d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d60:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <LoopForever+0xe>)
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d64:	e002      	b.n	8002d6c <LoopCopyDataInit>

08002d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d6a:	3304      	adds	r3, #4

08002d6c <LoopCopyDataInit>:

LoopCopyDataInit:

  adds r4, r0, r3
 8002d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d70:	d3f9      	bcc.n	8002d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d74:	4c0a      	ldr	r4, [pc, #40]	; (8002da0 <LoopForever+0x16>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d78:	e001      	b.n	8002d7e <LoopFillZerobss>

08002d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d7c:	3204      	adds	r2, #4

08002d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d80:	d3fb      	bcc.n	8002d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d82:	f007 fc15 	bl	800a5b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d86:	f7fe fd63 	bl	8001850 <main>

08002d8a <LoopForever>:

LoopForever:
    b LoopForever
 8002d8a:	e7fe      	b.n	8002d8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d94:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002d98:	0800d398 	.word	0x0800d398
  ldr r2, =_sbss
 8002d9c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002da0:	20001664 	.word	0x20001664

08002da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002da4:	e7fe      	b.n	8002da4 <ADC1_2_IRQHandler>
	...

08002da8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <HAL_Init+0x3c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a0b      	ldr	r2, [pc, #44]	; (8002de4 <HAL_Init+0x3c>)
 8002db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dbe:	2003      	movs	r0, #3
 8002dc0:	f000 f8df 	bl	8002f82 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dc4:	200f      	movs	r0, #15
 8002dc6:	f7ff fe0d 	bl	80029e4 <HAL_InitTick>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	71fb      	strb	r3, [r7, #7]
 8002dd4:	e001      	b.n	8002dda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dd6:	f7ff fc9f 	bl	8002718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dda:	79fb      	ldrb	r3, [r7, #7]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40022000 	.word	0x40022000

08002de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_IncTick+0x20>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_IncTick+0x24>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <HAL_IncTick+0x24>)
 8002dfa:	6013      	str	r3, [r2, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000038 	.word	0x20000038
 8002e0c:	20000808 	.word	0x20000808

08002e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return uwTick;
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <HAL_GetTick+0x14>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000808 	.word	0x20000808

08002e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e5a:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	60d3      	str	r3, [r2, #12]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <__NVIC_GetPriorityGrouping+0x18>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 0307 	and.w	r3, r3, #7
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	db0b      	blt.n	8002eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	4907      	ldr	r1, [pc, #28]	; (8002ec4 <__NVIC_EnableIRQ+0x38>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2001      	movs	r0, #1
 8002eae:	fa00 f202 	lsl.w	r2, r0, r2
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000e100 	.word	0xe000e100

08002ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	db0a      	blt.n	8002ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	490c      	ldr	r1, [pc, #48]	; (8002f14 <__NVIC_SetPriority+0x4c>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	0112      	lsls	r2, r2, #4
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	440b      	add	r3, r1
 8002eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef0:	e00a      	b.n	8002f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4908      	ldr	r1, [pc, #32]	; (8002f18 <__NVIC_SetPriority+0x50>)
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	3b04      	subs	r3, #4
 8002f00:	0112      	lsls	r2, r2, #4
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	440b      	add	r3, r1
 8002f06:	761a      	strb	r2, [r3, #24]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000e100 	.word	0xe000e100
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f1c3 0307 	rsb	r3, r3, #7
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	bf28      	it	cs
 8002f3a:	2304      	movcs	r3, #4
 8002f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d902      	bls.n	8002f4c <NVIC_EncodePriority+0x30>
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3b03      	subs	r3, #3
 8002f4a:	e000      	b.n	8002f4e <NVIC_EncodePriority+0x32>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	f04f 32ff 	mov.w	r2, #4294967295
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	401a      	ands	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f64:	f04f 31ff 	mov.w	r1, #4294967295
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43d9      	mvns	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	4313      	orrs	r3, r2
         );
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3724      	adds	r7, #36	; 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff ff4c 	bl	8002e28 <__NVIC_SetPriorityGrouping>
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002faa:	f7ff ff61 	bl	8002e70 <__NVIC_GetPriorityGrouping>
 8002fae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	6978      	ldr	r0, [r7, #20]
 8002fb6:	f7ff ffb1 	bl	8002f1c <NVIC_EncodePriority>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff ff80 	bl	8002ec8 <__NVIC_SetPriority>
}
 8002fc8:	bf00      	nop
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff ff54 	bl	8002e8c <__NVIC_EnableIRQ>
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d008      	beq.n	8003016 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2204      	movs	r2, #4
 8003008:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e022      	b.n	800305c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 020e 	bic.w	r2, r2, #14
 8003024:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f003 021c 	and.w	r2, r3, #28
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2101      	movs	r1, #1
 8003044:	fa01 f202 	lsl.w	r2, r1, r2
 8003048:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800305a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d005      	beq.n	800308c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2204      	movs	r2, #4
 8003084:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	e029      	b.n	80030e0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 020e 	bic.w	r2, r2, #14
 800309a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b0:	f003 021c 	and.w	r2, r3, #28
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4798      	blx	r3
    }
  }
  return status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030fa:	e17f      	b.n	80033fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 8171 	beq.w	80033f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d005      	beq.n	800312c <HAL_GPIO_Init+0x40>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d130      	bne.n	800318e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	2203      	movs	r2, #3
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003162:	2201      	movs	r2, #1
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	f003 0201 	and.w	r2, r3, #1
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b03      	cmp	r3, #3
 8003198:	d118      	bne.n	80031cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80031a0:	2201      	movs	r2, #1
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	08db      	lsrs	r3, r3, #3
 80031b6:	f003 0201 	and.w	r2, r3, #1
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d017      	beq.n	8003208 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	2203      	movs	r2, #3
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d123      	bne.n	800325c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	08da      	lsrs	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3208      	adds	r2, #8
 800321c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	220f      	movs	r2, #15
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	08da      	lsrs	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3208      	adds	r2, #8
 8003256:	6939      	ldr	r1, [r7, #16]
 8003258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	2203      	movs	r2, #3
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0203 	and.w	r2, r3, #3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80ac 	beq.w	80033f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329e:	4b5f      	ldr	r3, [pc, #380]	; (800341c <HAL_GPIO_Init+0x330>)
 80032a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a2:	4a5e      	ldr	r2, [pc, #376]	; (800341c <HAL_GPIO_Init+0x330>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6613      	str	r3, [r2, #96]	; 0x60
 80032aa:	4b5c      	ldr	r3, [pc, #368]	; (800341c <HAL_GPIO_Init+0x330>)
 80032ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032b6:	4a5a      	ldr	r2, [pc, #360]	; (8003420 <HAL_GPIO_Init+0x334>)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	3302      	adds	r3, #2
 80032be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	220f      	movs	r2, #15
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032e0:	d025      	beq.n	800332e <HAL_GPIO_Init+0x242>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4f      	ldr	r2, [pc, #316]	; (8003424 <HAL_GPIO_Init+0x338>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01f      	beq.n	800332a <HAL_GPIO_Init+0x23e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4e      	ldr	r2, [pc, #312]	; (8003428 <HAL_GPIO_Init+0x33c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d019      	beq.n	8003326 <HAL_GPIO_Init+0x23a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4d      	ldr	r2, [pc, #308]	; (800342c <HAL_GPIO_Init+0x340>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <HAL_GPIO_Init+0x236>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4c      	ldr	r2, [pc, #304]	; (8003430 <HAL_GPIO_Init+0x344>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00d      	beq.n	800331e <HAL_GPIO_Init+0x232>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4b      	ldr	r2, [pc, #300]	; (8003434 <HAL_GPIO_Init+0x348>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d007      	beq.n	800331a <HAL_GPIO_Init+0x22e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4a      	ldr	r2, [pc, #296]	; (8003438 <HAL_GPIO_Init+0x34c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <HAL_GPIO_Init+0x22a>
 8003312:	2306      	movs	r3, #6
 8003314:	e00c      	b.n	8003330 <HAL_GPIO_Init+0x244>
 8003316:	2307      	movs	r3, #7
 8003318:	e00a      	b.n	8003330 <HAL_GPIO_Init+0x244>
 800331a:	2305      	movs	r3, #5
 800331c:	e008      	b.n	8003330 <HAL_GPIO_Init+0x244>
 800331e:	2304      	movs	r3, #4
 8003320:	e006      	b.n	8003330 <HAL_GPIO_Init+0x244>
 8003322:	2303      	movs	r3, #3
 8003324:	e004      	b.n	8003330 <HAL_GPIO_Init+0x244>
 8003326:	2302      	movs	r3, #2
 8003328:	e002      	b.n	8003330 <HAL_GPIO_Init+0x244>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_GPIO_Init+0x244>
 800332e:	2300      	movs	r3, #0
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	f002 0203 	and.w	r2, r2, #3
 8003336:	0092      	lsls	r2, r2, #2
 8003338:	4093      	lsls	r3, r2
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003340:	4937      	ldr	r1, [pc, #220]	; (8003420 <HAL_GPIO_Init+0x334>)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	3302      	adds	r3, #2
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800334e:	4b3b      	ldr	r3, [pc, #236]	; (800343c <HAL_GPIO_Init+0x350>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	43db      	mvns	r3, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4013      	ands	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003372:	4a32      	ldr	r2, [pc, #200]	; (800343c <HAL_GPIO_Init+0x350>)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003378:	4b30      	ldr	r3, [pc, #192]	; (800343c <HAL_GPIO_Init+0x350>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	43db      	mvns	r3, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800339c:	4a27      	ldr	r2, [pc, #156]	; (800343c <HAL_GPIO_Init+0x350>)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <HAL_GPIO_Init+0x350>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033c6:	4a1d      	ldr	r2, [pc, #116]	; (800343c <HAL_GPIO_Init+0x350>)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033cc:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_GPIO_Init+0x350>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033f0:	4a12      	ldr	r2, [pc, #72]	; (800343c <HAL_GPIO_Init+0x350>)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3301      	adds	r3, #1
 80033fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	fa22 f303 	lsr.w	r3, r2, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	f47f ae78 	bne.w	80030fc <HAL_GPIO_Init+0x10>
  }
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	40010000 	.word	0x40010000
 8003424:	48000400 	.word	0x48000400
 8003428:	48000800 	.word	0x48000800
 800342c:	48000c00 	.word	0x48000c00
 8003430:	48001000 	.word	0x48001000
 8003434:	48001400 	.word	0x48001400
 8003438:	48001800 	.word	0x48001800
 800343c:	40010400 	.word	0x40010400

08003440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
 800344c:	4613      	mov	r3, r2
 800344e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003450:	787b      	ldrb	r3, [r7, #1]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003456:	887a      	ldrh	r2, [r7, #2]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800345c:	e002      	b.n	8003464 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <HAL_PWREx_GetVoltageRange+0x18>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800347c:	4618      	mov	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40007000 	.word	0x40007000

0800348c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800349a:	d130      	bne.n	80034fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800349c:	4b23      	ldr	r3, [pc, #140]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a8:	d038      	beq.n	800351c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034aa:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034b2:	4a1e      	ldr	r2, [pc, #120]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034ba:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2232      	movs	r2, #50	; 0x32
 80034c0:	fb02 f303 	mul.w	r3, r2, r3
 80034c4:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0c9b      	lsrs	r3, r3, #18
 80034cc:	3301      	adds	r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d0:	e002      	b.n	80034d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d8:	4b14      	ldr	r3, [pc, #80]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e4:	d102      	bne.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f2      	bne.n	80034d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f8:	d110      	bne.n	800351c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e00f      	b.n	800351e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034fe:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350a:	d007      	beq.n	800351c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800350c:	4b07      	ldr	r3, [pc, #28]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003514:	4a05      	ldr	r2, [pc, #20]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800351a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40007000 	.word	0x40007000
 8003530:	20000030 	.word	0x20000030
 8003534:	431bde83 	.word	0x431bde83

08003538 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e3ca      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800354a:	4b97      	ldr	r3, [pc, #604]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003554:	4b94      	ldr	r3, [pc, #592]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80e4 	beq.w	8003734 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d007      	beq.n	8003582 <HAL_RCC_OscConfig+0x4a>
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b0c      	cmp	r3, #12
 8003576:	f040 808b 	bne.w	8003690 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b01      	cmp	r3, #1
 800357e:	f040 8087 	bne.w	8003690 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003582:	4b89      	ldr	r3, [pc, #548]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_RCC_OscConfig+0x62>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e3a2      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1a      	ldr	r2, [r3, #32]
 800359e:	4b82      	ldr	r3, [pc, #520]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <HAL_RCC_OscConfig+0x7c>
 80035aa:	4b7f      	ldr	r3, [pc, #508]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b2:	e005      	b.n	80035c0 <HAL_RCC_OscConfig+0x88>
 80035b4:	4b7c      	ldr	r3, [pc, #496]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d223      	bcs.n	800360c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fd87 	bl	80040dc <RCC_SetFlashLatencyFromMSIRange>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e383      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035d8:	4b73      	ldr	r3, [pc, #460]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a72      	ldr	r2, [pc, #456]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035de:	f043 0308 	orr.w	r3, r3, #8
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b70      	ldr	r3, [pc, #448]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	496d      	ldr	r1, [pc, #436]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035f6:	4b6c      	ldr	r3, [pc, #432]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	4968      	ldr	r1, [pc, #416]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
 800360a:	e025      	b.n	8003658 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800360c:	4b66      	ldr	r3, [pc, #408]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a65      	ldr	r2, [pc, #404]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003612:	f043 0308 	orr.w	r3, r3, #8
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	4b63      	ldr	r3, [pc, #396]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4960      	ldr	r1, [pc, #384]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800362a:	4b5f      	ldr	r3, [pc, #380]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	495b      	ldr	r1, [pc, #364]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fd47 	bl	80040dc <RCC_SetFlashLatencyFromMSIRange>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e343      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003658:	f000 fc4a 	bl	8003ef0 <HAL_RCC_GetSysClockFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b52      	ldr	r3, [pc, #328]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	4950      	ldr	r1, [pc, #320]	; (80037ac <HAL_RCC_OscConfig+0x274>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
 8003674:	4a4e      	ldr	r2, [pc, #312]	; (80037b0 <HAL_RCC_OscConfig+0x278>)
 8003676:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003678:	4b4e      	ldr	r3, [pc, #312]	; (80037b4 <HAL_RCC_OscConfig+0x27c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff f9b1 	bl	80029e4 <HAL_InitTick>
 8003682:	4603      	mov	r3, r0
 8003684:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d052      	beq.n	8003732 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	e327      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d032      	beq.n	80036fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003698:	4b43      	ldr	r3, [pc, #268]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a42      	ldr	r2, [pc, #264]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036a4:	f7ff fbb4 	bl	8002e10 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036ac:	f7ff fbb0 	bl	8002e10 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e310      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036be:	4b3a      	ldr	r3, [pc, #232]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a36      	ldr	r2, [pc, #216]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036d0:	f043 0308 	orr.w	r3, r3, #8
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4931      	ldr	r1, [pc, #196]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036e8:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	492c      	ldr	r1, [pc, #176]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
 80036fc:	e01a      	b.n	8003734 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036fe:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a29      	ldr	r2, [pc, #164]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800370a:	f7ff fb81 	bl	8002e10 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003712:	f7ff fb7d 	bl	8002e10 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e2dd      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003724:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f0      	bne.n	8003712 <HAL_RCC_OscConfig+0x1da>
 8003730:	e000      	b.n	8003734 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003732:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d074      	beq.n	800382a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b08      	cmp	r3, #8
 8003744:	d005      	beq.n	8003752 <HAL_RCC_OscConfig+0x21a>
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2b0c      	cmp	r3, #12
 800374a:	d10e      	bne.n	800376a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b03      	cmp	r3, #3
 8003750:	d10b      	bne.n	800376a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d064      	beq.n	8003828 <HAL_RCC_OscConfig+0x2f0>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d160      	bne.n	8003828 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e2ba      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003772:	d106      	bne.n	8003782 <HAL_RCC_OscConfig+0x24a>
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a0b      	ldr	r2, [pc, #44]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 800377a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	e026      	b.n	80037d0 <HAL_RCC_OscConfig+0x298>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800378a:	d115      	bne.n	80037b8 <HAL_RCC_OscConfig+0x280>
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a05      	ldr	r2, [pc, #20]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 8003792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a02      	ldr	r2, [pc, #8]	; (80037a8 <HAL_RCC_OscConfig+0x270>)
 800379e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	e014      	b.n	80037d0 <HAL_RCC_OscConfig+0x298>
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000
 80037ac:	0800cfb8 	.word	0x0800cfb8
 80037b0:	20000030 	.word	0x20000030
 80037b4:	20000034 	.word	0x20000034
 80037b8:	4ba0      	ldr	r3, [pc, #640]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a9f      	ldr	r2, [pc, #636]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 80037be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4b9d      	ldr	r3, [pc, #628]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a9c      	ldr	r2, [pc, #624]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 80037ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d013      	beq.n	8003800 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7ff fb1a 	bl	8002e10 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e0:	f7ff fb16 	bl	8002e10 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e276      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f2:	4b92      	ldr	r3, [pc, #584]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x2a8>
 80037fe:	e014      	b.n	800382a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7ff fb06 	bl	8002e10 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7ff fb02 	bl	8002e10 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e262      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800381a:	4b88      	ldr	r3, [pc, #544]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x2d0>
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d060      	beq.n	80038f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	2b04      	cmp	r3, #4
 800383a:	d005      	beq.n	8003848 <HAL_RCC_OscConfig+0x310>
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	2b0c      	cmp	r3, #12
 8003840:	d119      	bne.n	8003876 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b02      	cmp	r3, #2
 8003846:	d116      	bne.n	8003876 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003848:	4b7c      	ldr	r3, [pc, #496]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_RCC_OscConfig+0x328>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e23f      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003860:	4b76      	ldr	r3, [pc, #472]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	061b      	lsls	r3, r3, #24
 800386e:	4973      	ldr	r1, [pc, #460]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003870:	4313      	orrs	r3, r2
 8003872:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003874:	e040      	b.n	80038f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d023      	beq.n	80038c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387e:	4b6f      	ldr	r3, [pc, #444]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a6e      	ldr	r2, [pc, #440]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388a:	f7ff fac1 	bl	8002e10 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003892:	f7ff fabd 	bl	8002e10 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e21d      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a4:	4b65      	ldr	r3, [pc, #404]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b0:	4b62      	ldr	r3, [pc, #392]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	061b      	lsls	r3, r3, #24
 80038be:	495f      	ldr	r1, [pc, #380]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]
 80038c4:	e018      	b.n	80038f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c6:	4b5d      	ldr	r3, [pc, #372]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a5c      	ldr	r2, [pc, #368]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 80038cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d2:	f7ff fa9d 	bl	8002e10 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038da:	f7ff fa99 	bl	8002e10 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e1f9      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ec:	4b53      	ldr	r3, [pc, #332]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f0      	bne.n	80038da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d03c      	beq.n	800397e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01c      	beq.n	8003946 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390c:	4b4b      	ldr	r3, [pc, #300]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 800390e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003912:	4a4a      	ldr	r2, [pc, #296]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391c:	f7ff fa78 	bl	8002e10 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003924:	f7ff fa74 	bl	8002e10 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e1d4      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003936:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ef      	beq.n	8003924 <HAL_RCC_OscConfig+0x3ec>
 8003944:	e01b      	b.n	800397e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003946:	4b3d      	ldr	r3, [pc, #244]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394c:	4a3b      	ldr	r2, [pc, #236]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003956:	f7ff fa5b 	bl	8002e10 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395e:	f7ff fa57 	bl	8002e10 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e1b7      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003970:	4b32      	ldr	r3, [pc, #200]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1ef      	bne.n	800395e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80a6 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398c:	2300      	movs	r3, #0
 800398e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003990:	4b2a      	ldr	r3, [pc, #168]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10d      	bne.n	80039b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399c:	4b27      	ldr	r3, [pc, #156]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	4a26      	ldr	r2, [pc, #152]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 80039a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a6:	6593      	str	r3, [r2, #88]	; 0x58
 80039a8:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b4:	2301      	movs	r3, #1
 80039b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b8:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <HAL_RCC_OscConfig+0x508>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d118      	bne.n	80039f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c4:	4b1e      	ldr	r3, [pc, #120]	; (8003a40 <HAL_RCC_OscConfig+0x508>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a1d      	ldr	r2, [pc, #116]	; (8003a40 <HAL_RCC_OscConfig+0x508>)
 80039ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d0:	f7ff fa1e 	bl	8002e10 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d8:	f7ff fa1a 	bl	8002e10 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e17a      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ea:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <HAL_RCC_OscConfig+0x508>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d108      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4d8>
 80039fe:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a04:	4a0d      	ldr	r2, [pc, #52]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a0e:	e029      	b.n	8003a64 <HAL_RCC_OscConfig+0x52c>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b05      	cmp	r3, #5
 8003a16:	d115      	bne.n	8003a44 <HAL_RCC_OscConfig+0x50c>
 8003a18:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	4a07      	ldr	r2, [pc, #28]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003a20:	f043 0304 	orr.w	r3, r3, #4
 8003a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2e:	4a03      	ldr	r2, [pc, #12]	; (8003a3c <HAL_RCC_OscConfig+0x504>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a38:	e014      	b.n	8003a64 <HAL_RCC_OscConfig+0x52c>
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40007000 	.word	0x40007000
 8003a44:	4b9c      	ldr	r3, [pc, #624]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4a:	4a9b      	ldr	r2, [pc, #620]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a54:	4b98      	ldr	r3, [pc, #608]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5a:	4a97      	ldr	r2, [pc, #604]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003a5c:	f023 0304 	bic.w	r3, r3, #4
 8003a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d016      	beq.n	8003a9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7ff f9d0 	bl	8002e10 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a74:	f7ff f9cc 	bl	8002e10 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e12a      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a8a:	4b8b      	ldr	r3, [pc, #556]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0ed      	beq.n	8003a74 <HAL_RCC_OscConfig+0x53c>
 8003a98:	e015      	b.n	8003ac6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9a:	f7ff f9b9 	bl	8002e10 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7ff f9b5 	bl	8002e10 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e113      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ab8:	4b7f      	ldr	r3, [pc, #508]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1ed      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac6:	7ffb      	ldrb	r3, [r7, #31]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003acc:	4b7a      	ldr	r3, [pc, #488]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	4a79      	ldr	r2, [pc, #484]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80fe 	beq.w	8003cde <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	f040 80d0 	bne.w	8003c8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003aec:	4b72      	ldr	r3, [pc, #456]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f003 0203 	and.w	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d130      	bne.n	8003b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d127      	bne.n	8003b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d11f      	bne.n	8003b62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b2c:	2a07      	cmp	r2, #7
 8003b2e:	bf14      	ite	ne
 8003b30:	2201      	movne	r2, #1
 8003b32:	2200      	moveq	r2, #0
 8003b34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d113      	bne.n	8003b62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	3b01      	subs	r3, #1
 8003b48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d109      	bne.n	8003b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d06e      	beq.n	8003c40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b0c      	cmp	r3, #12
 8003b66:	d069      	beq.n	8003c3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b68:	4b53      	ldr	r3, [pc, #332]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b74:	4b50      	ldr	r3, [pc, #320]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0ad      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b84:	4b4c      	ldr	r3, [pc, #304]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a4b      	ldr	r2, [pc, #300]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b90:	f7ff f93e 	bl	8002e10 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b98:	f7ff f93a 	bl	8002e10 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e09a      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003baa:	4b43      	ldr	r3, [pc, #268]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb6:	4b40      	ldr	r3, [pc, #256]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	4b40      	ldr	r3, [pc, #256]	; (8003cbc <HAL_RCC_OscConfig+0x784>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bc6:	3a01      	subs	r2, #1
 8003bc8:	0112      	lsls	r2, r2, #4
 8003bca:	4311      	orrs	r1, r2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bd0:	0212      	lsls	r2, r2, #8
 8003bd2:	4311      	orrs	r1, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bd8:	0852      	lsrs	r2, r2, #1
 8003bda:	3a01      	subs	r2, #1
 8003bdc:	0552      	lsls	r2, r2, #21
 8003bde:	4311      	orrs	r1, r2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003be4:	0852      	lsrs	r2, r2, #1
 8003be6:	3a01      	subs	r2, #1
 8003be8:	0652      	lsls	r2, r2, #25
 8003bea:	4311      	orrs	r1, r2
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bf0:	0912      	lsrs	r2, r2, #4
 8003bf2:	0452      	lsls	r2, r2, #17
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	4930      	ldr	r1, [pc, #192]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bfc:	4b2e      	ldr	r3, [pc, #184]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2d      	ldr	r2, [pc, #180]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c08:	4b2b      	ldr	r3, [pc, #172]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4a2a      	ldr	r2, [pc, #168]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c14:	f7ff f8fc 	bl	8002e10 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1c:	f7ff f8f8 	bl	8002e10 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e058      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2e:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c3a:	e050      	b.n	8003cde <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e04f      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c40:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d148      	bne.n	8003cde <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c58:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4a16      	ldr	r2, [pc, #88]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c64:	f7ff f8d4 	bl	8002e10 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6c:	f7ff f8d0 	bl	8002e10 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e030      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7e:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x734>
 8003c8a:	e028      	b.n	8003cde <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	d023      	beq.n	8003cda <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c92:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <HAL_RCC_OscConfig+0x780>)
 8003c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9e:	f7ff f8b7 	bl	8002e10 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca4:	e00c      	b.n	8003cc0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7ff f8b3 	bl	8002e10 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d905      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e013      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc0:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <HAL_RCC_OscConfig+0x7b0>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ec      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_RCC_OscConfig+0x7b0>)
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	4905      	ldr	r1, [pc, #20]	; (8003ce8 <HAL_RCC_OscConfig+0x7b0>)
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <HAL_RCC_OscConfig+0x7b4>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	60cb      	str	r3, [r1, #12]
 8003cd8:	e001      	b.n	8003cde <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3720      	adds	r7, #32
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	feeefffc 	.word	0xfeeefffc

08003cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0e7      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d04:	4b75      	ldr	r3, [pc, #468]	; (8003edc <HAL_RCC_ClockConfig+0x1ec>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d910      	bls.n	8003d34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d12:	4b72      	ldr	r3, [pc, #456]	; (8003edc <HAL_RCC_ClockConfig+0x1ec>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 0207 	bic.w	r2, r3, #7
 8003d1a:	4970      	ldr	r1, [pc, #448]	; (8003edc <HAL_RCC_ClockConfig+0x1ec>)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b6e      	ldr	r3, [pc, #440]	; (8003edc <HAL_RCC_ClockConfig+0x1ec>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0cf      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d010      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	4b66      	ldr	r3, [pc, #408]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d908      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d50:	4b63      	ldr	r3, [pc, #396]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4960      	ldr	r1, [pc, #384]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d04c      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d107      	bne.n	8003d86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d76:	4b5a      	ldr	r3, [pc, #360]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d121      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e0a6      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d8e:	4b54      	ldr	r3, [pc, #336]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d115      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e09a      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d107      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003da6:	4b4e      	ldr	r3, [pc, #312]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e08e      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003db6:	4b4a      	ldr	r3, [pc, #296]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e086      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dc6:	4b46      	ldr	r3, [pc, #280]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f023 0203 	bic.w	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4943      	ldr	r1, [pc, #268]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd8:	f7ff f81a 	bl	8002e10 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dde:	e00a      	b.n	8003df6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de0:	f7ff f816 	bl	8002e10 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e06e      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df6:	4b3a      	ldr	r3, [pc, #232]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 020c 	and.w	r2, r3, #12
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d1eb      	bne.n	8003de0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d010      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d208      	bcs.n	8003e36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e24:	4b2e      	ldr	r3, [pc, #184]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	492b      	ldr	r1, [pc, #172]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e36:	4b29      	ldr	r3, [pc, #164]	; (8003edc <HAL_RCC_ClockConfig+0x1ec>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d210      	bcs.n	8003e66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e44:	4b25      	ldr	r3, [pc, #148]	; (8003edc <HAL_RCC_ClockConfig+0x1ec>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f023 0207 	bic.w	r2, r3, #7
 8003e4c:	4923      	ldr	r1, [pc, #140]	; (8003edc <HAL_RCC_ClockConfig+0x1ec>)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e54:	4b21      	ldr	r3, [pc, #132]	; (8003edc <HAL_RCC_ClockConfig+0x1ec>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d001      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e036      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e72:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	4918      	ldr	r1, [pc, #96]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d009      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e90:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4910      	ldr	r1, [pc, #64]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ea4:	f000 f824 	bl	8003ef0 <HAL_RCC_GetSysClockFreq>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	490b      	ldr	r1, [pc, #44]	; (8003ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8003eb6:	5ccb      	ldrb	r3, [r1, r3]
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec0:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8003ec2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <HAL_RCC_ClockConfig+0x1fc>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fe fd8b 	bl	80029e4 <HAL_InitTick>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ed2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40022000 	.word	0x40022000
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	0800cfb8 	.word	0x0800cfb8
 8003ee8:	20000030 	.word	0x20000030
 8003eec:	20000034 	.word	0x20000034

08003ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b089      	sub	sp, #36	; 0x24
 8003ef4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	2300      	movs	r3, #0
 8003efc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003efe:	4b3e      	ldr	r3, [pc, #248]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f08:	4b3b      	ldr	r3, [pc, #236]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x34>
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b0c      	cmp	r3, #12
 8003f1c:	d121      	bne.n	8003f62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d11e      	bne.n	8003f62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f24:	4b34      	ldr	r3, [pc, #208]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d107      	bne.n	8003f40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f30:	4b31      	ldr	r3, [pc, #196]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f36:	0a1b      	lsrs	r3, r3, #8
 8003f38:	f003 030f 	and.w	r3, r3, #15
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	e005      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f40:	4b2d      	ldr	r3, [pc, #180]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f4c:	4a2b      	ldr	r2, [pc, #172]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10d      	bne.n	8003f78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d102      	bne.n	8003f6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f6a:	61bb      	str	r3, [r7, #24]
 8003f6c:	e004      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f74:	4b23      	ldr	r3, [pc, #140]	; (8004004 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b0c      	cmp	r3, #12
 8003f7c:	d134      	bne.n	8003fe8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d003      	beq.n	8003f96 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d003      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0xac>
 8003f94:	e005      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f96:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f98:	617b      	str	r3, [r7, #20]
      break;
 8003f9a:	e005      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f9c:	4b19      	ldr	r3, [pc, #100]	; (8004004 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f9e:	617b      	str	r3, [r7, #20]
      break;
 8003fa0:	e002      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	617b      	str	r3, [r7, #20]
      break;
 8003fa6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fa8:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	0a1b      	lsrs	r3, r3, #8
 8003fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	fb03 f202 	mul.w	r2, r3, r2
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fcc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fce:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	0e5b      	lsrs	r3, r3, #25
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	3301      	adds	r3, #1
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fe8:	69bb      	ldr	r3, [r7, #24]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3724      	adds	r7, #36	; 0x24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	0800cfd0 	.word	0x0800cfd0
 8004000:	00f42400 	.word	0x00f42400
 8004004:	007a1200 	.word	0x007a1200

08004008 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800400c:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_RCC_GetHCLKFreq+0x14>)
 800400e:	681b      	ldr	r3, [r3, #0]
}
 8004010:	4618      	mov	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	20000030 	.word	0x20000030

08004020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004024:	f7ff fff0 	bl	8004008 <HAL_RCC_GetHCLKFreq>
 8004028:	4602      	mov	r2, r0
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_RCC_GetPCLK1Freq+0x24>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	0a1b      	lsrs	r3, r3, #8
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	4904      	ldr	r1, [pc, #16]	; (8004048 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004036:	5ccb      	ldrb	r3, [r1, r3]
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	0800cfc8 	.word	0x0800cfc8

0800404c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004050:	f7ff ffda 	bl	8004008 <HAL_RCC_GetHCLKFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	0adb      	lsrs	r3, r3, #11
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	4904      	ldr	r1, [pc, #16]	; (8004074 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004062:	5ccb      	ldrb	r3, [r1, r3]
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800406c:	4618      	mov	r0, r3
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40021000 	.word	0x40021000
 8004074:	0800cfc8 	.word	0x0800cfc8

08004078 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	220f      	movs	r2, #15
 8004086:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004088:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <HAL_RCC_GetClockConfig+0x5c>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 0203 	and.w	r2, r3, #3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <HAL_RCC_GetClockConfig+0x5c>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <HAL_RCC_GetClockConfig+0x5c>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <HAL_RCC_GetClockConfig+0x5c>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	08db      	lsrs	r3, r3, #3
 80040b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80040ba:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <HAL_RCC_GetClockConfig+0x60>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0207 	and.w	r2, r3, #7
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	601a      	str	r2, [r3, #0]
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40021000 	.word	0x40021000
 80040d8:	40022000 	.word	0x40022000

080040dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040e4:	2300      	movs	r3, #0
 80040e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040e8:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040f4:	f7ff f9bc 	bl	8003470 <HAL_PWREx_GetVoltageRange>
 80040f8:	6178      	str	r0, [r7, #20]
 80040fa:	e014      	b.n	8004126 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040fc:	4b25      	ldr	r3, [pc, #148]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004100:	4a24      	ldr	r2, [pc, #144]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004106:	6593      	str	r3, [r2, #88]	; 0x58
 8004108:	4b22      	ldr	r3, [pc, #136]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004114:	f7ff f9ac 	bl	8003470 <HAL_PWREx_GetVoltageRange>
 8004118:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800411a:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411e:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004124:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412c:	d10b      	bne.n	8004146 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b80      	cmp	r3, #128	; 0x80
 8004132:	d919      	bls.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2ba0      	cmp	r3, #160	; 0xa0
 8004138:	d902      	bls.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800413a:	2302      	movs	r3, #2
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	e013      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004140:	2301      	movs	r3, #1
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	e010      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b80      	cmp	r3, #128	; 0x80
 800414a:	d902      	bls.n	8004152 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800414c:	2303      	movs	r3, #3
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	e00a      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b80      	cmp	r3, #128	; 0x80
 8004156:	d102      	bne.n	800415e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004158:	2302      	movs	r3, #2
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	e004      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b70      	cmp	r3, #112	; 0x70
 8004162:	d101      	bne.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004164:	2301      	movs	r3, #1
 8004166:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004168:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f023 0207 	bic.w	r2, r3, #7
 8004170:	4909      	ldr	r1, [pc, #36]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004178:	4b07      	ldr	r3, [pc, #28]	; (8004198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	429a      	cmp	r2, r3
 8004184:	d001      	beq.n	800418a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000
 8004198:	40022000 	.word	0x40022000

0800419c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041a4:	2300      	movs	r3, #0
 80041a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041a8:	2300      	movs	r3, #0
 80041aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d041      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041c0:	d02a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041c6:	d824      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041cc:	d008      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041d2:	d81e      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041dc:	d010      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041de:	e018      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041e0:	4b86      	ldr	r3, [pc, #536]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4a85      	ldr	r2, [pc, #532]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041ec:	e015      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3304      	adds	r3, #4
 80041f2:	2100      	movs	r1, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fabb 	bl	8004770 <RCCEx_PLLSAI1_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041fe:	e00c      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3320      	adds	r3, #32
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fba6 	bl	8004958 <RCCEx_PLLSAI2_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004210:	e003      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	74fb      	strb	r3, [r7, #19]
      break;
 8004216:	e000      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800421a:	7cfb      	ldrb	r3, [r7, #19]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10b      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004220:	4b76      	ldr	r3, [pc, #472]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004226:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800422e:	4973      	ldr	r1, [pc, #460]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004236:	e001      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004238:	7cfb      	ldrb	r3, [r7, #19]
 800423a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d041      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800424c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004250:	d02a      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004252:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004256:	d824      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004258:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800425c:	d008      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800425e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004262:	d81e      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800426c:	d010      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800426e:	e018      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004270:	4b62      	ldr	r3, [pc, #392]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	4a61      	ldr	r2, [pc, #388]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800427c:	e015      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3304      	adds	r3, #4
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fa73 	bl	8004770 <RCCEx_PLLSAI1_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800428e:	e00c      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3320      	adds	r3, #32
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fb5e 	bl	8004958 <RCCEx_PLLSAI2_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042a0:	e003      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	74fb      	strb	r3, [r7, #19]
      break;
 80042a6:	e000      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80042a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042aa:	7cfb      	ldrb	r3, [r7, #19]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042b0:	4b52      	ldr	r3, [pc, #328]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042be:	494f      	ldr	r1, [pc, #316]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042c6:	e001      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c8:	7cfb      	ldrb	r3, [r7, #19]
 80042ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80a0 	beq.w	800441a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042da:	2300      	movs	r3, #0
 80042dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042de:	4b47      	ldr	r3, [pc, #284]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80042ee:	2300      	movs	r3, #0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00d      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f4:	4b41      	ldr	r3, [pc, #260]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	4a40      	ldr	r2, [pc, #256]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004300:	4b3e      	ldr	r3, [pc, #248]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800430c:	2301      	movs	r3, #1
 800430e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004310:	4b3b      	ldr	r3, [pc, #236]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a3a      	ldr	r2, [pc, #232]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800431c:	f7fe fd78 	bl	8002e10 <HAL_GetTick>
 8004320:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004322:	e009      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004324:	f7fe fd74 	bl	8002e10 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d902      	bls.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	74fb      	strb	r3, [r7, #19]
        break;
 8004336:	e005      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004338:	4b31      	ldr	r3, [pc, #196]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0ef      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d15c      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800434a:	4b2c      	ldr	r3, [pc, #176]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004354:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d01f      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	429a      	cmp	r2, r3
 8004366:	d019      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004368:	4b24      	ldr	r3, [pc, #144]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004372:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004374:	4b21      	ldr	r3, [pc, #132]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437a:	4a20      	ldr	r2, [pc, #128]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004384:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	4a1c      	ldr	r2, [pc, #112]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004394:	4a19      	ldr	r2, [pc, #100]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d016      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7fe fd33 	bl	8002e10 <HAL_GetTick>
 80043aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ac:	e00b      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ae:	f7fe fd2f 	bl	8002e10 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043bc:	4293      	cmp	r3, r2
 80043be:	d902      	bls.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	74fb      	strb	r3, [r7, #19]
            break;
 80043c4:	e006      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c6:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ec      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10c      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043da:	4b08      	ldr	r3, [pc, #32]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ea:	4904      	ldr	r1, [pc, #16]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043f2:	e009      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043f4:	7cfb      	ldrb	r3, [r7, #19]
 80043f6:	74bb      	strb	r3, [r7, #18]
 80043f8:	e006      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80043fa:	bf00      	nop
 80043fc:	40021000 	.word	0x40021000
 8004400:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004404:	7cfb      	ldrb	r3, [r7, #19]
 8004406:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004408:	7c7b      	ldrb	r3, [r7, #17]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d105      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440e:	4b9e      	ldr	r3, [pc, #632]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	4a9d      	ldr	r2, [pc, #628]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004418:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004426:	4b98      	ldr	r3, [pc, #608]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442c:	f023 0203 	bic.w	r2, r3, #3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	4994      	ldr	r1, [pc, #592]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004448:	4b8f      	ldr	r3, [pc, #572]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444e:	f023 020c 	bic.w	r2, r3, #12
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	498c      	ldr	r1, [pc, #560]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800446a:	4b87      	ldr	r3, [pc, #540]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	4983      	ldr	r1, [pc, #524]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800448c:	4b7e      	ldr	r3, [pc, #504]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004492:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	497b      	ldr	r1, [pc, #492]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044ae:	4b76      	ldr	r3, [pc, #472]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044bc:	4972      	ldr	r1, [pc, #456]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044d0:	4b6d      	ldr	r3, [pc, #436]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044de:	496a      	ldr	r1, [pc, #424]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044f2:	4b65      	ldr	r3, [pc, #404]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004500:	4961      	ldr	r1, [pc, #388]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004514:	4b5c      	ldr	r3, [pc, #368]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004522:	4959      	ldr	r1, [pc, #356]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004536:	4b54      	ldr	r3, [pc, #336]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004544:	4950      	ldr	r1, [pc, #320]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004558:	4b4b      	ldr	r3, [pc, #300]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	4948      	ldr	r1, [pc, #288]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800457a:	4b43      	ldr	r3, [pc, #268]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004588:	493f      	ldr	r1, [pc, #252]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d028      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800459c:	4b3a      	ldr	r3, [pc, #232]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045aa:	4937      	ldr	r1, [pc, #220]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ba:	d106      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045bc:	4b32      	ldr	r3, [pc, #200]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4a31      	ldr	r2, [pc, #196]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045c6:	60d3      	str	r3, [r2, #12]
 80045c8:	e011      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045d2:	d10c      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	2101      	movs	r1, #1
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f8c8 	bl	8004770 <RCCEx_PLLSAI1_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045e4:	7cfb      	ldrb	r3, [r7, #19]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d028      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045fa:	4b23      	ldr	r3, [pc, #140]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	491f      	ldr	r1, [pc, #124]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004618:	d106      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800461a:	4b1b      	ldr	r3, [pc, #108]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	4a1a      	ldr	r2, [pc, #104]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004620:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004624:	60d3      	str	r3, [r2, #12]
 8004626:	e011      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004630:	d10c      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3304      	adds	r3, #4
 8004636:	2101      	movs	r1, #1
 8004638:	4618      	mov	r0, r3
 800463a:	f000 f899 	bl	8004770 <RCCEx_PLLSAI1_Config>
 800463e:	4603      	mov	r3, r0
 8004640:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004642:	7cfb      	ldrb	r3, [r7, #19]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004648:	7cfb      	ldrb	r3, [r7, #19]
 800464a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d02b      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004666:	4908      	ldr	r1, [pc, #32]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004672:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004676:	d109      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004678:	4b03      	ldr	r3, [pc, #12]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4a02      	ldr	r2, [pc, #8]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004682:	60d3      	str	r3, [r2, #12]
 8004684:	e014      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004690:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004694:	d10c      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3304      	adds	r3, #4
 800469a:	2101      	movs	r1, #1
 800469c:	4618      	mov	r0, r3
 800469e:	f000 f867 	bl	8004770 <RCCEx_PLLSAI1_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046a6:	7cfb      	ldrb	r3, [r7, #19]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80046ac:	7cfb      	ldrb	r3, [r7, #19]
 80046ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d02f      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046bc:	4b2b      	ldr	r3, [pc, #172]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ca:	4928      	ldr	r1, [pc, #160]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046da:	d10d      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3304      	adds	r3, #4
 80046e0:	2102      	movs	r1, #2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 f844 	bl	8004770 <RCCEx_PLLSAI1_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ec:	7cfb      	ldrb	r3, [r7, #19]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d014      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046f2:	7cfb      	ldrb	r3, [r7, #19]
 80046f4:	74bb      	strb	r3, [r7, #18]
 80046f6:	e011      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004700:	d10c      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3320      	adds	r3, #32
 8004706:	2102      	movs	r1, #2
 8004708:	4618      	mov	r0, r3
 800470a:	f000 f925 	bl	8004958 <RCCEx_PLLSAI2_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004712:	7cfb      	ldrb	r3, [r7, #19]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004728:	4b10      	ldr	r3, [pc, #64]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004736:	490d      	ldr	r1, [pc, #52]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00b      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800474a:	4b08      	ldr	r3, [pc, #32]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800475a:	4904      	ldr	r1, [pc, #16]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004762:	7cbb      	ldrb	r3, [r7, #18]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40021000 	.word	0x40021000

08004770 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800477e:	4b75      	ldr	r3, [pc, #468]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d018      	beq.n	80047bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800478a:	4b72      	ldr	r3, [pc, #456]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0203 	and.w	r2, r3, #3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d10d      	bne.n	80047b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
       ||
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047a2:	4b6c      	ldr	r3, [pc, #432]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
       ||
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d047      	beq.n	8004846 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
 80047ba:	e044      	b.n	8004846 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d018      	beq.n	80047f6 <RCCEx_PLLSAI1_Config+0x86>
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d825      	bhi.n	8004814 <RCCEx_PLLSAI1_Config+0xa4>
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d002      	beq.n	80047d2 <RCCEx_PLLSAI1_Config+0x62>
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d009      	beq.n	80047e4 <RCCEx_PLLSAI1_Config+0x74>
 80047d0:	e020      	b.n	8004814 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047d2:	4b60      	ldr	r3, [pc, #384]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d11d      	bne.n	800481a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e2:	e01a      	b.n	800481a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047e4:	4b5b      	ldr	r3, [pc, #364]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d116      	bne.n	800481e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047f4:	e013      	b.n	800481e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047f6:	4b57      	ldr	r3, [pc, #348]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10f      	bne.n	8004822 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004802:	4b54      	ldr	r3, [pc, #336]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d109      	bne.n	8004822 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004812:	e006      	b.n	8004822 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
      break;
 8004818:	e004      	b.n	8004824 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800481a:	bf00      	nop
 800481c:	e002      	b.n	8004824 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004822:	bf00      	nop
    }

    if(status == HAL_OK)
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10d      	bne.n	8004846 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800482a:	4b4a      	ldr	r3, [pc, #296]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6819      	ldr	r1, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	3b01      	subs	r3, #1
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	430b      	orrs	r3, r1
 8004840:	4944      	ldr	r1, [pc, #272]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004842:	4313      	orrs	r3, r2
 8004844:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d17d      	bne.n	8004948 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800484c:	4b41      	ldr	r3, [pc, #260]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a40      	ldr	r2, [pc, #256]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004852:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004858:	f7fe fada 	bl	8002e10 <HAL_GetTick>
 800485c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800485e:	e009      	b.n	8004874 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004860:	f7fe fad6 	bl	8002e10 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d902      	bls.n	8004874 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	73fb      	strb	r3, [r7, #15]
        break;
 8004872:	e005      	b.n	8004880 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004874:	4b37      	ldr	r3, [pc, #220]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1ef      	bne.n	8004860 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d160      	bne.n	8004948 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d111      	bne.n	80048b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800488c:	4b31      	ldr	r3, [pc, #196]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6892      	ldr	r2, [r2, #8]
 800489c:	0211      	lsls	r1, r2, #8
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68d2      	ldr	r2, [r2, #12]
 80048a2:	0912      	lsrs	r2, r2, #4
 80048a4:	0452      	lsls	r2, r2, #17
 80048a6:	430a      	orrs	r2, r1
 80048a8:	492a      	ldr	r1, [pc, #168]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	610b      	str	r3, [r1, #16]
 80048ae:	e027      	b.n	8004900 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d112      	bne.n	80048dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048b6:	4b27      	ldr	r3, [pc, #156]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80048be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6892      	ldr	r2, [r2, #8]
 80048c6:	0211      	lsls	r1, r2, #8
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6912      	ldr	r2, [r2, #16]
 80048cc:	0852      	lsrs	r2, r2, #1
 80048ce:	3a01      	subs	r2, #1
 80048d0:	0552      	lsls	r2, r2, #21
 80048d2:	430a      	orrs	r2, r1
 80048d4:	491f      	ldr	r1, [pc, #124]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	610b      	str	r3, [r1, #16]
 80048da:	e011      	b.n	8004900 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048dc:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6892      	ldr	r2, [r2, #8]
 80048ec:	0211      	lsls	r1, r2, #8
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6952      	ldr	r2, [r2, #20]
 80048f2:	0852      	lsrs	r2, r2, #1
 80048f4:	3a01      	subs	r2, #1
 80048f6:	0652      	lsls	r2, r2, #25
 80048f8:	430a      	orrs	r2, r1
 80048fa:	4916      	ldr	r1, [pc, #88]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004900:	4b14      	ldr	r3, [pc, #80]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a13      	ldr	r2, [pc, #76]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004906:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800490a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490c:	f7fe fa80 	bl	8002e10 <HAL_GetTick>
 8004910:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004912:	e009      	b.n	8004928 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004914:	f7fe fa7c 	bl	8002e10 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d902      	bls.n	8004928 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	73fb      	strb	r3, [r7, #15]
          break;
 8004926:	e005      	b.n	8004934 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0ef      	beq.n	8004914 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800493a:	4b06      	ldr	r3, [pc, #24]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	4904      	ldr	r1, [pc, #16]	; (8004954 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004944:	4313      	orrs	r3, r2
 8004946:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40021000 	.word	0x40021000

08004958 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004966:	4b6a      	ldr	r3, [pc, #424]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d018      	beq.n	80049a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004972:	4b67      	ldr	r3, [pc, #412]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0203 	and.w	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d10d      	bne.n	800499e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
       ||
 8004986:	2b00      	cmp	r3, #0
 8004988:	d009      	beq.n	800499e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800498a:	4b61      	ldr	r3, [pc, #388]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
       ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d047      	beq.n	8004a2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
 80049a2:	e044      	b.n	8004a2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d018      	beq.n	80049de <RCCEx_PLLSAI2_Config+0x86>
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d825      	bhi.n	80049fc <RCCEx_PLLSAI2_Config+0xa4>
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d002      	beq.n	80049ba <RCCEx_PLLSAI2_Config+0x62>
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d009      	beq.n	80049cc <RCCEx_PLLSAI2_Config+0x74>
 80049b8:	e020      	b.n	80049fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049ba:	4b55      	ldr	r3, [pc, #340]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d11d      	bne.n	8004a02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ca:	e01a      	b.n	8004a02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049cc:	4b50      	ldr	r3, [pc, #320]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d116      	bne.n	8004a06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049dc:	e013      	b.n	8004a06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049de:	4b4c      	ldr	r3, [pc, #304]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10f      	bne.n	8004a0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049ea:	4b49      	ldr	r3, [pc, #292]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049fa:	e006      	b.n	8004a0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004a00:	e004      	b.n	8004a0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a02:	bf00      	nop
 8004a04:	e002      	b.n	8004a0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a06:	bf00      	nop
 8004a08:	e000      	b.n	8004a0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10d      	bne.n	8004a2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a12:	4b3f      	ldr	r3, [pc, #252]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6819      	ldr	r1, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	430b      	orrs	r3, r1
 8004a28:	4939      	ldr	r1, [pc, #228]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d167      	bne.n	8004b04 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a34:	4b36      	ldr	r3, [pc, #216]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a35      	ldr	r2, [pc, #212]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a40:	f7fe f9e6 	bl	8002e10 <HAL_GetTick>
 8004a44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a46:	e009      	b.n	8004a5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a48:	f7fe f9e2 	bl	8002e10 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d902      	bls.n	8004a5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	73fb      	strb	r3, [r7, #15]
        break;
 8004a5a:	e005      	b.n	8004a68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a5c:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1ef      	bne.n	8004a48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d14a      	bne.n	8004b04 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d111      	bne.n	8004a98 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a74:	4b26      	ldr	r3, [pc, #152]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6892      	ldr	r2, [r2, #8]
 8004a84:	0211      	lsls	r1, r2, #8
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68d2      	ldr	r2, [r2, #12]
 8004a8a:	0912      	lsrs	r2, r2, #4
 8004a8c:	0452      	lsls	r2, r2, #17
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	491f      	ldr	r1, [pc, #124]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	614b      	str	r3, [r1, #20]
 8004a96:	e011      	b.n	8004abc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a98:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004aa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6892      	ldr	r2, [r2, #8]
 8004aa8:	0211      	lsls	r1, r2, #8
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6912      	ldr	r2, [r2, #16]
 8004aae:	0852      	lsrs	r2, r2, #1
 8004ab0:	3a01      	subs	r2, #1
 8004ab2:	0652      	lsls	r2, r2, #25
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	4916      	ldr	r1, [pc, #88]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004abc:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac8:	f7fe f9a2 	bl	8002e10 <HAL_GetTick>
 8004acc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ace:	e009      	b.n	8004ae4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ad0:	f7fe f99e 	bl	8002e10 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d902      	bls.n	8004ae4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ae2:	e005      	b.n	8004af0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0ef      	beq.n	8004ad0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af8:	695a      	ldr	r2, [r3, #20]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	4904      	ldr	r1, [pc, #16]	; (8004b10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40021000 	.word	0x40021000

08004b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e049      	b.n	8004bba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fd fe96 	bl	800286c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	4619      	mov	r1, r3
 8004b52:	4610      	mov	r0, r2
 8004b54:	f000 fe4a 	bl	80057ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d001      	beq.n	8004bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e04f      	b.n	8004c7c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a23      	ldr	r2, [pc, #140]	; (8004c88 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d01d      	beq.n	8004c3a <HAL_TIM_Base_Start_IT+0x76>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c06:	d018      	beq.n	8004c3a <HAL_TIM_Base_Start_IT+0x76>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1f      	ldr	r2, [pc, #124]	; (8004c8c <HAL_TIM_Base_Start_IT+0xc8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d013      	beq.n	8004c3a <HAL_TIM_Base_Start_IT+0x76>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1e      	ldr	r2, [pc, #120]	; (8004c90 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00e      	beq.n	8004c3a <HAL_TIM_Base_Start_IT+0x76>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d009      	beq.n	8004c3a <HAL_TIM_Base_Start_IT+0x76>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_TIM_Base_Start_IT+0x76>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <HAL_TIM_Base_Start_IT+0xd8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d115      	bne.n	8004c66 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2b06      	cmp	r3, #6
 8004c4a:	d015      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0xb4>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c52:	d011      	beq.n	8004c78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c64:	e008      	b.n	8004c78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0201 	orr.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	e000      	b.n	8004c7a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800
 8004c94:	40000c00 	.word	0x40000c00
 8004c98:	40013400 	.word	0x40013400
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	00010007 	.word	0x00010007

08004ca4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e049      	b.n	8004d4a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f841 	bl	8004d52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	f000 fd82 	bl	80057ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <HAL_TIM_PWM_Start+0x24>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	e03c      	b.n	8004e06 <HAL_TIM_PWM_Start+0x9e>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d109      	bne.n	8004da6 <HAL_TIM_PWM_Start+0x3e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	bf14      	ite	ne
 8004d9e:	2301      	movne	r3, #1
 8004da0:	2300      	moveq	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	e02f      	b.n	8004e06 <HAL_TIM_PWM_Start+0x9e>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d109      	bne.n	8004dc0 <HAL_TIM_PWM_Start+0x58>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	bf14      	ite	ne
 8004db8:	2301      	movne	r3, #1
 8004dba:	2300      	moveq	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	e022      	b.n	8004e06 <HAL_TIM_PWM_Start+0x9e>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b0c      	cmp	r3, #12
 8004dc4:	d109      	bne.n	8004dda <HAL_TIM_PWM_Start+0x72>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	bf14      	ite	ne
 8004dd2:	2301      	movne	r3, #1
 8004dd4:	2300      	moveq	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	e015      	b.n	8004e06 <HAL_TIM_PWM_Start+0x9e>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d109      	bne.n	8004df4 <HAL_TIM_PWM_Start+0x8c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e008      	b.n	8004e06 <HAL_TIM_PWM_Start+0x9e>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	bf14      	ite	ne
 8004e00:	2301      	movne	r3, #1
 8004e02:	2300      	moveq	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e09c      	b.n	8004f48 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <HAL_TIM_PWM_Start+0xb6>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e1c:	e023      	b.n	8004e66 <HAL_TIM_PWM_Start+0xfe>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d104      	bne.n	8004e2e <HAL_TIM_PWM_Start+0xc6>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e2c:	e01b      	b.n	8004e66 <HAL_TIM_PWM_Start+0xfe>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d104      	bne.n	8004e3e <HAL_TIM_PWM_Start+0xd6>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e3c:	e013      	b.n	8004e66 <HAL_TIM_PWM_Start+0xfe>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b0c      	cmp	r3, #12
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_PWM_Start+0xe6>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e4c:	e00b      	b.n	8004e66 <HAL_TIM_PWM_Start+0xfe>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_PWM_Start+0xf6>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e5c:	e003      	b.n	8004e66 <HAL_TIM_PWM_Start+0xfe>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2202      	movs	r2, #2
 8004e62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	6839      	ldr	r1, [r7, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f001 f8c6 	bl	8006000 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a35      	ldr	r2, [pc, #212]	; (8004f50 <HAL_TIM_PWM_Start+0x1e8>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d013      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x13e>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a34      	ldr	r2, [pc, #208]	; (8004f54 <HAL_TIM_PWM_Start+0x1ec>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00e      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x13e>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a32      	ldr	r2, [pc, #200]	; (8004f58 <HAL_TIM_PWM_Start+0x1f0>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d009      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x13e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a31      	ldr	r2, [pc, #196]	; (8004f5c <HAL_TIM_PWM_Start+0x1f4>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d004      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x13e>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a2f      	ldr	r2, [pc, #188]	; (8004f60 <HAL_TIM_PWM_Start+0x1f8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d101      	bne.n	8004eaa <HAL_TIM_PWM_Start+0x142>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <HAL_TIM_PWM_Start+0x144>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d007      	beq.n	8004ec0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ebe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a22      	ldr	r2, [pc, #136]	; (8004f50 <HAL_TIM_PWM_Start+0x1e8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01d      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x19e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed2:	d018      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x19e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a22      	ldr	r2, [pc, #136]	; (8004f64 <HAL_TIM_PWM_Start+0x1fc>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d013      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x19e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a21      	ldr	r2, [pc, #132]	; (8004f68 <HAL_TIM_PWM_Start+0x200>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00e      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x19e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a1f      	ldr	r2, [pc, #124]	; (8004f6c <HAL_TIM_PWM_Start+0x204>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d009      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x19e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a17      	ldr	r2, [pc, #92]	; (8004f54 <HAL_TIM_PWM_Start+0x1ec>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d004      	beq.n	8004f06 <HAL_TIM_PWM_Start+0x19e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a15      	ldr	r2, [pc, #84]	; (8004f58 <HAL_TIM_PWM_Start+0x1f0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d115      	bne.n	8004f32 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <HAL_TIM_PWM_Start+0x208>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b06      	cmp	r3, #6
 8004f16:	d015      	beq.n	8004f44 <HAL_TIM_PWM_Start+0x1dc>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1e:	d011      	beq.n	8004f44 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f30:	e008      	b.n	8004f44 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	e000      	b.n	8004f46 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40012c00 	.word	0x40012c00
 8004f54:	40013400 	.word	0x40013400
 8004f58:	40014000 	.word	0x40014000
 8004f5c:	40014400 	.word	0x40014400
 8004f60:	40014800 	.word	0x40014800
 8004f64:	40000400 	.word	0x40000400
 8004f68:	40000800 	.word	0x40000800
 8004f6c:	40000c00 	.word	0x40000c00
 8004f70:	00010007 	.word	0x00010007

08004f74 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e097      	b.n	80050b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7fd fbe3 	bl	8002768 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6812      	ldr	r2, [r2, #0]
 8004fb4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004fb8:	f023 0307 	bic.w	r3, r3, #7
 8004fbc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f000 fc0f 	bl	80057ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	4313      	orrs	r3, r2
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005014:	f023 030c 	bic.w	r3, r3, #12
 8005018:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005020:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005024:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	4313      	orrs	r3, r2
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	011a      	lsls	r2, r3, #4
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	031b      	lsls	r3, r3, #12
 8005044:	4313      	orrs	r3, r2
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005052:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800505a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	4313      	orrs	r3, r2
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d110      	bne.n	8005112 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d102      	bne.n	80050fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050f6:	7b7b      	ldrb	r3, [r7, #13]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d001      	beq.n	8005100 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e069      	b.n	80051d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005110:	e031      	b.n	8005176 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b04      	cmp	r3, #4
 8005116:	d110      	bne.n	800513a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005118:	7bbb      	ldrb	r3, [r7, #14]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d102      	bne.n	8005124 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800511e:	7b3b      	ldrb	r3, [r7, #12]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d001      	beq.n	8005128 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e055      	b.n	80051d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005138:	e01d      	b.n	8005176 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d108      	bne.n	8005152 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005140:	7bbb      	ldrb	r3, [r7, #14]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d105      	bne.n	8005152 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005146:	7b7b      	ldrb	r3, [r7, #13]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d102      	bne.n	8005152 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800514c:	7b3b      	ldrb	r3, [r7, #12]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d001      	beq.n	8005156 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e03e      	b.n	80051d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2202      	movs	r2, #2
 8005162:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_TIM_Encoder_Start+0xc4>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b04      	cmp	r3, #4
 8005180:	d008      	beq.n	8005194 <HAL_TIM_Encoder_Start+0xd4>
 8005182:	e00f      	b.n	80051a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2201      	movs	r2, #1
 800518a:	2100      	movs	r1, #0
 800518c:	4618      	mov	r0, r3
 800518e:	f000 ff37 	bl	8006000 <TIM_CCxChannelCmd>
      break;
 8005192:	e016      	b.n	80051c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2201      	movs	r2, #1
 800519a:	2104      	movs	r1, #4
 800519c:	4618      	mov	r0, r3
 800519e:	f000 ff2f 	bl	8006000 <TIM_CCxChannelCmd>
      break;
 80051a2:	e00e      	b.n	80051c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2201      	movs	r2, #1
 80051aa:	2100      	movs	r1, #0
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 ff27 	bl	8006000 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2201      	movs	r2, #1
 80051b8:	2104      	movs	r1, #4
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 ff20 	bl	8006000 <TIM_CCxChannelCmd>
      break;
 80051c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d020      	beq.n	8005240 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01b      	beq.n	8005240 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0202 	mvn.w	r2, #2
 8005210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fac1 	bl	80057ae <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fab3 	bl	800579a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fac4 	bl	80057c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d020      	beq.n	800528c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01b      	beq.n	800528c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0204 	mvn.w	r2, #4
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fa9b 	bl	80057ae <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fa8d 	bl	800579a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fa9e 	bl	80057c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d020      	beq.n	80052d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01b      	beq.n	80052d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0208 	mvn.w	r2, #8
 80052a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2204      	movs	r2, #4
 80052ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fa75 	bl	80057ae <HAL_TIM_IC_CaptureCallback>
 80052c4:	e005      	b.n	80052d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fa67 	bl	800579a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fa78 	bl	80057c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d020      	beq.n	8005324 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01b      	beq.n	8005324 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0210 	mvn.w	r2, #16
 80052f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2208      	movs	r2, #8
 80052fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fa4f 	bl	80057ae <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fa41 	bl	800579a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fa52 	bl	80057c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00c      	beq.n	8005348 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d007      	beq.n	8005348 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0201 	mvn.w	r2, #1
 8005340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fd f9c2 	bl	80026cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 ff80 	bl	800626c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 ff78 	bl	8006280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00c      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa11 	bl	80057d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00c      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0220 	mvn.w	r2, #32
 80053d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 ff40 	bl	8006258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053d8:	bf00      	nop
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e0ff      	b.n	80055fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b14      	cmp	r3, #20
 800540a:	f200 80f0 	bhi.w	80055ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005469 	.word	0x08005469
 8005418:	080055ef 	.word	0x080055ef
 800541c:	080055ef 	.word	0x080055ef
 8005420:	080055ef 	.word	0x080055ef
 8005424:	080054a9 	.word	0x080054a9
 8005428:	080055ef 	.word	0x080055ef
 800542c:	080055ef 	.word	0x080055ef
 8005430:	080055ef 	.word	0x080055ef
 8005434:	080054eb 	.word	0x080054eb
 8005438:	080055ef 	.word	0x080055ef
 800543c:	080055ef 	.word	0x080055ef
 8005440:	080055ef 	.word	0x080055ef
 8005444:	0800552b 	.word	0x0800552b
 8005448:	080055ef 	.word	0x080055ef
 800544c:	080055ef 	.word	0x080055ef
 8005450:	080055ef 	.word	0x080055ef
 8005454:	0800556d 	.word	0x0800556d
 8005458:	080055ef 	.word	0x080055ef
 800545c:	080055ef 	.word	0x080055ef
 8005460:	080055ef 	.word	0x080055ef
 8005464:	080055ad 	.word	0x080055ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fa56 	bl	8005920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699a      	ldr	r2, [r3, #24]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0208 	orr.w	r2, r2, #8
 8005482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0204 	bic.w	r2, r2, #4
 8005492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6999      	ldr	r1, [r3, #24]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	619a      	str	r2, [r3, #24]
      break;
 80054a6:	e0a5      	b.n	80055f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fac6 	bl	8005a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6999      	ldr	r1, [r3, #24]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	021a      	lsls	r2, r3, #8
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	619a      	str	r2, [r3, #24]
      break;
 80054e8:	e084      	b.n	80055f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fb2f 	bl	8005b54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69da      	ldr	r2, [r3, #28]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f042 0208 	orr.w	r2, r2, #8
 8005504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0204 	bic.w	r2, r2, #4
 8005514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69d9      	ldr	r1, [r3, #28]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	61da      	str	r2, [r3, #28]
      break;
 8005528:	e064      	b.n	80055f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fb97 	bl	8005c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69d9      	ldr	r1, [r3, #28]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	021a      	lsls	r2, r3, #8
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	61da      	str	r2, [r3, #28]
      break;
 800556a:	e043      	b.n	80055f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fbe0 	bl	8005d38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0208 	orr.w	r2, r2, #8
 8005586:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0204 	bic.w	r2, r2, #4
 8005596:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055aa:	e023      	b.n	80055f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fc24 	bl	8005e00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	021a      	lsls	r2, r3, #8
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055ec:	e002      	b.n	80055f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	75fb      	strb	r3, [r7, #23]
      break;
 80055f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop

08005608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_TIM_ConfigClockSource+0x1c>
 8005620:	2302      	movs	r3, #2
 8005622:	e0b6      	b.n	8005792 <HAL_TIM_ConfigClockSource+0x18a>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005642:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800564e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005660:	d03e      	beq.n	80056e0 <HAL_TIM_ConfigClockSource+0xd8>
 8005662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005666:	f200 8087 	bhi.w	8005778 <HAL_TIM_ConfigClockSource+0x170>
 800566a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566e:	f000 8086 	beq.w	800577e <HAL_TIM_ConfigClockSource+0x176>
 8005672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005676:	d87f      	bhi.n	8005778 <HAL_TIM_ConfigClockSource+0x170>
 8005678:	2b70      	cmp	r3, #112	; 0x70
 800567a:	d01a      	beq.n	80056b2 <HAL_TIM_ConfigClockSource+0xaa>
 800567c:	2b70      	cmp	r3, #112	; 0x70
 800567e:	d87b      	bhi.n	8005778 <HAL_TIM_ConfigClockSource+0x170>
 8005680:	2b60      	cmp	r3, #96	; 0x60
 8005682:	d050      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0x11e>
 8005684:	2b60      	cmp	r3, #96	; 0x60
 8005686:	d877      	bhi.n	8005778 <HAL_TIM_ConfigClockSource+0x170>
 8005688:	2b50      	cmp	r3, #80	; 0x50
 800568a:	d03c      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0xfe>
 800568c:	2b50      	cmp	r3, #80	; 0x50
 800568e:	d873      	bhi.n	8005778 <HAL_TIM_ConfigClockSource+0x170>
 8005690:	2b40      	cmp	r3, #64	; 0x40
 8005692:	d058      	beq.n	8005746 <HAL_TIM_ConfigClockSource+0x13e>
 8005694:	2b40      	cmp	r3, #64	; 0x40
 8005696:	d86f      	bhi.n	8005778 <HAL_TIM_ConfigClockSource+0x170>
 8005698:	2b30      	cmp	r3, #48	; 0x30
 800569a:	d064      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0x15e>
 800569c:	2b30      	cmp	r3, #48	; 0x30
 800569e:	d86b      	bhi.n	8005778 <HAL_TIM_ConfigClockSource+0x170>
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d060      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0x15e>
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d867      	bhi.n	8005778 <HAL_TIM_ConfigClockSource+0x170>
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d05c      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0x15e>
 80056ac:	2b10      	cmp	r3, #16
 80056ae:	d05a      	beq.n	8005766 <HAL_TIM_ConfigClockSource+0x15e>
 80056b0:	e062      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056c2:	f000 fc7d 	bl	8005fc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	609a      	str	r2, [r3, #8]
      break;
 80056de:	e04f      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056f0:	f000 fc66 	bl	8005fc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005702:	609a      	str	r2, [r3, #8]
      break;
 8005704:	e03c      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005712:	461a      	mov	r2, r3
 8005714:	f000 fbda 	bl	8005ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2150      	movs	r1, #80	; 0x50
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fc33 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005724:	e02c      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005732:	461a      	mov	r2, r3
 8005734:	f000 fbf9 	bl	8005f2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2160      	movs	r1, #96	; 0x60
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fc23 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005744:	e01c      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005752:	461a      	mov	r2, r3
 8005754:	f000 fbba 	bl	8005ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2140      	movs	r1, #64	; 0x40
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fc13 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005764:	e00c      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4619      	mov	r1, r3
 8005770:	4610      	mov	r0, r2
 8005772:	f000 fc0a 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005776:	e003      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
      break;
 800577c:	e000      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800577e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a40      	ldr	r2, [pc, #256]	; (8005900 <TIM_Base_SetConfig+0x114>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d013      	beq.n	800582c <TIM_Base_SetConfig+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580a:	d00f      	beq.n	800582c <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a3d      	ldr	r2, [pc, #244]	; (8005904 <TIM_Base_SetConfig+0x118>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00b      	beq.n	800582c <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a3c      	ldr	r2, [pc, #240]	; (8005908 <TIM_Base_SetConfig+0x11c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d007      	beq.n	800582c <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a3b      	ldr	r2, [pc, #236]	; (800590c <TIM_Base_SetConfig+0x120>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_Base_SetConfig+0x40>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a3a      	ldr	r2, [pc, #232]	; (8005910 <TIM_Base_SetConfig+0x124>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d108      	bne.n	800583e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a2f      	ldr	r2, [pc, #188]	; (8005900 <TIM_Base_SetConfig+0x114>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d01f      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584c:	d01b      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a2c      	ldr	r2, [pc, #176]	; (8005904 <TIM_Base_SetConfig+0x118>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d017      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a2b      	ldr	r2, [pc, #172]	; (8005908 <TIM_Base_SetConfig+0x11c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a2a      	ldr	r2, [pc, #168]	; (800590c <TIM_Base_SetConfig+0x120>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00f      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a29      	ldr	r2, [pc, #164]	; (8005910 <TIM_Base_SetConfig+0x124>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00b      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a28      	ldr	r2, [pc, #160]	; (8005914 <TIM_Base_SetConfig+0x128>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d007      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a27      	ldr	r2, [pc, #156]	; (8005918 <TIM_Base_SetConfig+0x12c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d003      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a26      	ldr	r2, [pc, #152]	; (800591c <TIM_Base_SetConfig+0x130>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d108      	bne.n	8005898 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a10      	ldr	r2, [pc, #64]	; (8005900 <TIM_Base_SetConfig+0x114>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00f      	beq.n	80058e4 <TIM_Base_SetConfig+0xf8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a12      	ldr	r2, [pc, #72]	; (8005910 <TIM_Base_SetConfig+0x124>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00b      	beq.n	80058e4 <TIM_Base_SetConfig+0xf8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a11      	ldr	r2, [pc, #68]	; (8005914 <TIM_Base_SetConfig+0x128>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d007      	beq.n	80058e4 <TIM_Base_SetConfig+0xf8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a10      	ldr	r2, [pc, #64]	; (8005918 <TIM_Base_SetConfig+0x12c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d003      	beq.n	80058e4 <TIM_Base_SetConfig+0xf8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a0f      	ldr	r2, [pc, #60]	; (800591c <TIM_Base_SetConfig+0x130>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d103      	bne.n	80058ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	615a      	str	r2, [r3, #20]
}
 80058f2:	bf00      	nop
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40000400 	.word	0x40000400
 8005908:	40000800 	.word	0x40000800
 800590c:	40000c00 	.word	0x40000c00
 8005910:	40013400 	.word	0x40013400
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800

08005920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f023 0201 	bic.w	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f023 0302 	bic.w	r3, r3, #2
 800596c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a2c      	ldr	r2, [pc, #176]	; (8005a2c <TIM_OC1_SetConfig+0x10c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00f      	beq.n	80059a0 <TIM_OC1_SetConfig+0x80>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a2b      	ldr	r2, [pc, #172]	; (8005a30 <TIM_OC1_SetConfig+0x110>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00b      	beq.n	80059a0 <TIM_OC1_SetConfig+0x80>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a2a      	ldr	r2, [pc, #168]	; (8005a34 <TIM_OC1_SetConfig+0x114>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d007      	beq.n	80059a0 <TIM_OC1_SetConfig+0x80>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a29      	ldr	r2, [pc, #164]	; (8005a38 <TIM_OC1_SetConfig+0x118>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <TIM_OC1_SetConfig+0x80>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a28      	ldr	r2, [pc, #160]	; (8005a3c <TIM_OC1_SetConfig+0x11c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d10c      	bne.n	80059ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f023 0308 	bic.w	r3, r3, #8
 80059a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f023 0304 	bic.w	r3, r3, #4
 80059b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1b      	ldr	r2, [pc, #108]	; (8005a2c <TIM_OC1_SetConfig+0x10c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00f      	beq.n	80059e2 <TIM_OC1_SetConfig+0xc2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a1a      	ldr	r2, [pc, #104]	; (8005a30 <TIM_OC1_SetConfig+0x110>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00b      	beq.n	80059e2 <TIM_OC1_SetConfig+0xc2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a19      	ldr	r2, [pc, #100]	; (8005a34 <TIM_OC1_SetConfig+0x114>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d007      	beq.n	80059e2 <TIM_OC1_SetConfig+0xc2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a18      	ldr	r2, [pc, #96]	; (8005a38 <TIM_OC1_SetConfig+0x118>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_OC1_SetConfig+0xc2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a17      	ldr	r2, [pc, #92]	; (8005a3c <TIM_OC1_SetConfig+0x11c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d111      	bne.n	8005a06 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	621a      	str	r2, [r3, #32]
}
 8005a20:	bf00      	nop
 8005a22:	371c      	adds	r7, #28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40013400 	.word	0x40013400
 8005a34:	40014000 	.word	0x40014000
 8005a38:	40014400 	.word	0x40014400
 8005a3c:	40014800 	.word	0x40014800

08005a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f023 0210 	bic.w	r2, r3, #16
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0320 	bic.w	r3, r3, #32
 8005a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a28      	ldr	r2, [pc, #160]	; (8005b40 <TIM_OC2_SetConfig+0x100>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_OC2_SetConfig+0x6c>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a27      	ldr	r2, [pc, #156]	; (8005b44 <TIM_OC2_SetConfig+0x104>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d10d      	bne.n	8005ac8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a1d      	ldr	r2, [pc, #116]	; (8005b40 <TIM_OC2_SetConfig+0x100>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00f      	beq.n	8005af0 <TIM_OC2_SetConfig+0xb0>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a1c      	ldr	r2, [pc, #112]	; (8005b44 <TIM_OC2_SetConfig+0x104>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00b      	beq.n	8005af0 <TIM_OC2_SetConfig+0xb0>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a1b      	ldr	r2, [pc, #108]	; (8005b48 <TIM_OC2_SetConfig+0x108>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d007      	beq.n	8005af0 <TIM_OC2_SetConfig+0xb0>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a1a      	ldr	r2, [pc, #104]	; (8005b4c <TIM_OC2_SetConfig+0x10c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d003      	beq.n	8005af0 <TIM_OC2_SetConfig+0xb0>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a19      	ldr	r2, [pc, #100]	; (8005b50 <TIM_OC2_SetConfig+0x110>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d113      	bne.n	8005b18 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40012c00 	.word	0x40012c00
 8005b44:	40013400 	.word	0x40013400
 8005b48:	40014000 	.word	0x40014000
 8005b4c:	40014400 	.word	0x40014400
 8005b50:	40014800 	.word	0x40014800

08005b54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a27      	ldr	r2, [pc, #156]	; (8005c50 <TIM_OC3_SetConfig+0xfc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_OC3_SetConfig+0x6a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a26      	ldr	r2, [pc, #152]	; (8005c54 <TIM_OC3_SetConfig+0x100>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d10d      	bne.n	8005bda <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	021b      	lsls	r3, r3, #8
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a1c      	ldr	r2, [pc, #112]	; (8005c50 <TIM_OC3_SetConfig+0xfc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00f      	beq.n	8005c02 <TIM_OC3_SetConfig+0xae>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a1b      	ldr	r2, [pc, #108]	; (8005c54 <TIM_OC3_SetConfig+0x100>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00b      	beq.n	8005c02 <TIM_OC3_SetConfig+0xae>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a1a      	ldr	r2, [pc, #104]	; (8005c58 <TIM_OC3_SetConfig+0x104>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d007      	beq.n	8005c02 <TIM_OC3_SetConfig+0xae>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a19      	ldr	r2, [pc, #100]	; (8005c5c <TIM_OC3_SetConfig+0x108>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d003      	beq.n	8005c02 <TIM_OC3_SetConfig+0xae>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a18      	ldr	r2, [pc, #96]	; (8005c60 <TIM_OC3_SetConfig+0x10c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d113      	bne.n	8005c2a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	621a      	str	r2, [r3, #32]
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40013400 	.word	0x40013400
 8005c58:	40014000 	.word	0x40014000
 8005c5c:	40014400 	.word	0x40014400
 8005c60:	40014800 	.word	0x40014800

08005c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	031b      	lsls	r3, r3, #12
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a18      	ldr	r2, [pc, #96]	; (8005d24 <TIM_OC4_SetConfig+0xc0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00f      	beq.n	8005ce8 <TIM_OC4_SetConfig+0x84>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <TIM_OC4_SetConfig+0xc4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00b      	beq.n	8005ce8 <TIM_OC4_SetConfig+0x84>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a16      	ldr	r2, [pc, #88]	; (8005d2c <TIM_OC4_SetConfig+0xc8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d007      	beq.n	8005ce8 <TIM_OC4_SetConfig+0x84>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a15      	ldr	r2, [pc, #84]	; (8005d30 <TIM_OC4_SetConfig+0xcc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_OC4_SetConfig+0x84>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a14      	ldr	r2, [pc, #80]	; (8005d34 <TIM_OC4_SetConfig+0xd0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d109      	bne.n	8005cfc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	019b      	lsls	r3, r3, #6
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	621a      	str	r2, [r3, #32]
}
 8005d16:	bf00      	nop
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40013400 	.word	0x40013400
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40014400 	.word	0x40014400
 8005d34:	40014800 	.word	0x40014800

08005d38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	041b      	lsls	r3, r3, #16
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a17      	ldr	r2, [pc, #92]	; (8005dec <TIM_OC5_SetConfig+0xb4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00f      	beq.n	8005db2 <TIM_OC5_SetConfig+0x7a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a16      	ldr	r2, [pc, #88]	; (8005df0 <TIM_OC5_SetConfig+0xb8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00b      	beq.n	8005db2 <TIM_OC5_SetConfig+0x7a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a15      	ldr	r2, [pc, #84]	; (8005df4 <TIM_OC5_SetConfig+0xbc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d007      	beq.n	8005db2 <TIM_OC5_SetConfig+0x7a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a14      	ldr	r2, [pc, #80]	; (8005df8 <TIM_OC5_SetConfig+0xc0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d003      	beq.n	8005db2 <TIM_OC5_SetConfig+0x7a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a13      	ldr	r2, [pc, #76]	; (8005dfc <TIM_OC5_SetConfig+0xc4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d109      	bne.n	8005dc6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005db8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	621a      	str	r2, [r3, #32]
}
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	40012c00 	.word	0x40012c00
 8005df0:	40013400 	.word	0x40013400
 8005df4:	40014000 	.word	0x40014000
 8005df8:	40014400 	.word	0x40014400
 8005dfc:	40014800 	.word	0x40014800

08005e00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	021b      	lsls	r3, r3, #8
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	051b      	lsls	r3, r3, #20
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <TIM_OC6_SetConfig+0xb8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00f      	beq.n	8005e7c <TIM_OC6_SetConfig+0x7c>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a17      	ldr	r2, [pc, #92]	; (8005ebc <TIM_OC6_SetConfig+0xbc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00b      	beq.n	8005e7c <TIM_OC6_SetConfig+0x7c>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a16      	ldr	r2, [pc, #88]	; (8005ec0 <TIM_OC6_SetConfig+0xc0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d007      	beq.n	8005e7c <TIM_OC6_SetConfig+0x7c>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a15      	ldr	r2, [pc, #84]	; (8005ec4 <TIM_OC6_SetConfig+0xc4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d003      	beq.n	8005e7c <TIM_OC6_SetConfig+0x7c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a14      	ldr	r2, [pc, #80]	; (8005ec8 <TIM_OC6_SetConfig+0xc8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d109      	bne.n	8005e90 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	029b      	lsls	r3, r3, #10
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	621a      	str	r2, [r3, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40012c00 	.word	0x40012c00
 8005ebc:	40013400 	.word	0x40013400
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40014400 	.word	0x40014400
 8005ec8:	40014800 	.word	0x40014800

08005ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f023 0201 	bic.w	r2, r3, #1
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f023 030a 	bic.w	r3, r3, #10
 8005f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	621a      	str	r2, [r3, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b087      	sub	sp, #28
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f023 0210 	bic.w	r2, r3, #16
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	031b      	lsls	r3, r3, #12
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f043 0307 	orr.w	r3, r3, #7
 8005fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	021a      	lsls	r2, r3, #8
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	609a      	str	r2, [r3, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 031f 	and.w	r3, r3, #31
 8006012:	2201      	movs	r2, #1
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a1a      	ldr	r2, [r3, #32]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	43db      	mvns	r3, r3
 8006022:	401a      	ands	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a1a      	ldr	r2, [r3, #32]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f003 031f 	and.w	r3, r3, #31
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	fa01 f303 	lsl.w	r3, r1, r3
 8006038:	431a      	orrs	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
	...

0800604c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006060:	2302      	movs	r3, #2
 8006062:	e068      	b.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a2e      	ldr	r2, [pc, #184]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d004      	beq.n	8006098 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a2d      	ldr	r2, [pc, #180]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d108      	bne.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800609e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a1e      	ldr	r2, [pc, #120]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d01d      	beq.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d6:	d018      	beq.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a1b      	ldr	r2, [pc, #108]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d013      	beq.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1a      	ldr	r2, [pc, #104]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00e      	beq.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a18      	ldr	r2, [pc, #96]	; (8006154 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d009      	beq.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a13      	ldr	r2, [pc, #76]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d004      	beq.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a14      	ldr	r2, [pc, #80]	; (8006158 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d10c      	bne.n	8006124 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	4313      	orrs	r3, r2
 800611a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40012c00 	.word	0x40012c00
 8006148:	40013400 	.word	0x40013400
 800614c:	40000400 	.word	0x40000400
 8006150:	40000800 	.word	0x40000800
 8006154:	40000c00 	.word	0x40000c00
 8006158:	40014000 	.word	0x40014000

0800615c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006174:	2302      	movs	r3, #2
 8006176:	e065      	b.n	8006244 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a16      	ldr	r2, [pc, #88]	; (8006250 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d004      	beq.n	8006206 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a14      	ldr	r2, [pc, #80]	; (8006254 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d115      	bne.n	8006232 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	051b      	lsls	r3, r3, #20
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	4313      	orrs	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40012c00 	.word	0x40012c00
 8006254:	40013400 	.word	0x40013400

08006258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e040      	b.n	8006328 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d106      	bne.n	80062bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7fc fb30 	bl	800291c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2224      	movs	r2, #36	; 0x24
 80062c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0201 	bic.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fec0 	bl	8007060 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fc05 	bl	8006af0 <UART_SetConfig>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e01b      	b.n	8006328 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800630e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 ff3f 	bl	80071a4 <UART_CheckIdleState>
 8006326:	4603      	mov	r3, r0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08a      	sub	sp, #40	; 0x28
 8006334:	af02      	add	r7, sp, #8
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006344:	2b20      	cmp	r3, #32
 8006346:	d178      	bne.n	800643a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <HAL_UART_Transmit+0x24>
 800634e:	88fb      	ldrh	r3, [r7, #6]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e071      	b.n	800643c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2221      	movs	r2, #33	; 0x21
 8006364:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006366:	f7fc fd53 	bl	8002e10 <HAL_GetTick>
 800636a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	88fa      	ldrh	r2, [r7, #6]
 8006370:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	88fa      	ldrh	r2, [r7, #6]
 8006378:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006384:	d108      	bne.n	8006398 <HAL_UART_Transmit+0x68>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d104      	bne.n	8006398 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800638e:	2300      	movs	r3, #0
 8006390:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	61bb      	str	r3, [r7, #24]
 8006396:	e003      	b.n	80063a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800639c:	2300      	movs	r3, #0
 800639e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063a0:	e030      	b.n	8006404 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2200      	movs	r2, #0
 80063aa:	2180      	movs	r1, #128	; 0x80
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 ffa1 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d004      	beq.n	80063c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e03c      	b.n	800643c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10b      	bne.n	80063e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	881a      	ldrh	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063d4:	b292      	uxth	r2, r2
 80063d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	3302      	adds	r3, #2
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	e008      	b.n	80063f2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	781a      	ldrb	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	b292      	uxth	r2, r2
 80063ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	3301      	adds	r3, #1
 80063f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1c8      	bne.n	80063a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2200      	movs	r2, #0
 8006418:	2140      	movs	r1, #64	; 0x40
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 ff6a 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d004      	beq.n	8006430 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2220      	movs	r2, #32
 800642a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e005      	b.n	800643c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2220      	movs	r2, #32
 8006434:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	e000      	b.n	800643c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800643a:	2302      	movs	r3, #2
  }
}
 800643c:	4618      	mov	r0, r3
 800643e:	3720      	adds	r7, #32
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	; 0x28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	4613      	mov	r3, r2
 8006450:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006458:	2b20      	cmp	r3, #32
 800645a:	d137      	bne.n	80064cc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_UART_Receive_IT+0x24>
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e030      	b.n	80064ce <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a18      	ldr	r2, [pc, #96]	; (80064d8 <HAL_UART_Receive_IT+0x94>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d01f      	beq.n	80064bc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d018      	beq.n	80064bc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	e853 3f00 	ldrex	r3, [r3]
 8006496:	613b      	str	r3, [r7, #16]
   return(result);
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	461a      	mov	r2, r3
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	623b      	str	r3, [r7, #32]
 80064aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ac:	69f9      	ldr	r1, [r7, #28]
 80064ae:	6a3a      	ldr	r2, [r7, #32]
 80064b0:	e841 2300 	strex	r3, r2, [r1]
 80064b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1e6      	bne.n	800648a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064bc:	88fb      	ldrh	r3, [r7, #6]
 80064be:	461a      	mov	r2, r3
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 ff7e 	bl	80073c4 <UART_Start_Receive_IT>
 80064c8:	4603      	mov	r3, r0
 80064ca:	e000      	b.n	80064ce <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064cc:	2302      	movs	r3, #2
  }
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3728      	adds	r7, #40	; 0x28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	40008000 	.word	0x40008000

080064dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b0ba      	sub	sp, #232	; 0xe8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006502:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006506:	f640 030f 	movw	r3, #2063	; 0x80f
 800650a:	4013      	ands	r3, r2
 800650c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006514:	2b00      	cmp	r3, #0
 8006516:	d115      	bne.n	8006544 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00f      	beq.n	8006544 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006528:	f003 0320 	and.w	r3, r3, #32
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 82ae 	beq.w	8006a96 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	4798      	blx	r3
      }
      return;
 8006542:	e2a8      	b.n	8006a96 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 8117 	beq.w	800677c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800654e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800655a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800655e:	4b85      	ldr	r3, [pc, #532]	; (8006774 <HAL_UART_IRQHandler+0x298>)
 8006560:	4013      	ands	r3, r2
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 810a 	beq.w	800677c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d011      	beq.n	8006598 <HAL_UART_IRQHandler+0xbc>
 8006574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2201      	movs	r2, #1
 8006586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800658e:	f043 0201 	orr.w	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d011      	beq.n	80065c8 <HAL_UART_IRQHandler+0xec>
 80065a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00b      	beq.n	80065c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2202      	movs	r2, #2
 80065b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065be:	f043 0204 	orr.w	r2, r3, #4
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d011      	beq.n	80065f8 <HAL_UART_IRQHandler+0x11c>
 80065d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00b      	beq.n	80065f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2204      	movs	r2, #4
 80065e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ee:	f043 0202 	orr.w	r2, r3, #2
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b00      	cmp	r3, #0
 8006602:	d017      	beq.n	8006634 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d105      	bne.n	800661c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006614:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00b      	beq.n	8006634 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2208      	movs	r2, #8
 8006622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800662a:	f043 0208 	orr.w	r2, r3, #8
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800663c:	2b00      	cmp	r3, #0
 800663e:	d012      	beq.n	8006666 <HAL_UART_IRQHandler+0x18a>
 8006640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00c      	beq.n	8006666 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800665c:	f043 0220 	orr.w	r2, r3, #32
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8214 	beq.w	8006a9a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006676:	f003 0320 	and.w	r3, r3, #32
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00d      	beq.n	800669a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800667e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	d007      	beq.n	800669a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ae:	2b40      	cmp	r3, #64	; 0x40
 80066b0:	d005      	beq.n	80066be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d04f      	beq.n	800675e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 ff46 	bl	8007550 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ce:	2b40      	cmp	r3, #64	; 0x40
 80066d0:	d141      	bne.n	8006756 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3308      	adds	r3, #8
 80066d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3308      	adds	r3, #8
 80066fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800670a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1d9      	bne.n	80066d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006722:	2b00      	cmp	r3, #0
 8006724:	d013      	beq.n	800674e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800672a:	4a13      	ldr	r2, [pc, #76]	; (8006778 <HAL_UART_IRQHandler+0x29c>)
 800672c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006732:	4618      	mov	r0, r3
 8006734:	f7fc fc98 	bl	8003068 <HAL_DMA_Abort_IT>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d017      	beq.n	800676e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006748:	4610      	mov	r0, r2
 800674a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800674c:	e00f      	b.n	800676e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f9b8 	bl	8006ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006754:	e00b      	b.n	800676e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9b4 	bl	8006ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675c:	e007      	b.n	800676e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f9b0 	bl	8006ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800676c:	e195      	b.n	8006a9a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676e:	bf00      	nop
    return;
 8006770:	e193      	b.n	8006a9a <HAL_UART_IRQHandler+0x5be>
 8006772:	bf00      	nop
 8006774:	04000120 	.word	0x04000120
 8006778:	08007619 	.word	0x08007619

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006780:	2b01      	cmp	r3, #1
 8006782:	f040 814e 	bne.w	8006a22 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800678a:	f003 0310 	and.w	r3, r3, #16
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 8147 	beq.w	8006a22 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 8140 	beq.w	8006a22 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2210      	movs	r2, #16
 80067a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b4:	2b40      	cmp	r3, #64	; 0x40
 80067b6:	f040 80b8 	bne.w	800692a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 8167 	beq.w	8006a9e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067da:	429a      	cmp	r2, r3
 80067dc:	f080 815f 	bcs.w	8006a9e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f040 8086 	bne.w	8006908 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006808:	e853 3f00 	ldrex	r3, [r3]
 800680c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	461a      	mov	r2, r3
 8006822:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006826:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800682a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006832:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800683e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1da      	bne.n	80067fc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3308      	adds	r3, #8
 800684c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006858:	f023 0301 	bic.w	r3, r3, #1
 800685c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3308      	adds	r3, #8
 8006866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800686a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800686e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006872:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800687c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e1      	bne.n	8006846 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3308      	adds	r3, #8
 8006888:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3308      	adds	r3, #8
 80068a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e3      	bne.n	8006882 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068d8:	f023 0310 	bic.w	r3, r3, #16
 80068dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80068ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e4      	bne.n	80068c8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006902:	4618      	mov	r0, r3
 8006904:	f7fc fb72 	bl	8002fec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800691a:	b29b      	uxth	r3, r3
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	b29b      	uxth	r3, r3
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f8d8 	bl	8006ad8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006928:	e0b9      	b.n	8006a9e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006936:	b29b      	uxth	r3, r3
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 80ab 	beq.w	8006aa2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800694c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 80a6 	beq.w	8006aa2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006966:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800696a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006978:	647b      	str	r3, [r7, #68]	; 0x44
 800697a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800697e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e4      	bne.n	8006956 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3308      	adds	r3, #8
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	623b      	str	r3, [r7, #32]
   return(result);
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	f023 0301 	bic.w	r3, r3, #1
 80069a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3308      	adds	r3, #8
 80069ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069b0:	633a      	str	r2, [r7, #48]	; 0x30
 80069b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e3      	bne.n	800698c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	e853 3f00 	ldrex	r3, [r3]
 80069e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f023 0310 	bic.w	r3, r3, #16
 80069ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	461a      	mov	r2, r3
 80069f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069fa:	61fb      	str	r3, [r7, #28]
 80069fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	69b9      	ldr	r1, [r7, #24]
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	617b      	str	r3, [r7, #20]
   return(result);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e4      	bne.n	80069d8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2202      	movs	r2, #2
 8006a12:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f85c 	bl	8006ad8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a20:	e03f      	b.n	8006aa2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00e      	beq.n	8006a4c <HAL_UART_IRQHandler+0x570>
 8006a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d008      	beq.n	8006a4c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 ffe3 	bl	8007a10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a4a:	e02d      	b.n	8006aa8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00e      	beq.n	8006a76 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01c      	beq.n	8006aa6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	4798      	blx	r3
    }
    return;
 8006a74:	e017      	b.n	8006aa6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d012      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x5cc>
 8006a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00c      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fdd8 	bl	8007644 <UART_EndTransmit_IT>
    return;
 8006a94:	e008      	b.n	8006aa8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a96:	bf00      	nop
 8006a98:	e006      	b.n	8006aa8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006a9a:	bf00      	nop
 8006a9c:	e004      	b.n	8006aa8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006a9e:	bf00      	nop
 8006aa0:	e002      	b.n	8006aa8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006aa2:	bf00      	nop
 8006aa4:	e000      	b.n	8006aa8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006aa6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006aa8:	37e8      	adds	r7, #232	; 0xe8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop

08006ab0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006af4:	b08a      	sub	sp, #40	; 0x28
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	4ba4      	ldr	r3, [pc, #656]	; (8006db0 <UART_SetConfig+0x2c0>)
 8006b20:	4013      	ands	r3, r2
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	6812      	ldr	r2, [r2, #0]
 8006b26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b28:	430b      	orrs	r3, r1
 8006b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a99      	ldr	r2, [pc, #612]	; (8006db4 <UART_SetConfig+0x2c4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d004      	beq.n	8006b5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a90      	ldr	r2, [pc, #576]	; (8006db8 <UART_SetConfig+0x2c8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d126      	bne.n	8006bc8 <UART_SetConfig+0xd8>
 8006b7a:	4b90      	ldr	r3, [pc, #576]	; (8006dbc <UART_SetConfig+0x2cc>)
 8006b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d81b      	bhi.n	8006bc0 <UART_SetConfig+0xd0>
 8006b88:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <UART_SetConfig+0xa0>)
 8006b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8e:	bf00      	nop
 8006b90:	08006ba1 	.word	0x08006ba1
 8006b94:	08006bb1 	.word	0x08006bb1
 8006b98:	08006ba9 	.word	0x08006ba9
 8006b9c:	08006bb9 	.word	0x08006bb9
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba6:	e116      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bae:	e112      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb6:	e10e      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006bb8:	2308      	movs	r3, #8
 8006bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bbe:	e10a      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc6:	e106      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a7c      	ldr	r2, [pc, #496]	; (8006dc0 <UART_SetConfig+0x2d0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d138      	bne.n	8006c44 <UART_SetConfig+0x154>
 8006bd2:	4b7a      	ldr	r3, [pc, #488]	; (8006dbc <UART_SetConfig+0x2cc>)
 8006bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd8:	f003 030c 	and.w	r3, r3, #12
 8006bdc:	2b0c      	cmp	r3, #12
 8006bde:	d82d      	bhi.n	8006c3c <UART_SetConfig+0x14c>
 8006be0:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <UART_SetConfig+0xf8>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006c1d 	.word	0x08006c1d
 8006bec:	08006c3d 	.word	0x08006c3d
 8006bf0:	08006c3d 	.word	0x08006c3d
 8006bf4:	08006c3d 	.word	0x08006c3d
 8006bf8:	08006c2d 	.word	0x08006c2d
 8006bfc:	08006c3d 	.word	0x08006c3d
 8006c00:	08006c3d 	.word	0x08006c3d
 8006c04:	08006c3d 	.word	0x08006c3d
 8006c08:	08006c25 	.word	0x08006c25
 8006c0c:	08006c3d 	.word	0x08006c3d
 8006c10:	08006c3d 	.word	0x08006c3d
 8006c14:	08006c3d 	.word	0x08006c3d
 8006c18:	08006c35 	.word	0x08006c35
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c22:	e0d8      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006c24:	2302      	movs	r3, #2
 8006c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c2a:	e0d4      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006c2c:	2304      	movs	r3, #4
 8006c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c32:	e0d0      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006c34:	2308      	movs	r3, #8
 8006c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c3a:	e0cc      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006c3c:	2310      	movs	r3, #16
 8006c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c42:	e0c8      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a5e      	ldr	r2, [pc, #376]	; (8006dc4 <UART_SetConfig+0x2d4>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d125      	bne.n	8006c9a <UART_SetConfig+0x1aa>
 8006c4e:	4b5b      	ldr	r3, [pc, #364]	; (8006dbc <UART_SetConfig+0x2cc>)
 8006c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c58:	2b30      	cmp	r3, #48	; 0x30
 8006c5a:	d016      	beq.n	8006c8a <UART_SetConfig+0x19a>
 8006c5c:	2b30      	cmp	r3, #48	; 0x30
 8006c5e:	d818      	bhi.n	8006c92 <UART_SetConfig+0x1a2>
 8006c60:	2b20      	cmp	r3, #32
 8006c62:	d00a      	beq.n	8006c7a <UART_SetConfig+0x18a>
 8006c64:	2b20      	cmp	r3, #32
 8006c66:	d814      	bhi.n	8006c92 <UART_SetConfig+0x1a2>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <UART_SetConfig+0x182>
 8006c6c:	2b10      	cmp	r3, #16
 8006c6e:	d008      	beq.n	8006c82 <UART_SetConfig+0x192>
 8006c70:	e00f      	b.n	8006c92 <UART_SetConfig+0x1a2>
 8006c72:	2300      	movs	r3, #0
 8006c74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c78:	e0ad      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c80:	e0a9      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006c82:	2304      	movs	r3, #4
 8006c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c88:	e0a5      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006c8a:	2308      	movs	r3, #8
 8006c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c90:	e0a1      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006c92:	2310      	movs	r3, #16
 8006c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c98:	e09d      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a4a      	ldr	r2, [pc, #296]	; (8006dc8 <UART_SetConfig+0x2d8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d125      	bne.n	8006cf0 <UART_SetConfig+0x200>
 8006ca4:	4b45      	ldr	r3, [pc, #276]	; (8006dbc <UART_SetConfig+0x2cc>)
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006caa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006cae:	2bc0      	cmp	r3, #192	; 0xc0
 8006cb0:	d016      	beq.n	8006ce0 <UART_SetConfig+0x1f0>
 8006cb2:	2bc0      	cmp	r3, #192	; 0xc0
 8006cb4:	d818      	bhi.n	8006ce8 <UART_SetConfig+0x1f8>
 8006cb6:	2b80      	cmp	r3, #128	; 0x80
 8006cb8:	d00a      	beq.n	8006cd0 <UART_SetConfig+0x1e0>
 8006cba:	2b80      	cmp	r3, #128	; 0x80
 8006cbc:	d814      	bhi.n	8006ce8 <UART_SetConfig+0x1f8>
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <UART_SetConfig+0x1d8>
 8006cc2:	2b40      	cmp	r3, #64	; 0x40
 8006cc4:	d008      	beq.n	8006cd8 <UART_SetConfig+0x1e8>
 8006cc6:	e00f      	b.n	8006ce8 <UART_SetConfig+0x1f8>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cce:	e082      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd6:	e07e      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006cd8:	2304      	movs	r3, #4
 8006cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cde:	e07a      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce6:	e076      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006ce8:	2310      	movs	r3, #16
 8006cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cee:	e072      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a35      	ldr	r2, [pc, #212]	; (8006dcc <UART_SetConfig+0x2dc>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d12a      	bne.n	8006d50 <UART_SetConfig+0x260>
 8006cfa:	4b30      	ldr	r3, [pc, #192]	; (8006dbc <UART_SetConfig+0x2cc>)
 8006cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d08:	d01a      	beq.n	8006d40 <UART_SetConfig+0x250>
 8006d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d0e:	d81b      	bhi.n	8006d48 <UART_SetConfig+0x258>
 8006d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d14:	d00c      	beq.n	8006d30 <UART_SetConfig+0x240>
 8006d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1a:	d815      	bhi.n	8006d48 <UART_SetConfig+0x258>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <UART_SetConfig+0x238>
 8006d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d24:	d008      	beq.n	8006d38 <UART_SetConfig+0x248>
 8006d26:	e00f      	b.n	8006d48 <UART_SetConfig+0x258>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d2e:	e052      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006d30:	2302      	movs	r3, #2
 8006d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d36:	e04e      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006d38:	2304      	movs	r3, #4
 8006d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d3e:	e04a      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006d40:	2308      	movs	r3, #8
 8006d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d46:	e046      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006d48:	2310      	movs	r3, #16
 8006d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d4e:	e042      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a17      	ldr	r2, [pc, #92]	; (8006db4 <UART_SetConfig+0x2c4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d13a      	bne.n	8006dd0 <UART_SetConfig+0x2e0>
 8006d5a:	4b18      	ldr	r3, [pc, #96]	; (8006dbc <UART_SetConfig+0x2cc>)
 8006d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d68:	d01a      	beq.n	8006da0 <UART_SetConfig+0x2b0>
 8006d6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d6e:	d81b      	bhi.n	8006da8 <UART_SetConfig+0x2b8>
 8006d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d74:	d00c      	beq.n	8006d90 <UART_SetConfig+0x2a0>
 8006d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d7a:	d815      	bhi.n	8006da8 <UART_SetConfig+0x2b8>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <UART_SetConfig+0x298>
 8006d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d84:	d008      	beq.n	8006d98 <UART_SetConfig+0x2a8>
 8006d86:	e00f      	b.n	8006da8 <UART_SetConfig+0x2b8>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d8e:	e022      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006d90:	2302      	movs	r3, #2
 8006d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d96:	e01e      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006d98:	2304      	movs	r3, #4
 8006d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d9e:	e01a      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006da0:	2308      	movs	r3, #8
 8006da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da6:	e016      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006da8:	2310      	movs	r3, #16
 8006daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dae:	e012      	b.n	8006dd6 <UART_SetConfig+0x2e6>
 8006db0:	efff69f3 	.word	0xefff69f3
 8006db4:	40008000 	.word	0x40008000
 8006db8:	40013800 	.word	0x40013800
 8006dbc:	40021000 	.word	0x40021000
 8006dc0:	40004400 	.word	0x40004400
 8006dc4:	40004800 	.word	0x40004800
 8006dc8:	40004c00 	.word	0x40004c00
 8006dcc:	40005000 	.word	0x40005000
 8006dd0:	2310      	movs	r3, #16
 8006dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a9f      	ldr	r2, [pc, #636]	; (8007058 <UART_SetConfig+0x568>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d17a      	bne.n	8006ed6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006de0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d824      	bhi.n	8006e32 <UART_SetConfig+0x342>
 8006de8:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <UART_SetConfig+0x300>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e15 	.word	0x08006e15
 8006df4:	08006e33 	.word	0x08006e33
 8006df8:	08006e1d 	.word	0x08006e1d
 8006dfc:	08006e33 	.word	0x08006e33
 8006e00:	08006e23 	.word	0x08006e23
 8006e04:	08006e33 	.word	0x08006e33
 8006e08:	08006e33 	.word	0x08006e33
 8006e0c:	08006e33 	.word	0x08006e33
 8006e10:	08006e2b 	.word	0x08006e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e14:	f7fd f904 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 8006e18:	61f8      	str	r0, [r7, #28]
        break;
 8006e1a:	e010      	b.n	8006e3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e1c:	4b8f      	ldr	r3, [pc, #572]	; (800705c <UART_SetConfig+0x56c>)
 8006e1e:	61fb      	str	r3, [r7, #28]
        break;
 8006e20:	e00d      	b.n	8006e3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e22:	f7fd f865 	bl	8003ef0 <HAL_RCC_GetSysClockFreq>
 8006e26:	61f8      	str	r0, [r7, #28]
        break;
 8006e28:	e009      	b.n	8006e3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e2e:	61fb      	str	r3, [r7, #28]
        break;
 8006e30:	e005      	b.n	8006e3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 80fb 	beq.w	800703c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	4413      	add	r3, r2
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d305      	bcc.n	8006e62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e5c:	69fa      	ldr	r2, [r7, #28]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d903      	bls.n	8006e6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e68:	e0e8      	b.n	800703c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	461c      	mov	r4, r3
 8006e70:	4615      	mov	r5, r2
 8006e72:	f04f 0200 	mov.w	r2, #0
 8006e76:	f04f 0300 	mov.w	r3, #0
 8006e7a:	022b      	lsls	r3, r5, #8
 8006e7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006e80:	0222      	lsls	r2, r4, #8
 8006e82:	68f9      	ldr	r1, [r7, #12]
 8006e84:	6849      	ldr	r1, [r1, #4]
 8006e86:	0849      	lsrs	r1, r1, #1
 8006e88:	2000      	movs	r0, #0
 8006e8a:	4688      	mov	r8, r1
 8006e8c:	4681      	mov	r9, r0
 8006e8e:	eb12 0a08 	adds.w	sl, r2, r8
 8006e92:	eb43 0b09 	adc.w	fp, r3, r9
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	603b      	str	r3, [r7, #0]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea4:	4650      	mov	r0, sl
 8006ea6:	4659      	mov	r1, fp
 8006ea8:	f7f9 fe7e 	bl	8000ba8 <__aeabi_uldivmod>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eba:	d308      	bcc.n	8006ece <UART_SetConfig+0x3de>
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ec2:	d204      	bcs.n	8006ece <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	60da      	str	r2, [r3, #12]
 8006ecc:	e0b6      	b.n	800703c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ed4:	e0b2      	b.n	800703c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ede:	d15e      	bne.n	8006f9e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d828      	bhi.n	8006f3a <UART_SetConfig+0x44a>
 8006ee8:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <UART_SetConfig+0x400>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f15 	.word	0x08006f15
 8006ef4:	08006f1d 	.word	0x08006f1d
 8006ef8:	08006f25 	.word	0x08006f25
 8006efc:	08006f3b 	.word	0x08006f3b
 8006f00:	08006f2b 	.word	0x08006f2b
 8006f04:	08006f3b 	.word	0x08006f3b
 8006f08:	08006f3b 	.word	0x08006f3b
 8006f0c:	08006f3b 	.word	0x08006f3b
 8006f10:	08006f33 	.word	0x08006f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f14:	f7fd f884 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 8006f18:	61f8      	str	r0, [r7, #28]
        break;
 8006f1a:	e014      	b.n	8006f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f1c:	f7fd f896 	bl	800404c <HAL_RCC_GetPCLK2Freq>
 8006f20:	61f8      	str	r0, [r7, #28]
        break;
 8006f22:	e010      	b.n	8006f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f24:	4b4d      	ldr	r3, [pc, #308]	; (800705c <UART_SetConfig+0x56c>)
 8006f26:	61fb      	str	r3, [r7, #28]
        break;
 8006f28:	e00d      	b.n	8006f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2a:	f7fc ffe1 	bl	8003ef0 <HAL_RCC_GetSysClockFreq>
 8006f2e:	61f8      	str	r0, [r7, #28]
        break;
 8006f30:	e009      	b.n	8006f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f36:	61fb      	str	r3, [r7, #28]
        break;
 8006f38:	e005      	b.n	8006f46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d077      	beq.n	800703c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	005a      	lsls	r2, r3, #1
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	085b      	lsrs	r3, r3, #1
 8006f56:	441a      	add	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b0f      	cmp	r3, #15
 8006f66:	d916      	bls.n	8006f96 <UART_SetConfig+0x4a6>
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f6e:	d212      	bcs.n	8006f96 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	f023 030f 	bic.w	r3, r3, #15
 8006f78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	085b      	lsrs	r3, r3, #1
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f003 0307 	and.w	r3, r3, #7
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	8afb      	ldrh	r3, [r7, #22]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	8afa      	ldrh	r2, [r7, #22]
 8006f92:	60da      	str	r2, [r3, #12]
 8006f94:	e052      	b.n	800703c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f9c:	e04e      	b.n	800703c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d827      	bhi.n	8006ff6 <UART_SetConfig+0x506>
 8006fa6:	a201      	add	r2, pc, #4	; (adr r2, 8006fac <UART_SetConfig+0x4bc>)
 8006fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fac:	08006fd1 	.word	0x08006fd1
 8006fb0:	08006fd9 	.word	0x08006fd9
 8006fb4:	08006fe1 	.word	0x08006fe1
 8006fb8:	08006ff7 	.word	0x08006ff7
 8006fbc:	08006fe7 	.word	0x08006fe7
 8006fc0:	08006ff7 	.word	0x08006ff7
 8006fc4:	08006ff7 	.word	0x08006ff7
 8006fc8:	08006ff7 	.word	0x08006ff7
 8006fcc:	08006fef 	.word	0x08006fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd0:	f7fd f826 	bl	8004020 <HAL_RCC_GetPCLK1Freq>
 8006fd4:	61f8      	str	r0, [r7, #28]
        break;
 8006fd6:	e014      	b.n	8007002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fd8:	f7fd f838 	bl	800404c <HAL_RCC_GetPCLK2Freq>
 8006fdc:	61f8      	str	r0, [r7, #28]
        break;
 8006fde:	e010      	b.n	8007002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fe0:	4b1e      	ldr	r3, [pc, #120]	; (800705c <UART_SetConfig+0x56c>)
 8006fe2:	61fb      	str	r3, [r7, #28]
        break;
 8006fe4:	e00d      	b.n	8007002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fe6:	f7fc ff83 	bl	8003ef0 <HAL_RCC_GetSysClockFreq>
 8006fea:	61f8      	str	r0, [r7, #28]
        break;
 8006fec:	e009      	b.n	8007002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ff2:	61fb      	str	r3, [r7, #28]
        break;
 8006ff4:	e005      	b.n	8007002 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007000:	bf00      	nop
    }

    if (pclk != 0U)
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d019      	beq.n	800703c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	085a      	lsrs	r2, r3, #1
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	441a      	add	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	fbb2 f3f3 	udiv	r3, r2, r3
 800701a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	2b0f      	cmp	r3, #15
 8007020:	d909      	bls.n	8007036 <UART_SetConfig+0x546>
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007028:	d205      	bcs.n	8007036 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	b29a      	uxth	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	60da      	str	r2, [r3, #12]
 8007034:	e002      	b.n	800703c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007048:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800704c:	4618      	mov	r0, r3
 800704e:	3728      	adds	r7, #40	; 0x28
 8007050:	46bd      	mov	sp, r7
 8007052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007056:	bf00      	nop
 8007058:	40008000 	.word	0x40008000
 800705c:	00f42400 	.word	0x00f42400

08007060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00a      	beq.n	800708a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00a      	beq.n	80070ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	f003 0304 	and.w	r3, r3, #4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00a      	beq.n	8007112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01a      	beq.n	8007176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800715e:	d10a      	bne.n	8007176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	605a      	str	r2, [r3, #4]
  }
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b098      	sub	sp, #96	; 0x60
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071b4:	f7fb fe2c 	bl	8002e10 <HAL_GetTick>
 80071b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0308 	and.w	r3, r3, #8
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d12e      	bne.n	8007226 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071d0:	2200      	movs	r2, #0
 80071d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f88c 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d021      	beq.n	8007226 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071f6:	653b      	str	r3, [r7, #80]	; 0x50
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007200:	647b      	str	r3, [r7, #68]	; 0x44
 8007202:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800720e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e6      	bne.n	80071e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e062      	b.n	80072ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b04      	cmp	r3, #4
 8007232:	d149      	bne.n	80072c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007234:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800723c:	2200      	movs	r2, #0
 800723e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f856 	bl	80072f4 <UART_WaitOnFlagUntilTimeout>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d03c      	beq.n	80072c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	e853 3f00 	ldrex	r3, [r3]
 800725a:	623b      	str	r3, [r7, #32]
   return(result);
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	461a      	mov	r2, r3
 800726a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800726c:	633b      	str	r3, [r7, #48]	; 0x30
 800726e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007270:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007274:	e841 2300 	strex	r3, r2, [r1]
 8007278:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e6      	bne.n	800724e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3308      	adds	r3, #8
 8007286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0301 	bic.w	r3, r3, #1
 8007296:	64bb      	str	r3, [r7, #72]	; 0x48
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3308      	adds	r3, #8
 800729e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072a0:	61fa      	str	r2, [r7, #28]
 80072a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a4:	69b9      	ldr	r1, [r7, #24]
 80072a6:	69fa      	ldr	r2, [r7, #28]
 80072a8:	e841 2300 	strex	r3, r2, [r1]
 80072ac:	617b      	str	r3, [r7, #20]
   return(result);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1e5      	bne.n	8007280 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e011      	b.n	80072ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2220      	movs	r2, #32
 80072cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2220      	movs	r2, #32
 80072d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3758      	adds	r7, #88	; 0x58
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	603b      	str	r3, [r7, #0]
 8007300:	4613      	mov	r3, r2
 8007302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007304:	e049      	b.n	800739a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730c:	d045      	beq.n	800739a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730e:	f7fb fd7f 	bl	8002e10 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	429a      	cmp	r2, r3
 800731c:	d302      	bcc.n	8007324 <UART_WaitOnFlagUntilTimeout+0x30>
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e048      	b.n	80073ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d031      	beq.n	800739a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	f003 0308 	and.w	r3, r3, #8
 8007340:	2b08      	cmp	r3, #8
 8007342:	d110      	bne.n	8007366 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2208      	movs	r2, #8
 800734a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f8ff 	bl	8007550 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2208      	movs	r2, #8
 8007356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e029      	b.n	80073ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007374:	d111      	bne.n	800739a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800737e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 f8e5 	bl	8007550 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2220      	movs	r2, #32
 800738a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e00f      	b.n	80073ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	69da      	ldr	r2, [r3, #28]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	4013      	ands	r3, r2
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	bf0c      	ite	eq
 80073aa:	2301      	moveq	r3, #1
 80073ac:	2300      	movne	r3, #0
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	461a      	mov	r2, r3
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d0a6      	beq.n	8007306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b097      	sub	sp, #92	; 0x5c
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	4613      	mov	r3, r2
 80073d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	88fa      	ldrh	r2, [r7, #6]
 80073dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	88fa      	ldrh	r2, [r7, #6]
 80073e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f6:	d10e      	bne.n	8007416 <UART_Start_Receive_IT+0x52>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d105      	bne.n	800740c <UART_Start_Receive_IT+0x48>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007406:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800740a:	e02d      	b.n	8007468 <UART_Start_Receive_IT+0xa4>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	22ff      	movs	r2, #255	; 0xff
 8007410:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007414:	e028      	b.n	8007468 <UART_Start_Receive_IT+0xa4>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10d      	bne.n	800743a <UART_Start_Receive_IT+0x76>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d104      	bne.n	8007430 <UART_Start_Receive_IT+0x6c>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	22ff      	movs	r2, #255	; 0xff
 800742a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800742e:	e01b      	b.n	8007468 <UART_Start_Receive_IT+0xa4>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	227f      	movs	r2, #127	; 0x7f
 8007434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007438:	e016      	b.n	8007468 <UART_Start_Receive_IT+0xa4>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007442:	d10d      	bne.n	8007460 <UART_Start_Receive_IT+0x9c>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d104      	bne.n	8007456 <UART_Start_Receive_IT+0x92>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	227f      	movs	r2, #127	; 0x7f
 8007450:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007454:	e008      	b.n	8007468 <UART_Start_Receive_IT+0xa4>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	223f      	movs	r2, #63	; 0x3f
 800745a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800745e:	e003      	b.n	8007468 <UART_Start_Receive_IT+0xa4>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2222      	movs	r2, #34	; 0x22
 8007474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	3308      	adds	r3, #8
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007482:	e853 3f00 	ldrex	r3, [r3]
 8007486:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	f043 0301 	orr.w	r3, r3, #1
 800748e:	657b      	str	r3, [r7, #84]	; 0x54
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3308      	adds	r3, #8
 8007496:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007498:	64ba      	str	r2, [r7, #72]	; 0x48
 800749a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800749e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074a0:	e841 2300 	strex	r3, r2, [r1]
 80074a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e5      	bne.n	8007478 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b4:	d107      	bne.n	80074c6 <UART_Start_Receive_IT+0x102>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d103      	bne.n	80074c6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4a21      	ldr	r2, [pc, #132]	; (8007548 <UART_Start_Receive_IT+0x184>)
 80074c2:	669a      	str	r2, [r3, #104]	; 0x68
 80074c4:	e002      	b.n	80074cc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4a20      	ldr	r2, [pc, #128]	; (800754c <UART_Start_Receive_IT+0x188>)
 80074ca:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d019      	beq.n	8007508 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80074e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f2:	637b      	str	r3, [r7, #52]	; 0x34
 80074f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e6      	bne.n	80074d4 <UART_Start_Receive_IT+0x110>
 8007506:	e018      	b.n	800753a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	613b      	str	r3, [r7, #16]
   return(result);
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f043 0320 	orr.w	r3, r3, #32
 800751c:	653b      	str	r3, [r7, #80]	; 0x50
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007526:	623b      	str	r3, [r7, #32]
 8007528:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	69f9      	ldr	r1, [r7, #28]
 800752c:	6a3a      	ldr	r2, [r7, #32]
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	61bb      	str	r3, [r7, #24]
   return(result);
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e6      	bne.n	8007508 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	375c      	adds	r7, #92	; 0x5c
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	08007855 	.word	0x08007855
 800754c:	08007699 	.word	0x08007699

08007550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007550:	b480      	push	{r7}
 8007552:	b095      	sub	sp, #84	; 0x54
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800756c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007576:	643b      	str	r3, [r7, #64]	; 0x40
 8007578:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800757c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e6      	bne.n	8007558 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3308      	adds	r3, #8
 8007590:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	61fb      	str	r3, [r7, #28]
   return(result);
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	f023 0301 	bic.w	r3, r3, #1
 80075a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3308      	adds	r3, #8
 80075a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e5      	bne.n	800758a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d118      	bne.n	80075f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f023 0310 	bic.w	r3, r3, #16
 80075da:	647b      	str	r3, [r7, #68]	; 0x44
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	461a      	mov	r2, r3
 80075e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075e4:	61bb      	str	r3, [r7, #24]
 80075e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	6979      	ldr	r1, [r7, #20]
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	613b      	str	r3, [r7, #16]
   return(result);
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e6      	bne.n	80075c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2220      	movs	r2, #32
 80075fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800760c:	bf00      	nop
 800760e:	3754      	adds	r7, #84	; 0x54
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f7ff fa44 	bl	8006ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800763c:	bf00      	nop
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	60bb      	str	r3, [r7, #8]
   return(result);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007660:	61fb      	str	r3, [r7, #28]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	61bb      	str	r3, [r7, #24]
 800766c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	6979      	ldr	r1, [r7, #20]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	e841 2300 	strex	r3, r2, [r1]
 8007676:	613b      	str	r3, [r7, #16]
   return(result);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1e6      	bne.n	800764c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2220      	movs	r2, #32
 8007682:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7ff fa10 	bl	8006ab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007690:	bf00      	nop
 8007692:	3720      	adds	r7, #32
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b09c      	sub	sp, #112	; 0x70
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076b0:	2b22      	cmp	r3, #34	; 0x22
 80076b2:	f040 80be 	bne.w	8007832 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80076bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076c4:	b2d9      	uxtb	r1, r3
 80076c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d0:	400a      	ands	r2, r1
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	3b01      	subs	r3, #1
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f040 80a3 	bne.w	8007846 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007708:	e853 3f00 	ldrex	r3, [r3]
 800770c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800770e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007710:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007714:	66bb      	str	r3, [r7, #104]	; 0x68
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800771e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007720:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007724:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800772c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1e6      	bne.n	8007700 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3308      	adds	r3, #8
 8007738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007744:	f023 0301 	bic.w	r3, r3, #1
 8007748:	667b      	str	r3, [r7, #100]	; 0x64
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3308      	adds	r3, #8
 8007750:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007752:	647a      	str	r2, [r7, #68]	; 0x44
 8007754:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007758:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800775a:	e841 2300 	strex	r3, r2, [r1]
 800775e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e5      	bne.n	8007732 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2220      	movs	r2, #32
 800776a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a34      	ldr	r2, [pc, #208]	; (8007850 <UART_RxISR_8BIT+0x1b8>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d01f      	beq.n	80077c4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d018      	beq.n	80077c4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	e853 3f00 	ldrex	r3, [r3]
 800779e:	623b      	str	r3, [r7, #32]
   return(result);
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077a6:	663b      	str	r3, [r7, #96]	; 0x60
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077b0:	633b      	str	r3, [r7, #48]	; 0x30
 80077b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b8:	e841 2300 	strex	r3, r2, [r1]
 80077bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e6      	bne.n	8007792 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d12e      	bne.n	800782a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	60fb      	str	r3, [r7, #12]
   return(result);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f023 0310 	bic.w	r3, r3, #16
 80077e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077f0:	61fb      	str	r3, [r7, #28]
 80077f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	69b9      	ldr	r1, [r7, #24]
 80077f6:	69fa      	ldr	r2, [r7, #28]
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	617b      	str	r3, [r7, #20]
   return(result);
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e6      	bne.n	80077d2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	f003 0310 	and.w	r3, r3, #16
 800780e:	2b10      	cmp	r3, #16
 8007810:	d103      	bne.n	800781a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2210      	movs	r2, #16
 8007818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7ff f958 	bl	8006ad8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007828:	e00d      	b.n	8007846 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7fa fb56 	bl	8001edc <HAL_UART_RxCpltCallback>
}
 8007830:	e009      	b.n	8007846 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	8b1b      	ldrh	r3, [r3, #24]
 8007838:	b29a      	uxth	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 0208 	orr.w	r2, r2, #8
 8007842:	b292      	uxth	r2, r2
 8007844:	831a      	strh	r2, [r3, #24]
}
 8007846:	bf00      	nop
 8007848:	3770      	adds	r7, #112	; 0x70
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	40008000 	.word	0x40008000

08007854 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b09c      	sub	sp, #112	; 0x70
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007862:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800786c:	2b22      	cmp	r3, #34	; 0x22
 800786e:	f040 80be 	bne.w	80079ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007878:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007880:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007882:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007886:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800788a:	4013      	ands	r3, r2
 800788c:	b29a      	uxth	r2, r3
 800788e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007890:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007896:	1c9a      	adds	r2, r3, #2
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f040 80a3 	bne.w	8007a02 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80078ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078d0:	667b      	str	r3, [r7, #100]	; 0x64
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078da:	657b      	str	r3, [r7, #84]	; 0x54
 80078dc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078e2:	e841 2300 	strex	r3, r2, [r1]
 80078e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1e6      	bne.n	80078bc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3308      	adds	r3, #8
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007900:	f023 0301 	bic.w	r3, r3, #1
 8007904:	663b      	str	r3, [r7, #96]	; 0x60
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3308      	adds	r3, #8
 800790c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800790e:	643a      	str	r2, [r7, #64]	; 0x40
 8007910:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007916:	e841 2300 	strex	r3, r2, [r1]
 800791a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800791c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1e5      	bne.n	80078ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2220      	movs	r2, #32
 8007926:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a34      	ldr	r2, [pc, #208]	; (8007a0c <UART_RxISR_16BIT+0x1b8>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d01f      	beq.n	8007980 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d018      	beq.n	8007980 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	e853 3f00 	ldrex	r3, [r3]
 800795a:	61fb      	str	r3, [r7, #28]
   return(result);
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800796c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800796e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007974:	e841 2300 	strex	r3, r2, [r1]
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e6      	bne.n	800794e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007984:	2b01      	cmp	r3, #1
 8007986:	d12e      	bne.n	80079e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	e853 3f00 	ldrex	r3, [r3]
 800799a:	60bb      	str	r3, [r7, #8]
   return(result);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f023 0310 	bic.w	r3, r3, #16
 80079a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	461a      	mov	r2, r3
 80079aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079ac:	61bb      	str	r3, [r7, #24]
 80079ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	6979      	ldr	r1, [r7, #20]
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	e841 2300 	strex	r3, r2, [r1]
 80079b8:	613b      	str	r3, [r7, #16]
   return(result);
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e6      	bne.n	800798e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	f003 0310 	and.w	r3, r3, #16
 80079ca:	2b10      	cmp	r3, #16
 80079cc:	d103      	bne.n	80079d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2210      	movs	r2, #16
 80079d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff f87a 	bl	8006ad8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079e4:	e00d      	b.n	8007a02 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7fa fa78 	bl	8001edc <HAL_UART_RxCpltCallback>
}
 80079ec:	e009      	b.n	8007a02 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	8b1b      	ldrh	r3, [r3, #24]
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0208 	orr.w	r2, r2, #8
 80079fe:	b292      	uxth	r2, r2
 8007a00:	831a      	strh	r2, [r3, #24]
}
 8007a02:	bf00      	nop
 8007a04:	3770      	adds	r7, #112	; 0x70
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	40008000 	.word	0x40008000

08007a10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a36:	2b84      	cmp	r3, #132	; 0x84
 8007a38:	d005      	beq.n	8007a46 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007a3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4413      	add	r3, r2
 8007a42:	3303      	adds	r3, #3
 8007a44:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007a46:	68fb      	ldr	r3, [r7, #12]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007a58:	f000 fda6 	bl	80085a8 <vTaskStartScheduler>
  
  return osOK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a64:	b089      	sub	sp, #36	; 0x24
 8007a66:	af04      	add	r7, sp, #16
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d020      	beq.n	8007ab6 <osThreadCreate+0x54>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01c      	beq.n	8007ab6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685c      	ldr	r4, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	691e      	ldr	r6, [r3, #16]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff ffc8 	bl	8007a24 <makeFreeRtosPriority>
 8007a94:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a9e:	9202      	str	r2, [sp, #8]
 8007aa0:	9301      	str	r3, [sp, #4]
 8007aa2:	9100      	str	r1, [sp, #0]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	4632      	mov	r2, r6
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f000 fbb4 	bl	8008218 <xTaskCreateStatic>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	e01c      	b.n	8007af0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685c      	ldr	r4, [r3, #4]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ac2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7ff ffaa 	bl	8007a24 <makeFreeRtosPriority>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	f107 030c 	add.w	r3, r7, #12
 8007ad6:	9301      	str	r3, [sp, #4]
 8007ad8:	9200      	str	r2, [sp, #0]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	4632      	mov	r2, r6
 8007ade:	4629      	mov	r1, r5
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 fbf6 	bl	80082d2 <xTaskCreate>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d001      	beq.n	8007af0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007aec:	2300      	movs	r3, #0
 8007aee:	e000      	b.n	8007af2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007af0:	68fb      	ldr	r3, [r7, #12]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007afa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <osDelay+0x16>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	e000      	b.n	8007b12 <osDelay+0x18>
 8007b10:	2301      	movs	r3, #1
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fd14 	bl	8008540 <vTaskDelay>
  
  return osOK;
 8007b18:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f103 0208 	add.w	r2, r3, #8
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f04f 32ff 	mov.w	r2, #4294967295
 8007b3a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f103 0208 	add.w	r2, r3, #8
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f103 0208 	add.w	r2, r3, #8
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689a      	ldr	r2, [r3, #8]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	1c5a      	adds	r2, r3, #1
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	601a      	str	r2, [r3, #0]
}
 8007bb8:	bf00      	nop
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bda:	d103      	bne.n	8007be4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	e00c      	b.n	8007bfe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3308      	adds	r3, #8
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	e002      	b.n	8007bf2 <vListInsert+0x2e>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d2f6      	bcs.n	8007bec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	601a      	str	r2, [r3, #0]
}
 8007c2a:	bf00      	nop
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c36:	b480      	push	{r7}
 8007c38:	b085      	sub	sp, #20
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	6892      	ldr	r2, [r2, #8]
 8007c4c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	6852      	ldr	r2, [r2, #4]
 8007c56:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d103      	bne.n	8007c6a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689a      	ldr	r2, [r3, #8]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	1e5a      	subs	r2, r3, #1
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
	...

08007c8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10a      	bne.n	8007cb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007cb2:	bf00      	nop
 8007cb4:	e7fe      	b.n	8007cb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007cb6:	f001 faad 	bl	8009214 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc2:	68f9      	ldr	r1, [r7, #12]
 8007cc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cc6:	fb01 f303 	mul.w	r3, r1, r3
 8007cca:	441a      	add	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	68f9      	ldr	r1, [r7, #12]
 8007cea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cec:	fb01 f303 	mul.w	r3, r1, r3
 8007cf0:	441a      	add	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	22ff      	movs	r2, #255	; 0xff
 8007cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	22ff      	movs	r2, #255	; 0xff
 8007d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d114      	bne.n	8007d36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d01a      	beq.n	8007d4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3310      	adds	r3, #16
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fe87 	bl	8008a2c <xTaskRemoveFromEventList>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d012      	beq.n	8007d4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d24:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <xQueueGenericReset+0xcc>)
 8007d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	e009      	b.n	8007d4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3310      	adds	r3, #16
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7ff fef1 	bl	8007b22 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3324      	adds	r3, #36	; 0x24
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff feec 	bl	8007b22 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d4a:	f001 fa93 	bl	8009274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d4e:	2301      	movs	r3, #1
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08a      	sub	sp, #40	; 0x28
 8007d60:	af02      	add	r7, sp, #8
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	4613      	mov	r3, r2
 8007d68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10a      	bne.n	8007d86 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	613b      	str	r3, [r7, #16]
}
 8007d82:	bf00      	nop
 8007d84:	e7fe      	b.n	8007d84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	fb02 f303 	mul.w	r3, r2, r3
 8007d8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	3348      	adds	r3, #72	; 0x48
 8007d94:	4618      	mov	r0, r3
 8007d96:	f001 fb1f 	bl	80093d8 <pvPortMalloc>
 8007d9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d011      	beq.n	8007dc6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	3348      	adds	r3, #72	; 0x48
 8007daa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007db4:	79fa      	ldrb	r2, [r7, #7]
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	68b9      	ldr	r1, [r7, #8]
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 f805 	bl	8007dd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
	}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3720      	adds	r7, #32
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d103      	bne.n	8007dec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	e002      	b.n	8007df2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007dfe:	2101      	movs	r1, #1
 8007e00:	69b8      	ldr	r0, [r7, #24]
 8007e02:	f7ff ff43 	bl	8007c8c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e06:	bf00      	nop
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00e      	beq.n	8007e3a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007e2e:	2300      	movs	r3, #0
 8007e30:	2200      	movs	r2, #0
 8007e32:	2100      	movs	r1, #0
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f81d 	bl	8007e74 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007e3a:	bf00      	nop
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b086      	sub	sp, #24
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	4603      	mov	r3, r0
 8007e4a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	2300      	movs	r3, #0
 8007e52:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007e54:	79fb      	ldrb	r3, [r7, #7]
 8007e56:	461a      	mov	r2, r3
 8007e58:	6939      	ldr	r1, [r7, #16]
 8007e5a:	6978      	ldr	r0, [r7, #20]
 8007e5c:	f7ff ff7e 	bl	8007d5c <xQueueGenericCreate>
 8007e60:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f7ff ffd3 	bl	8007e0e <prvInitialiseMutex>

		return xNewQueue;
 8007e68:	68fb      	ldr	r3, [r7, #12]
	}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
	...

08007e74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08e      	sub	sp, #56	; 0x38
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
 8007e80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e82:	2300      	movs	r3, #0
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10a      	bne.n	8007ea6 <xQueueGenericSend+0x32>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d103      	bne.n	8007eb4 <xQueueGenericSend+0x40>
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <xQueueGenericSend+0x44>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e000      	b.n	8007eba <xQueueGenericSend+0x46>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10a      	bne.n	8007ed4 <xQueueGenericSend+0x60>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ed0:	bf00      	nop
 8007ed2:	e7fe      	b.n	8007ed2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d103      	bne.n	8007ee2 <xQueueGenericSend+0x6e>
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d101      	bne.n	8007ee6 <xQueueGenericSend+0x72>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e000      	b.n	8007ee8 <xQueueGenericSend+0x74>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10a      	bne.n	8007f02 <xQueueGenericSend+0x8e>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	623b      	str	r3, [r7, #32]
}
 8007efe:	bf00      	nop
 8007f00:	e7fe      	b.n	8007f00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f02:	f000 ff4f 	bl	8008da4 <xTaskGetSchedulerState>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d102      	bne.n	8007f12 <xQueueGenericSend+0x9e>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <xQueueGenericSend+0xa2>
 8007f12:	2301      	movs	r3, #1
 8007f14:	e000      	b.n	8007f18 <xQueueGenericSend+0xa4>
 8007f16:	2300      	movs	r3, #0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <xQueueGenericSend+0xbe>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	61fb      	str	r3, [r7, #28]
}
 8007f2e:	bf00      	nop
 8007f30:	e7fe      	b.n	8007f30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f32:	f001 f96f 	bl	8009214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d302      	bcc.n	8007f48 <xQueueGenericSend+0xd4>
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d129      	bne.n	8007f9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	68b9      	ldr	r1, [r7, #8]
 8007f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f4e:	f000 f88f 	bl	8008070 <prvCopyDataToQueue>
 8007f52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d010      	beq.n	8007f7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	3324      	adds	r3, #36	; 0x24
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fd63 	bl	8008a2c <xTaskRemoveFromEventList>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d013      	beq.n	8007f94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f6c:	4b3f      	ldr	r3, [pc, #252]	; (800806c <xQueueGenericSend+0x1f8>)
 8007f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	e00a      	b.n	8007f94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d007      	beq.n	8007f94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f84:	4b39      	ldr	r3, [pc, #228]	; (800806c <xQueueGenericSend+0x1f8>)
 8007f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f94:	f001 f96e 	bl	8009274 <vPortExitCritical>
				return pdPASS;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e063      	b.n	8008064 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d103      	bne.n	8007faa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fa2:	f001 f967 	bl	8009274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	e05c      	b.n	8008064 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d106      	bne.n	8007fbe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fb0:	f107 0314 	add.w	r3, r7, #20
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fd9b 	bl	8008af0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fbe:	f001 f959 	bl	8009274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fc2:	f000 fb51 	bl	8008668 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fc6:	f001 f925 	bl	8009214 <vPortEnterCritical>
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fd0:	b25b      	sxtb	r3, r3
 8007fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd6:	d103      	bne.n	8007fe0 <xQueueGenericSend+0x16c>
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fe6:	b25b      	sxtb	r3, r3
 8007fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fec:	d103      	bne.n	8007ff6 <xQueueGenericSend+0x182>
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ff6:	f001 f93d 	bl	8009274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ffa:	1d3a      	adds	r2, r7, #4
 8007ffc:	f107 0314 	add.w	r3, r7, #20
 8008000:	4611      	mov	r1, r2
 8008002:	4618      	mov	r0, r3
 8008004:	f000 fd8a 	bl	8008b1c <xTaskCheckForTimeOut>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d124      	bne.n	8008058 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800800e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008010:	f000 f8ea 	bl	80081e8 <prvIsQueueFull>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d018      	beq.n	800804c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	3310      	adds	r3, #16
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	4611      	mov	r1, r2
 8008022:	4618      	mov	r0, r3
 8008024:	f000 fcde 	bl	80089e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800802a:	f000 f88b 	bl	8008144 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800802e:	f000 fb29 	bl	8008684 <xTaskResumeAll>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	f47f af7c 	bne.w	8007f32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800803a:	4b0c      	ldr	r3, [pc, #48]	; (800806c <xQueueGenericSend+0x1f8>)
 800803c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	e772      	b.n	8007f32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800804c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800804e:	f000 f879 	bl	8008144 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008052:	f000 fb17 	bl	8008684 <xTaskResumeAll>
 8008056:	e76c      	b.n	8007f32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800805a:	f000 f873 	bl	8008144 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800805e:	f000 fb11 	bl	8008684 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008062:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008064:	4618      	mov	r0, r3
 8008066:	3738      	adds	r7, #56	; 0x38
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	e000ed04 	.word	0xe000ed04

08008070 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800807c:	2300      	movs	r3, #0
 800807e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008084:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10d      	bne.n	80080aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d14d      	bne.n	8008132 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 fea0 	bl	8008de0 <xTaskPriorityDisinherit>
 80080a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	609a      	str	r2, [r3, #8]
 80080a8:	e043      	b.n	8008132 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d119      	bne.n	80080e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6858      	ldr	r0, [r3, #4]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b8:	461a      	mov	r2, r3
 80080ba:	68b9      	ldr	r1, [r7, #8]
 80080bc:	f002 fa9f 	bl	800a5fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c8:	441a      	add	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d32b      	bcc.n	8008132 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	605a      	str	r2, [r3, #4]
 80080e2:	e026      	b.n	8008132 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	68d8      	ldr	r0, [r3, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ec:	461a      	mov	r2, r3
 80080ee:	68b9      	ldr	r1, [r7, #8]
 80080f0:	f002 fa85 	bl	800a5fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	68da      	ldr	r2, [r3, #12]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fc:	425b      	negs	r3, r3
 80080fe:	441a      	add	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	429a      	cmp	r2, r3
 800810e:	d207      	bcs.n	8008120 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	689a      	ldr	r2, [r3, #8]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008118:	425b      	negs	r3, r3
 800811a:	441a      	add	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b02      	cmp	r3, #2
 8008124:	d105      	bne.n	8008132 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	3b01      	subs	r3, #1
 8008130:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	1c5a      	adds	r2, r3, #1
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800813a:	697b      	ldr	r3, [r7, #20]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800814c:	f001 f862 	bl	8009214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008156:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008158:	e011      	b.n	800817e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	2b00      	cmp	r3, #0
 8008160:	d012      	beq.n	8008188 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	3324      	adds	r3, #36	; 0x24
 8008166:	4618      	mov	r0, r3
 8008168:	f000 fc60 	bl	8008a2c <xTaskRemoveFromEventList>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008172:	f000 fd35 	bl	8008be0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	3b01      	subs	r3, #1
 800817a:	b2db      	uxtb	r3, r3
 800817c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800817e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008182:	2b00      	cmp	r3, #0
 8008184:	dce9      	bgt.n	800815a <prvUnlockQueue+0x16>
 8008186:	e000      	b.n	800818a <prvUnlockQueue+0x46>
					break;
 8008188:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	22ff      	movs	r2, #255	; 0xff
 800818e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008192:	f001 f86f 	bl	8009274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008196:	f001 f83d 	bl	8009214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081a2:	e011      	b.n	80081c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d012      	beq.n	80081d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3310      	adds	r3, #16
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 fc3b 	bl	8008a2c <xTaskRemoveFromEventList>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081bc:	f000 fd10 	bl	8008be0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	3b01      	subs	r3, #1
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	dce9      	bgt.n	80081a4 <prvUnlockQueue+0x60>
 80081d0:	e000      	b.n	80081d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	22ff      	movs	r2, #255	; 0xff
 80081d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80081dc:	f001 f84a 	bl	8009274 <vPortExitCritical>
}
 80081e0:	bf00      	nop
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081f0:	f001 f810 	bl	8009214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d102      	bne.n	8008206 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008200:	2301      	movs	r3, #1
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	e001      	b.n	800820a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008206:	2300      	movs	r3, #0
 8008208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800820a:	f001 f833 	bl	8009274 <vPortExitCritical>

	return xReturn;
 800820e:	68fb      	ldr	r3, [r7, #12]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08e      	sub	sp, #56	; 0x38
 800821c:	af04      	add	r7, sp, #16
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10a      	bne.n	8008242 <xTaskCreateStatic+0x2a>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	623b      	str	r3, [r7, #32]
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <xTaskCreateStatic+0x46>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	61fb      	str	r3, [r7, #28]
}
 800825a:	bf00      	nop
 800825c:	e7fe      	b.n	800825c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800825e:	2354      	movs	r3, #84	; 0x54
 8008260:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2b54      	cmp	r3, #84	; 0x54
 8008266:	d00a      	beq.n	800827e <xTaskCreateStatic+0x66>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	61bb      	str	r3, [r7, #24]
}
 800827a:	bf00      	nop
 800827c:	e7fe      	b.n	800827c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800827e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008282:	2b00      	cmp	r3, #0
 8008284:	d01e      	beq.n	80082c4 <xTaskCreateStatic+0xac>
 8008286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01b      	beq.n	80082c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800828c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008294:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	2202      	movs	r2, #2
 800829a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800829e:	2300      	movs	r3, #0
 80082a0:	9303      	str	r3, [sp, #12]
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	9302      	str	r3, [sp, #8]
 80082a6:	f107 0314 	add.w	r3, r7, #20
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	68b9      	ldr	r1, [r7, #8]
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f000 f850 	bl	800835c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082be:	f000 f8d5 	bl	800846c <prvAddNewTaskToReadyList>
 80082c2:	e001      	b.n	80082c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80082c4:	2300      	movs	r3, #0
 80082c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80082c8:	697b      	ldr	r3, [r7, #20]
	}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3728      	adds	r7, #40	; 0x28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b08c      	sub	sp, #48	; 0x30
 80082d6:	af04      	add	r7, sp, #16
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	603b      	str	r3, [r7, #0]
 80082de:	4613      	mov	r3, r2
 80082e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082e2:	88fb      	ldrh	r3, [r7, #6]
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f001 f876 	bl	80093d8 <pvPortMalloc>
 80082ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00e      	beq.n	8008312 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082f4:	2054      	movs	r0, #84	; 0x54
 80082f6:	f001 f86f 	bl	80093d8 <pvPortMalloc>
 80082fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	631a      	str	r2, [r3, #48]	; 0x30
 8008308:	e005      	b.n	8008316 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800830a:	6978      	ldr	r0, [r7, #20]
 800830c:	f001 f930 	bl	8009570 <vPortFree>
 8008310:	e001      	b.n	8008316 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008312:	2300      	movs	r3, #0
 8008314:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d017      	beq.n	800834c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008324:	88fa      	ldrh	r2, [r7, #6]
 8008326:	2300      	movs	r3, #0
 8008328:	9303      	str	r3, [sp, #12]
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	9302      	str	r3, [sp, #8]
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	9301      	str	r3, [sp, #4]
 8008332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	68b9      	ldr	r1, [r7, #8]
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 f80e 	bl	800835c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008340:	69f8      	ldr	r0, [r7, #28]
 8008342:	f000 f893 	bl	800846c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008346:	2301      	movs	r3, #1
 8008348:	61bb      	str	r3, [r7, #24]
 800834a:	e002      	b.n	8008352 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800834c:	f04f 33ff 	mov.w	r3, #4294967295
 8008350:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008352:	69bb      	ldr	r3, [r7, #24]
	}
 8008354:	4618      	mov	r0, r3
 8008356:	3720      	adds	r7, #32
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b088      	sub	sp, #32
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
 8008368:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008374:	3b01      	subs	r3, #1
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	f023 0307 	bic.w	r3, r3, #7
 8008382:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00a      	beq.n	80083a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	617b      	str	r3, [r7, #20]
}
 80083a0:	bf00      	nop
 80083a2:	e7fe      	b.n	80083a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d01f      	beq.n	80083ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083aa:	2300      	movs	r3, #0
 80083ac:	61fb      	str	r3, [r7, #28]
 80083ae:	e012      	b.n	80083d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	4413      	add	r3, r2
 80083b6:	7819      	ldrb	r1, [r3, #0]
 80083b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	4413      	add	r3, r2
 80083be:	3334      	adds	r3, #52	; 0x34
 80083c0:	460a      	mov	r2, r1
 80083c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	4413      	add	r3, r2
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d006      	beq.n	80083de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	3301      	adds	r3, #1
 80083d4:	61fb      	str	r3, [r7, #28]
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	2b0f      	cmp	r3, #15
 80083da:	d9e9      	bls.n	80083b0 <prvInitialiseNewTask+0x54>
 80083dc:	e000      	b.n	80083e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80083de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083e8:	e003      	b.n	80083f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f4:	2b06      	cmp	r3, #6
 80083f6:	d901      	bls.n	80083fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083f8:	2306      	movs	r3, #6
 80083fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008400:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008406:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	2200      	movs	r2, #0
 800840c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	3304      	adds	r3, #4
 8008412:	4618      	mov	r0, r3
 8008414:	f7ff fba5 	bl	8007b62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	3318      	adds	r3, #24
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff fba0 	bl	8007b62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008426:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	f1c3 0207 	rsb	r2, r3, #7
 800842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008430:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008436:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	2200      	movs	r2, #0
 800843c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	68f9      	ldr	r1, [r7, #12]
 800844a:	69b8      	ldr	r0, [r7, #24]
 800844c:	f000 fdb4 	bl	8008fb8 <pxPortInitialiseStack>
 8008450:	4602      	mov	r2, r0
 8008452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008454:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008462:	bf00      	nop
 8008464:	3720      	adds	r7, #32
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008474:	f000 fece 	bl	8009214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008478:	4b2a      	ldr	r3, [pc, #168]	; (8008524 <prvAddNewTaskToReadyList+0xb8>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3301      	adds	r3, #1
 800847e:	4a29      	ldr	r2, [pc, #164]	; (8008524 <prvAddNewTaskToReadyList+0xb8>)
 8008480:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008482:	4b29      	ldr	r3, [pc, #164]	; (8008528 <prvAddNewTaskToReadyList+0xbc>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d109      	bne.n	800849e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800848a:	4a27      	ldr	r2, [pc, #156]	; (8008528 <prvAddNewTaskToReadyList+0xbc>)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008490:	4b24      	ldr	r3, [pc, #144]	; (8008524 <prvAddNewTaskToReadyList+0xb8>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d110      	bne.n	80084ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008498:	f000 fbc6 	bl	8008c28 <prvInitialiseTaskLists>
 800849c:	e00d      	b.n	80084ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800849e:	4b23      	ldr	r3, [pc, #140]	; (800852c <prvAddNewTaskToReadyList+0xc0>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d109      	bne.n	80084ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084a6:	4b20      	ldr	r3, [pc, #128]	; (8008528 <prvAddNewTaskToReadyList+0xbc>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d802      	bhi.n	80084ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084b4:	4a1c      	ldr	r2, [pc, #112]	; (8008528 <prvAddNewTaskToReadyList+0xbc>)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084ba:	4b1d      	ldr	r3, [pc, #116]	; (8008530 <prvAddNewTaskToReadyList+0xc4>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	3301      	adds	r3, #1
 80084c0:	4a1b      	ldr	r2, [pc, #108]	; (8008530 <prvAddNewTaskToReadyList+0xc4>)
 80084c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	2201      	movs	r2, #1
 80084ca:	409a      	lsls	r2, r3
 80084cc:	4b19      	ldr	r3, [pc, #100]	; (8008534 <prvAddNewTaskToReadyList+0xc8>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	4a18      	ldr	r2, [pc, #96]	; (8008534 <prvAddNewTaskToReadyList+0xc8>)
 80084d4:	6013      	str	r3, [r2, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084da:	4613      	mov	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4a15      	ldr	r2, [pc, #84]	; (8008538 <prvAddNewTaskToReadyList+0xcc>)
 80084e4:	441a      	add	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	3304      	adds	r3, #4
 80084ea:	4619      	mov	r1, r3
 80084ec:	4610      	mov	r0, r2
 80084ee:	f7ff fb45 	bl	8007b7c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084f2:	f000 febf 	bl	8009274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084f6:	4b0d      	ldr	r3, [pc, #52]	; (800852c <prvAddNewTaskToReadyList+0xc0>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00e      	beq.n	800851c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084fe:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <prvAddNewTaskToReadyList+0xbc>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	429a      	cmp	r2, r3
 800850a:	d207      	bcs.n	800851c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800850c:	4b0b      	ldr	r3, [pc, #44]	; (800853c <prvAddNewTaskToReadyList+0xd0>)
 800850e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800851c:	bf00      	nop
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	2000090c 	.word	0x2000090c
 8008528:	2000080c 	.word	0x2000080c
 800852c:	20000918 	.word	0x20000918
 8008530:	20000928 	.word	0x20000928
 8008534:	20000914 	.word	0x20000914
 8008538:	20000810 	.word	0x20000810
 800853c:	e000ed04 	.word	0xe000ed04

08008540 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008548:	2300      	movs	r3, #0
 800854a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d017      	beq.n	8008582 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008552:	4b13      	ldr	r3, [pc, #76]	; (80085a0 <vTaskDelay+0x60>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <vTaskDelay+0x30>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	60bb      	str	r3, [r7, #8]
}
 800856c:	bf00      	nop
 800856e:	e7fe      	b.n	800856e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008570:	f000 f87a 	bl	8008668 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008574:	2100      	movs	r1, #0
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fcb8 	bl	8008eec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800857c:	f000 f882 	bl	8008684 <xTaskResumeAll>
 8008580:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d107      	bne.n	8008598 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008588:	4b06      	ldr	r3, [pc, #24]	; (80085a4 <vTaskDelay+0x64>)
 800858a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008598:	bf00      	nop
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	20000934 	.word	0x20000934
 80085a4:	e000ed04 	.word	0xe000ed04

080085a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08a      	sub	sp, #40	; 0x28
 80085ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085b2:	2300      	movs	r3, #0
 80085b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085b6:	463a      	mov	r2, r7
 80085b8:	1d39      	adds	r1, r7, #4
 80085ba:	f107 0308 	add.w	r3, r7, #8
 80085be:	4618      	mov	r0, r3
 80085c0:	f7f8 fdf2 	bl	80011a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	9202      	str	r2, [sp, #8]
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	2300      	movs	r3, #0
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	2300      	movs	r3, #0
 80085d4:	460a      	mov	r2, r1
 80085d6:	491e      	ldr	r1, [pc, #120]	; (8008650 <vTaskStartScheduler+0xa8>)
 80085d8:	481e      	ldr	r0, [pc, #120]	; (8008654 <vTaskStartScheduler+0xac>)
 80085da:	f7ff fe1d 	bl	8008218 <xTaskCreateStatic>
 80085de:	4603      	mov	r3, r0
 80085e0:	4a1d      	ldr	r2, [pc, #116]	; (8008658 <vTaskStartScheduler+0xb0>)
 80085e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085e4:	4b1c      	ldr	r3, [pc, #112]	; (8008658 <vTaskStartScheduler+0xb0>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d002      	beq.n	80085f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085ec:	2301      	movs	r3, #1
 80085ee:	617b      	str	r3, [r7, #20]
 80085f0:	e001      	b.n	80085f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085f2:	2300      	movs	r3, #0
 80085f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d116      	bne.n	800862a <vTaskStartScheduler+0x82>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	613b      	str	r3, [r7, #16]
}
 800860e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008610:	4b12      	ldr	r3, [pc, #72]	; (800865c <vTaskStartScheduler+0xb4>)
 8008612:	f04f 32ff 	mov.w	r2, #4294967295
 8008616:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008618:	4b11      	ldr	r3, [pc, #68]	; (8008660 <vTaskStartScheduler+0xb8>)
 800861a:	2201      	movs	r2, #1
 800861c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800861e:	4b11      	ldr	r3, [pc, #68]	; (8008664 <vTaskStartScheduler+0xbc>)
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008624:	f000 fd54 	bl	80090d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008628:	e00e      	b.n	8008648 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008630:	d10a      	bne.n	8008648 <vTaskStartScheduler+0xa0>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	60fb      	str	r3, [r7, #12]
}
 8008644:	bf00      	nop
 8008646:	e7fe      	b.n	8008646 <vTaskStartScheduler+0x9e>
}
 8008648:	bf00      	nop
 800864a:	3718      	adds	r7, #24
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	0800cfa4 	.word	0x0800cfa4
 8008654:	08008bf9 	.word	0x08008bf9
 8008658:	20000930 	.word	0x20000930
 800865c:	2000092c 	.word	0x2000092c
 8008660:	20000918 	.word	0x20000918
 8008664:	20000910 	.word	0x20000910

08008668 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800866c:	4b04      	ldr	r3, [pc, #16]	; (8008680 <vTaskSuspendAll+0x18>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3301      	adds	r3, #1
 8008672:	4a03      	ldr	r2, [pc, #12]	; (8008680 <vTaskSuspendAll+0x18>)
 8008674:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008676:	bf00      	nop
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	20000934 	.word	0x20000934

08008684 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800868a:	2300      	movs	r3, #0
 800868c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800868e:	2300      	movs	r3, #0
 8008690:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008692:	4b41      	ldr	r3, [pc, #260]	; (8008798 <xTaskResumeAll+0x114>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	603b      	str	r3, [r7, #0]
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086b0:	f000 fdb0 	bl	8009214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086b4:	4b38      	ldr	r3, [pc, #224]	; (8008798 <xTaskResumeAll+0x114>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	4a37      	ldr	r2, [pc, #220]	; (8008798 <xTaskResumeAll+0x114>)
 80086bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086be:	4b36      	ldr	r3, [pc, #216]	; (8008798 <xTaskResumeAll+0x114>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d161      	bne.n	800878a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086c6:	4b35      	ldr	r3, [pc, #212]	; (800879c <xTaskResumeAll+0x118>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d05d      	beq.n	800878a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086ce:	e02e      	b.n	800872e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d0:	4b33      	ldr	r3, [pc, #204]	; (80087a0 <xTaskResumeAll+0x11c>)
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	3318      	adds	r3, #24
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff faaa 	bl	8007c36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	3304      	adds	r3, #4
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7ff faa5 	bl	8007c36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	2201      	movs	r2, #1
 80086f2:	409a      	lsls	r2, r3
 80086f4:	4b2b      	ldr	r3, [pc, #172]	; (80087a4 <xTaskResumeAll+0x120>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	4a2a      	ldr	r2, [pc, #168]	; (80087a4 <xTaskResumeAll+0x120>)
 80086fc:	6013      	str	r3, [r2, #0]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4a27      	ldr	r2, [pc, #156]	; (80087a8 <xTaskResumeAll+0x124>)
 800870c:	441a      	add	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3304      	adds	r3, #4
 8008712:	4619      	mov	r1, r3
 8008714:	4610      	mov	r0, r2
 8008716:	f7ff fa31 	bl	8007b7c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871e:	4b23      	ldr	r3, [pc, #140]	; (80087ac <xTaskResumeAll+0x128>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	429a      	cmp	r2, r3
 8008726:	d302      	bcc.n	800872e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008728:	4b21      	ldr	r3, [pc, #132]	; (80087b0 <xTaskResumeAll+0x12c>)
 800872a:	2201      	movs	r2, #1
 800872c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800872e:	4b1c      	ldr	r3, [pc, #112]	; (80087a0 <xTaskResumeAll+0x11c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1cc      	bne.n	80086d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d001      	beq.n	8008740 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800873c:	f000 fb12 	bl	8008d64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008740:	4b1c      	ldr	r3, [pc, #112]	; (80087b4 <xTaskResumeAll+0x130>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d010      	beq.n	800876e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800874c:	f000 f836 	bl	80087bc <xTaskIncrementTick>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d002      	beq.n	800875c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008756:	4b16      	ldr	r3, [pc, #88]	; (80087b0 <xTaskResumeAll+0x12c>)
 8008758:	2201      	movs	r2, #1
 800875a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3b01      	subs	r3, #1
 8008760:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1f1      	bne.n	800874c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008768:	4b12      	ldr	r3, [pc, #72]	; (80087b4 <xTaskResumeAll+0x130>)
 800876a:	2200      	movs	r2, #0
 800876c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800876e:	4b10      	ldr	r3, [pc, #64]	; (80087b0 <xTaskResumeAll+0x12c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d009      	beq.n	800878a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008776:	2301      	movs	r3, #1
 8008778:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800877a:	4b0f      	ldr	r3, [pc, #60]	; (80087b8 <xTaskResumeAll+0x134>)
 800877c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800878a:	f000 fd73 	bl	8009274 <vPortExitCritical>

	return xAlreadyYielded;
 800878e:	68bb      	ldr	r3, [r7, #8]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	20000934 	.word	0x20000934
 800879c:	2000090c 	.word	0x2000090c
 80087a0:	200008cc 	.word	0x200008cc
 80087a4:	20000914 	.word	0x20000914
 80087a8:	20000810 	.word	0x20000810
 80087ac:	2000080c 	.word	0x2000080c
 80087b0:	20000920 	.word	0x20000920
 80087b4:	2000091c 	.word	0x2000091c
 80087b8:	e000ed04 	.word	0xe000ed04

080087bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087c2:	2300      	movs	r3, #0
 80087c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087c6:	4b4e      	ldr	r3, [pc, #312]	; (8008900 <xTaskIncrementTick+0x144>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f040 808e 	bne.w	80088ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087d0:	4b4c      	ldr	r3, [pc, #304]	; (8008904 <xTaskIncrementTick+0x148>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3301      	adds	r3, #1
 80087d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087d8:	4a4a      	ldr	r2, [pc, #296]	; (8008904 <xTaskIncrementTick+0x148>)
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d120      	bne.n	8008826 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80087e4:	4b48      	ldr	r3, [pc, #288]	; (8008908 <xTaskIncrementTick+0x14c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <xTaskIncrementTick+0x48>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	603b      	str	r3, [r7, #0]
}
 8008800:	bf00      	nop
 8008802:	e7fe      	b.n	8008802 <xTaskIncrementTick+0x46>
 8008804:	4b40      	ldr	r3, [pc, #256]	; (8008908 <xTaskIncrementTick+0x14c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	60fb      	str	r3, [r7, #12]
 800880a:	4b40      	ldr	r3, [pc, #256]	; (800890c <xTaskIncrementTick+0x150>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a3e      	ldr	r2, [pc, #248]	; (8008908 <xTaskIncrementTick+0x14c>)
 8008810:	6013      	str	r3, [r2, #0]
 8008812:	4a3e      	ldr	r2, [pc, #248]	; (800890c <xTaskIncrementTick+0x150>)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	4b3d      	ldr	r3, [pc, #244]	; (8008910 <xTaskIncrementTick+0x154>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3301      	adds	r3, #1
 800881e:	4a3c      	ldr	r2, [pc, #240]	; (8008910 <xTaskIncrementTick+0x154>)
 8008820:	6013      	str	r3, [r2, #0]
 8008822:	f000 fa9f 	bl	8008d64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008826:	4b3b      	ldr	r3, [pc, #236]	; (8008914 <xTaskIncrementTick+0x158>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	429a      	cmp	r2, r3
 800882e:	d348      	bcc.n	80088c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008830:	4b35      	ldr	r3, [pc, #212]	; (8008908 <xTaskIncrementTick+0x14c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d104      	bne.n	8008844 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800883a:	4b36      	ldr	r3, [pc, #216]	; (8008914 <xTaskIncrementTick+0x158>)
 800883c:	f04f 32ff 	mov.w	r2, #4294967295
 8008840:	601a      	str	r2, [r3, #0]
					break;
 8008842:	e03e      	b.n	80088c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008844:	4b30      	ldr	r3, [pc, #192]	; (8008908 <xTaskIncrementTick+0x14c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	429a      	cmp	r2, r3
 800885a:	d203      	bcs.n	8008864 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800885c:	4a2d      	ldr	r2, [pc, #180]	; (8008914 <xTaskIncrementTick+0x158>)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008862:	e02e      	b.n	80088c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	3304      	adds	r3, #4
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff f9e4 	bl	8007c36 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008872:	2b00      	cmp	r3, #0
 8008874:	d004      	beq.n	8008880 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	3318      	adds	r3, #24
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff f9db 	bl	8007c36 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	2201      	movs	r2, #1
 8008886:	409a      	lsls	r2, r3
 8008888:	4b23      	ldr	r3, [pc, #140]	; (8008918 <xTaskIncrementTick+0x15c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4313      	orrs	r3, r2
 800888e:	4a22      	ldr	r2, [pc, #136]	; (8008918 <xTaskIncrementTick+0x15c>)
 8008890:	6013      	str	r3, [r2, #0]
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008896:	4613      	mov	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4a1f      	ldr	r2, [pc, #124]	; (800891c <xTaskIncrementTick+0x160>)
 80088a0:	441a      	add	r2, r3
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	3304      	adds	r3, #4
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f7ff f967 	bl	8007b7c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b2:	4b1b      	ldr	r3, [pc, #108]	; (8008920 <xTaskIncrementTick+0x164>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d3b9      	bcc.n	8008830 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80088bc:	2301      	movs	r3, #1
 80088be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088c0:	e7b6      	b.n	8008830 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088c2:	4b17      	ldr	r3, [pc, #92]	; (8008920 <xTaskIncrementTick+0x164>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c8:	4914      	ldr	r1, [pc, #80]	; (800891c <xTaskIncrementTick+0x160>)
 80088ca:	4613      	mov	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d901      	bls.n	80088de <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80088da:	2301      	movs	r3, #1
 80088dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80088de:	4b11      	ldr	r3, [pc, #68]	; (8008924 <xTaskIncrementTick+0x168>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d007      	beq.n	80088f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80088e6:	2301      	movs	r3, #1
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	e004      	b.n	80088f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088ec:	4b0e      	ldr	r3, [pc, #56]	; (8008928 <xTaskIncrementTick+0x16c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3301      	adds	r3, #1
 80088f2:	4a0d      	ldr	r2, [pc, #52]	; (8008928 <xTaskIncrementTick+0x16c>)
 80088f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088f6:	697b      	ldr	r3, [r7, #20]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3718      	adds	r7, #24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	20000934 	.word	0x20000934
 8008904:	20000910 	.word	0x20000910
 8008908:	200008c4 	.word	0x200008c4
 800890c:	200008c8 	.word	0x200008c8
 8008910:	20000924 	.word	0x20000924
 8008914:	2000092c 	.word	0x2000092c
 8008918:	20000914 	.word	0x20000914
 800891c:	20000810 	.word	0x20000810
 8008920:	2000080c 	.word	0x2000080c
 8008924:	20000920 	.word	0x20000920
 8008928:	2000091c 	.word	0x2000091c

0800892c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800892c:	b480      	push	{r7}
 800892e:	b087      	sub	sp, #28
 8008930:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008932:	4b27      	ldr	r3, [pc, #156]	; (80089d0 <vTaskSwitchContext+0xa4>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800893a:	4b26      	ldr	r3, [pc, #152]	; (80089d4 <vTaskSwitchContext+0xa8>)
 800893c:	2201      	movs	r2, #1
 800893e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008940:	e03f      	b.n	80089c2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008942:	4b24      	ldr	r3, [pc, #144]	; (80089d4 <vTaskSwitchContext+0xa8>)
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008948:	4b23      	ldr	r3, [pc, #140]	; (80089d8 <vTaskSwitchContext+0xac>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	fab3 f383 	clz	r3, r3
 8008954:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008956:	7afb      	ldrb	r3, [r7, #11]
 8008958:	f1c3 031f 	rsb	r3, r3, #31
 800895c:	617b      	str	r3, [r7, #20]
 800895e:	491f      	ldr	r1, [pc, #124]	; (80089dc <vTaskSwitchContext+0xb0>)
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	4613      	mov	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	440b      	add	r3, r1
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10a      	bne.n	8008988 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	607b      	str	r3, [r7, #4]
}
 8008984:	bf00      	nop
 8008986:	e7fe      	b.n	8008986 <vTaskSwitchContext+0x5a>
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4a12      	ldr	r2, [pc, #72]	; (80089dc <vTaskSwitchContext+0xb0>)
 8008994:	4413      	add	r3, r2
 8008996:	613b      	str	r3, [r7, #16]
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	605a      	str	r2, [r3, #4]
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	3308      	adds	r3, #8
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d104      	bne.n	80089b8 <vTaskSwitchContext+0x8c>
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	605a      	str	r2, [r3, #4]
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	4a08      	ldr	r2, [pc, #32]	; (80089e0 <vTaskSwitchContext+0xb4>)
 80089c0:	6013      	str	r3, [r2, #0]
}
 80089c2:	bf00      	nop
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	20000934 	.word	0x20000934
 80089d4:	20000920 	.word	0x20000920
 80089d8:	20000914 	.word	0x20000914
 80089dc:	20000810 	.word	0x20000810
 80089e0:	2000080c 	.word	0x2000080c

080089e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10a      	bne.n	8008a0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80089f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	60fb      	str	r3, [r7, #12]
}
 8008a06:	bf00      	nop
 8008a08:	e7fe      	b.n	8008a08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a0a:	4b07      	ldr	r3, [pc, #28]	; (8008a28 <vTaskPlaceOnEventList+0x44>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3318      	adds	r3, #24
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7ff f8d6 	bl	8007bc4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a18:	2101      	movs	r1, #1
 8008a1a:	6838      	ldr	r0, [r7, #0]
 8008a1c:	f000 fa66 	bl	8008eec <prvAddCurrentTaskToDelayedList>
}
 8008a20:	bf00      	nop
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	2000080c 	.word	0x2000080c

08008a2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10a      	bne.n	8008a58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	60fb      	str	r3, [r7, #12]
}
 8008a54:	bf00      	nop
 8008a56:	e7fe      	b.n	8008a56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	3318      	adds	r3, #24
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7ff f8ea 	bl	8007c36 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a62:	4b1d      	ldr	r3, [pc, #116]	; (8008ad8 <xTaskRemoveFromEventList+0xac>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d11c      	bne.n	8008aa4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7ff f8e1 	bl	8007c36 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a78:	2201      	movs	r2, #1
 8008a7a:	409a      	lsls	r2, r3
 8008a7c:	4b17      	ldr	r3, [pc, #92]	; (8008adc <xTaskRemoveFromEventList+0xb0>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	4a16      	ldr	r2, [pc, #88]	; (8008adc <xTaskRemoveFromEventList+0xb0>)
 8008a84:	6013      	str	r3, [r2, #0]
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4a13      	ldr	r2, [pc, #76]	; (8008ae0 <xTaskRemoveFromEventList+0xb4>)
 8008a94:	441a      	add	r2, r3
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	3304      	adds	r3, #4
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	f7ff f86d 	bl	8007b7c <vListInsertEnd>
 8008aa2:	e005      	b.n	8008ab0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	3318      	adds	r3, #24
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	480e      	ldr	r0, [pc, #56]	; (8008ae4 <xTaskRemoveFromEventList+0xb8>)
 8008aac:	f7ff f866 	bl	8007b7c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab4:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <xTaskRemoveFromEventList+0xbc>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d905      	bls.n	8008aca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ac2:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <xTaskRemoveFromEventList+0xc0>)
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]
 8008ac8:	e001      	b.n	8008ace <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008aca:	2300      	movs	r3, #0
 8008acc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ace:	697b      	ldr	r3, [r7, #20]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	20000934 	.word	0x20000934
 8008adc:	20000914 	.word	0x20000914
 8008ae0:	20000810 	.word	0x20000810
 8008ae4:	200008cc 	.word	0x200008cc
 8008ae8:	2000080c 	.word	0x2000080c
 8008aec:	20000920 	.word	0x20000920

08008af0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008af8:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <vTaskInternalSetTimeOutState+0x24>)
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b00:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <vTaskInternalSetTimeOutState+0x28>)
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	605a      	str	r2, [r3, #4]
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	20000924 	.word	0x20000924
 8008b18:	20000910 	.word	0x20000910

08008b1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b088      	sub	sp, #32
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10a      	bne.n	8008b42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	613b      	str	r3, [r7, #16]
}
 8008b3e:	bf00      	nop
 8008b40:	e7fe      	b.n	8008b40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10a      	bne.n	8008b5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	60fb      	str	r3, [r7, #12]
}
 8008b5a:	bf00      	nop
 8008b5c:	e7fe      	b.n	8008b5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008b5e:	f000 fb59 	bl	8009214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b62:	4b1d      	ldr	r3, [pc, #116]	; (8008bd8 <xTaskCheckForTimeOut+0xbc>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7a:	d102      	bne.n	8008b82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	61fb      	str	r3, [r7, #28]
 8008b80:	e023      	b.n	8008bca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	4b15      	ldr	r3, [pc, #84]	; (8008bdc <xTaskCheckForTimeOut+0xc0>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d007      	beq.n	8008b9e <xTaskCheckForTimeOut+0x82>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d302      	bcc.n	8008b9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	61fb      	str	r3, [r7, #28]
 8008b9c:	e015      	b.n	8008bca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d20b      	bcs.n	8008bc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	1ad2      	subs	r2, r2, r3
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7ff ff9b 	bl	8008af0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	61fb      	str	r3, [r7, #28]
 8008bbe:	e004      	b.n	8008bca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008bca:	f000 fb53 	bl	8009274 <vPortExitCritical>

	return xReturn;
 8008bce:	69fb      	ldr	r3, [r7, #28]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3720      	adds	r7, #32
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	20000910 	.word	0x20000910
 8008bdc:	20000924 	.word	0x20000924

08008be0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008be0:	b480      	push	{r7}
 8008be2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008be4:	4b03      	ldr	r3, [pc, #12]	; (8008bf4 <vTaskMissedYield+0x14>)
 8008be6:	2201      	movs	r2, #1
 8008be8:	601a      	str	r2, [r3, #0]
}
 8008bea:	bf00      	nop
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	20000920 	.word	0x20000920

08008bf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c00:	f000 f852 	bl	8008ca8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c04:	4b06      	ldr	r3, [pc, #24]	; (8008c20 <prvIdleTask+0x28>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d9f9      	bls.n	8008c00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c0c:	4b05      	ldr	r3, [pc, #20]	; (8008c24 <prvIdleTask+0x2c>)
 8008c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c1c:	e7f0      	b.n	8008c00 <prvIdleTask+0x8>
 8008c1e:	bf00      	nop
 8008c20:	20000810 	.word	0x20000810
 8008c24:	e000ed04 	.word	0xe000ed04

08008c28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c2e:	2300      	movs	r3, #0
 8008c30:	607b      	str	r3, [r7, #4]
 8008c32:	e00c      	b.n	8008c4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4a12      	ldr	r2, [pc, #72]	; (8008c88 <prvInitialiseTaskLists+0x60>)
 8008c40:	4413      	add	r3, r2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe ff6d 	bl	8007b22 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	607b      	str	r3, [r7, #4]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b06      	cmp	r3, #6
 8008c52:	d9ef      	bls.n	8008c34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c54:	480d      	ldr	r0, [pc, #52]	; (8008c8c <prvInitialiseTaskLists+0x64>)
 8008c56:	f7fe ff64 	bl	8007b22 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c5a:	480d      	ldr	r0, [pc, #52]	; (8008c90 <prvInitialiseTaskLists+0x68>)
 8008c5c:	f7fe ff61 	bl	8007b22 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c60:	480c      	ldr	r0, [pc, #48]	; (8008c94 <prvInitialiseTaskLists+0x6c>)
 8008c62:	f7fe ff5e 	bl	8007b22 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c66:	480c      	ldr	r0, [pc, #48]	; (8008c98 <prvInitialiseTaskLists+0x70>)
 8008c68:	f7fe ff5b 	bl	8007b22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c6c:	480b      	ldr	r0, [pc, #44]	; (8008c9c <prvInitialiseTaskLists+0x74>)
 8008c6e:	f7fe ff58 	bl	8007b22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c72:	4b0b      	ldr	r3, [pc, #44]	; (8008ca0 <prvInitialiseTaskLists+0x78>)
 8008c74:	4a05      	ldr	r2, [pc, #20]	; (8008c8c <prvInitialiseTaskLists+0x64>)
 8008c76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c78:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <prvInitialiseTaskLists+0x7c>)
 8008c7a:	4a05      	ldr	r2, [pc, #20]	; (8008c90 <prvInitialiseTaskLists+0x68>)
 8008c7c:	601a      	str	r2, [r3, #0]
}
 8008c7e:	bf00      	nop
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20000810 	.word	0x20000810
 8008c8c:	2000089c 	.word	0x2000089c
 8008c90:	200008b0 	.word	0x200008b0
 8008c94:	200008cc 	.word	0x200008cc
 8008c98:	200008e0 	.word	0x200008e0
 8008c9c:	200008f8 	.word	0x200008f8
 8008ca0:	200008c4 	.word	0x200008c4
 8008ca4:	200008c8 	.word	0x200008c8

08008ca8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cae:	e019      	b.n	8008ce4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008cb0:	f000 fab0 	bl	8009214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb4:	4b10      	ldr	r3, [pc, #64]	; (8008cf8 <prvCheckTasksWaitingTermination+0x50>)
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe ffb8 	bl	8007c36 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008cc6:	4b0d      	ldr	r3, [pc, #52]	; (8008cfc <prvCheckTasksWaitingTermination+0x54>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	4a0b      	ldr	r2, [pc, #44]	; (8008cfc <prvCheckTasksWaitingTermination+0x54>)
 8008cce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008cd0:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <prvCheckTasksWaitingTermination+0x58>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	4a0a      	ldr	r2, [pc, #40]	; (8008d00 <prvCheckTasksWaitingTermination+0x58>)
 8008cd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008cda:	f000 facb 	bl	8009274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f810 	bl	8008d04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ce4:	4b06      	ldr	r3, [pc, #24]	; (8008d00 <prvCheckTasksWaitingTermination+0x58>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e1      	bne.n	8008cb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008cec:	bf00      	nop
 8008cee:	bf00      	nop
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	200008e0 	.word	0x200008e0
 8008cfc:	2000090c 	.word	0x2000090c
 8008d00:	200008f4 	.word	0x200008f4

08008d04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d108      	bne.n	8008d28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 fc28 	bl	8009570 <vPortFree>
				vPortFree( pxTCB );
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fc25 	bl	8009570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d26:	e018      	b.n	8008d5a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d103      	bne.n	8008d3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fc1c 	bl	8009570 <vPortFree>
	}
 8008d38:	e00f      	b.n	8008d5a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d00a      	beq.n	8008d5a <prvDeleteTCB+0x56>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	60fb      	str	r3, [r7, #12]
}
 8008d56:	bf00      	nop
 8008d58:	e7fe      	b.n	8008d58 <prvDeleteTCB+0x54>
	}
 8008d5a:	bf00      	nop
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
	...

08008d64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d6a:	4b0c      	ldr	r3, [pc, #48]	; (8008d9c <prvResetNextTaskUnblockTime+0x38>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d104      	bne.n	8008d7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d74:	4b0a      	ldr	r3, [pc, #40]	; (8008da0 <prvResetNextTaskUnblockTime+0x3c>)
 8008d76:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d7c:	e008      	b.n	8008d90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d7e:	4b07      	ldr	r3, [pc, #28]	; (8008d9c <prvResetNextTaskUnblockTime+0x38>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	4a04      	ldr	r2, [pc, #16]	; (8008da0 <prvResetNextTaskUnblockTime+0x3c>)
 8008d8e:	6013      	str	r3, [r2, #0]
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	200008c4 	.word	0x200008c4
 8008da0:	2000092c 	.word	0x2000092c

08008da4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008daa:	4b0b      	ldr	r3, [pc, #44]	; (8008dd8 <xTaskGetSchedulerState+0x34>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d102      	bne.n	8008db8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008db2:	2301      	movs	r3, #1
 8008db4:	607b      	str	r3, [r7, #4]
 8008db6:	e008      	b.n	8008dca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008db8:	4b08      	ldr	r3, [pc, #32]	; (8008ddc <xTaskGetSchedulerState+0x38>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d102      	bne.n	8008dc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	607b      	str	r3, [r7, #4]
 8008dc4:	e001      	b.n	8008dca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008dca:	687b      	ldr	r3, [r7, #4]
	}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	20000918 	.word	0x20000918
 8008ddc:	20000934 	.word	0x20000934

08008de0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008dec:	2300      	movs	r3, #0
 8008dee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d06e      	beq.n	8008ed4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008df6:	4b3a      	ldr	r3, [pc, #232]	; (8008ee0 <xTaskPriorityDisinherit+0x100>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d00a      	beq.n	8008e16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	60fb      	str	r3, [r7, #12]
}
 8008e12:	bf00      	nop
 8008e14:	e7fe      	b.n	8008e14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10a      	bne.n	8008e34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	60bb      	str	r3, [r7, #8]
}
 8008e30:	bf00      	nop
 8008e32:	e7fe      	b.n	8008e32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e38:	1e5a      	subs	r2, r3, #1
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d044      	beq.n	8008ed4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d140      	bne.n	8008ed4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	3304      	adds	r3, #4
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe feed 	bl	8007c36 <uxListRemove>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d115      	bne.n	8008e8e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e66:	491f      	ldr	r1, [pc, #124]	; (8008ee4 <xTaskPriorityDisinherit+0x104>)
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	440b      	add	r3, r1
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10a      	bne.n	8008e8e <xTaskPriorityDisinherit+0xae>
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e82:	43da      	mvns	r2, r3
 8008e84:	4b18      	ldr	r3, [pc, #96]	; (8008ee8 <xTaskPriorityDisinherit+0x108>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4013      	ands	r3, r2
 8008e8a:	4a17      	ldr	r2, [pc, #92]	; (8008ee8 <xTaskPriorityDisinherit+0x108>)
 8008e8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9a:	f1c3 0207 	rsb	r2, r3, #7
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	409a      	lsls	r2, r3
 8008eaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <xTaskPriorityDisinherit+0x108>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	4a0d      	ldr	r2, [pc, #52]	; (8008ee8 <xTaskPriorityDisinherit+0x108>)
 8008eb2:	6013      	str	r3, [r2, #0]
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb8:	4613      	mov	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4a08      	ldr	r2, [pc, #32]	; (8008ee4 <xTaskPriorityDisinherit+0x104>)
 8008ec2:	441a      	add	r2, r3
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	4619      	mov	r1, r3
 8008eca:	4610      	mov	r0, r2
 8008ecc:	f7fe fe56 	bl	8007b7c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ed4:	697b      	ldr	r3, [r7, #20]
	}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	2000080c 	.word	0x2000080c
 8008ee4:	20000810 	.word	0x20000810
 8008ee8:	20000914 	.word	0x20000914

08008eec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ef6:	4b29      	ldr	r3, [pc, #164]	; (8008f9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008efc:	4b28      	ldr	r3, [pc, #160]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3304      	adds	r3, #4
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fe fe97 	bl	8007c36 <uxListRemove>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10b      	bne.n	8008f26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008f0e:	4b24      	ldr	r3, [pc, #144]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	2201      	movs	r2, #1
 8008f16:	fa02 f303 	lsl.w	r3, r2, r3
 8008f1a:	43da      	mvns	r2, r3
 8008f1c:	4b21      	ldr	r3, [pc, #132]	; (8008fa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4013      	ands	r3, r2
 8008f22:	4a20      	ldr	r2, [pc, #128]	; (8008fa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008f24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2c:	d10a      	bne.n	8008f44 <prvAddCurrentTaskToDelayedList+0x58>
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d007      	beq.n	8008f44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f34:	4b1a      	ldr	r3, [pc, #104]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3304      	adds	r3, #4
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	481a      	ldr	r0, [pc, #104]	; (8008fa8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008f3e:	f7fe fe1d 	bl	8007b7c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f42:	e026      	b.n	8008f92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4413      	add	r3, r2
 8008f4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f4c:	4b14      	ldr	r3, [pc, #80]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d209      	bcs.n	8008f70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f5c:	4b13      	ldr	r3, [pc, #76]	; (8008fac <prvAddCurrentTaskToDelayedList+0xc0>)
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	4b0f      	ldr	r3, [pc, #60]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3304      	adds	r3, #4
 8008f66:	4619      	mov	r1, r3
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f7fe fe2b 	bl	8007bc4 <vListInsert>
}
 8008f6e:	e010      	b.n	8008f92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f70:	4b0f      	ldr	r3, [pc, #60]	; (8008fb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3304      	adds	r3, #4
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	f7fe fe21 	bl	8007bc4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f82:	4b0c      	ldr	r3, [pc, #48]	; (8008fb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d202      	bcs.n	8008f92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008f8c:	4a09      	ldr	r2, [pc, #36]	; (8008fb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	6013      	str	r3, [r2, #0]
}
 8008f92:	bf00      	nop
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	20000910 	.word	0x20000910
 8008fa0:	2000080c 	.word	0x2000080c
 8008fa4:	20000914 	.word	0x20000914
 8008fa8:	200008f8 	.word	0x200008f8
 8008fac:	200008c8 	.word	0x200008c8
 8008fb0:	200008c4 	.word	0x200008c4
 8008fb4:	2000092c 	.word	0x2000092c

08008fb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	3b04      	subs	r3, #4
 8008fc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3b04      	subs	r3, #4
 8008fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f023 0201 	bic.w	r2, r3, #1
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	3b04      	subs	r3, #4
 8008fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fe8:	4a0c      	ldr	r2, [pc, #48]	; (800901c <pxPortInitialiseStack+0x64>)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	3b14      	subs	r3, #20
 8008ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	3b04      	subs	r3, #4
 8008ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f06f 0202 	mvn.w	r2, #2
 8009006:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	3b20      	subs	r3, #32
 800900c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800900e:	68fb      	ldr	r3, [r7, #12]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	08009021 	.word	0x08009021

08009020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800902a:	4b12      	ldr	r3, [pc, #72]	; (8009074 <prvTaskExitError+0x54>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009032:	d00a      	beq.n	800904a <prvTaskExitError+0x2a>
	__asm volatile
 8009034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	60fb      	str	r3, [r7, #12]
}
 8009046:	bf00      	nop
 8009048:	e7fe      	b.n	8009048 <prvTaskExitError+0x28>
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	60bb      	str	r3, [r7, #8]
}
 800905c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800905e:	bf00      	nop
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d0fc      	beq.n	8009060 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009066:	bf00      	nop
 8009068:	bf00      	nop
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	2000003c 	.word	0x2000003c
	...

08009080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009080:	4b07      	ldr	r3, [pc, #28]	; (80090a0 <pxCurrentTCBConst2>)
 8009082:	6819      	ldr	r1, [r3, #0]
 8009084:	6808      	ldr	r0, [r1, #0]
 8009086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908a:	f380 8809 	msr	PSP, r0
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f04f 0000 	mov.w	r0, #0
 8009096:	f380 8811 	msr	BASEPRI, r0
 800909a:	4770      	bx	lr
 800909c:	f3af 8000 	nop.w

080090a0 <pxCurrentTCBConst2>:
 80090a0:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop

080090a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80090a8:	4808      	ldr	r0, [pc, #32]	; (80090cc <prvPortStartFirstTask+0x24>)
 80090aa:	6800      	ldr	r0, [r0, #0]
 80090ac:	6800      	ldr	r0, [r0, #0]
 80090ae:	f380 8808 	msr	MSP, r0
 80090b2:	f04f 0000 	mov.w	r0, #0
 80090b6:	f380 8814 	msr	CONTROL, r0
 80090ba:	b662      	cpsie	i
 80090bc:	b661      	cpsie	f
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	df00      	svc	0
 80090c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80090ca:	bf00      	nop
 80090cc:	e000ed08 	.word	0xe000ed08

080090d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80090d6:	4b46      	ldr	r3, [pc, #280]	; (80091f0 <xPortStartScheduler+0x120>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a46      	ldr	r2, [pc, #280]	; (80091f4 <xPortStartScheduler+0x124>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d10a      	bne.n	80090f6 <xPortStartScheduler+0x26>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	613b      	str	r3, [r7, #16]
}
 80090f2:	bf00      	nop
 80090f4:	e7fe      	b.n	80090f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80090f6:	4b3e      	ldr	r3, [pc, #248]	; (80091f0 <xPortStartScheduler+0x120>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a3f      	ldr	r2, [pc, #252]	; (80091f8 <xPortStartScheduler+0x128>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d10a      	bne.n	8009116 <xPortStartScheduler+0x46>
	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	60fb      	str	r3, [r7, #12]
}
 8009112:	bf00      	nop
 8009114:	e7fe      	b.n	8009114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009116:	4b39      	ldr	r3, [pc, #228]	; (80091fc <xPortStartScheduler+0x12c>)
 8009118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	22ff      	movs	r2, #255	; 0xff
 8009126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	b2db      	uxtb	r3, r3
 800912e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	b2db      	uxtb	r3, r3
 8009134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009138:	b2da      	uxtb	r2, r3
 800913a:	4b31      	ldr	r3, [pc, #196]	; (8009200 <xPortStartScheduler+0x130>)
 800913c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800913e:	4b31      	ldr	r3, [pc, #196]	; (8009204 <xPortStartScheduler+0x134>)
 8009140:	2207      	movs	r2, #7
 8009142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009144:	e009      	b.n	800915a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009146:	4b2f      	ldr	r3, [pc, #188]	; (8009204 <xPortStartScheduler+0x134>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3b01      	subs	r3, #1
 800914c:	4a2d      	ldr	r2, [pc, #180]	; (8009204 <xPortStartScheduler+0x134>)
 800914e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	b2db      	uxtb	r3, r3
 8009158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	b2db      	uxtb	r3, r3
 800915e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009162:	2b80      	cmp	r3, #128	; 0x80
 8009164:	d0ef      	beq.n	8009146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009166:	4b27      	ldr	r3, [pc, #156]	; (8009204 <xPortStartScheduler+0x134>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f1c3 0307 	rsb	r3, r3, #7
 800916e:	2b04      	cmp	r3, #4
 8009170:	d00a      	beq.n	8009188 <xPortStartScheduler+0xb8>
	__asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	60bb      	str	r3, [r7, #8]
}
 8009184:	bf00      	nop
 8009186:	e7fe      	b.n	8009186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009188:	4b1e      	ldr	r3, [pc, #120]	; (8009204 <xPortStartScheduler+0x134>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	021b      	lsls	r3, r3, #8
 800918e:	4a1d      	ldr	r2, [pc, #116]	; (8009204 <xPortStartScheduler+0x134>)
 8009190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009192:	4b1c      	ldr	r3, [pc, #112]	; (8009204 <xPortStartScheduler+0x134>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800919a:	4a1a      	ldr	r2, [pc, #104]	; (8009204 <xPortStartScheduler+0x134>)
 800919c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80091a6:	4b18      	ldr	r3, [pc, #96]	; (8009208 <xPortStartScheduler+0x138>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a17      	ldr	r2, [pc, #92]	; (8009208 <xPortStartScheduler+0x138>)
 80091ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80091b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80091b2:	4b15      	ldr	r3, [pc, #84]	; (8009208 <xPortStartScheduler+0x138>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a14      	ldr	r2, [pc, #80]	; (8009208 <xPortStartScheduler+0x138>)
 80091b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80091bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80091be:	f000 f8dd 	bl	800937c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80091c2:	4b12      	ldr	r3, [pc, #72]	; (800920c <xPortStartScheduler+0x13c>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80091c8:	f000 f8fc 	bl	80093c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80091cc:	4b10      	ldr	r3, [pc, #64]	; (8009210 <xPortStartScheduler+0x140>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a0f      	ldr	r2, [pc, #60]	; (8009210 <xPortStartScheduler+0x140>)
 80091d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80091d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80091d8:	f7ff ff66 	bl	80090a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80091dc:	f7ff fba6 	bl	800892c <vTaskSwitchContext>
	prvTaskExitError();
 80091e0:	f7ff ff1e 	bl	8009020 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3718      	adds	r7, #24
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	e000ed00 	.word	0xe000ed00
 80091f4:	410fc271 	.word	0x410fc271
 80091f8:	410fc270 	.word	0x410fc270
 80091fc:	e000e400 	.word	0xe000e400
 8009200:	20000938 	.word	0x20000938
 8009204:	2000093c 	.word	0x2000093c
 8009208:	e000ed20 	.word	0xe000ed20
 800920c:	2000003c 	.word	0x2000003c
 8009210:	e000ef34 	.word	0xe000ef34

08009214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
	__asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	607b      	str	r3, [r7, #4]
}
 800922c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800922e:	4b0f      	ldr	r3, [pc, #60]	; (800926c <vPortEnterCritical+0x58>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3301      	adds	r3, #1
 8009234:	4a0d      	ldr	r2, [pc, #52]	; (800926c <vPortEnterCritical+0x58>)
 8009236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009238:	4b0c      	ldr	r3, [pc, #48]	; (800926c <vPortEnterCritical+0x58>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d10f      	bne.n	8009260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009240:	4b0b      	ldr	r3, [pc, #44]	; (8009270 <vPortEnterCritical+0x5c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <vPortEnterCritical+0x4c>
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	603b      	str	r3, [r7, #0]
}
 800925c:	bf00      	nop
 800925e:	e7fe      	b.n	800925e <vPortEnterCritical+0x4a>
	}
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	2000003c 	.word	0x2000003c
 8009270:	e000ed04 	.word	0xe000ed04

08009274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800927a:	4b12      	ldr	r3, [pc, #72]	; (80092c4 <vPortExitCritical+0x50>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10a      	bne.n	8009298 <vPortExitCritical+0x24>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	607b      	str	r3, [r7, #4]
}
 8009294:	bf00      	nop
 8009296:	e7fe      	b.n	8009296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009298:	4b0a      	ldr	r3, [pc, #40]	; (80092c4 <vPortExitCritical+0x50>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3b01      	subs	r3, #1
 800929e:	4a09      	ldr	r2, [pc, #36]	; (80092c4 <vPortExitCritical+0x50>)
 80092a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80092a2:	4b08      	ldr	r3, [pc, #32]	; (80092c4 <vPortExitCritical+0x50>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d105      	bne.n	80092b6 <vPortExitCritical+0x42>
 80092aa:	2300      	movs	r3, #0
 80092ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80092b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80092b6:	bf00      	nop
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	2000003c 	.word	0x2000003c
	...

080092d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80092d0:	f3ef 8009 	mrs	r0, PSP
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	4b15      	ldr	r3, [pc, #84]	; (8009330 <pxCurrentTCBConst>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	f01e 0f10 	tst.w	lr, #16
 80092e0:	bf08      	it	eq
 80092e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ea:	6010      	str	r0, [r2, #0]
 80092ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80092f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80092f4:	f380 8811 	msr	BASEPRI, r0
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f7ff fb14 	bl	800892c <vTaskSwitchContext>
 8009304:	f04f 0000 	mov.w	r0, #0
 8009308:	f380 8811 	msr	BASEPRI, r0
 800930c:	bc09      	pop	{r0, r3}
 800930e:	6819      	ldr	r1, [r3, #0]
 8009310:	6808      	ldr	r0, [r1, #0]
 8009312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009316:	f01e 0f10 	tst.w	lr, #16
 800931a:	bf08      	it	eq
 800931c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009320:	f380 8809 	msr	PSP, r0
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	f3af 8000 	nop.w

08009330 <pxCurrentTCBConst>:
 8009330:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop

08009338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
	__asm volatile
 800933e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	607b      	str	r3, [r7, #4]
}
 8009350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009352:	f7ff fa33 	bl	80087bc <xTaskIncrementTick>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800935c:	4b06      	ldr	r3, [pc, #24]	; (8009378 <SysTick_Handler+0x40>)
 800935e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	2300      	movs	r3, #0
 8009366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	f383 8811 	msr	BASEPRI, r3
}
 800936e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009370:	bf00      	nop
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	e000ed04 	.word	0xe000ed04

0800937c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800937c:	b480      	push	{r7}
 800937e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009380:	4b0b      	ldr	r3, [pc, #44]	; (80093b0 <vPortSetupTimerInterrupt+0x34>)
 8009382:	2200      	movs	r2, #0
 8009384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009386:	4b0b      	ldr	r3, [pc, #44]	; (80093b4 <vPortSetupTimerInterrupt+0x38>)
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800938c:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <vPortSetupTimerInterrupt+0x3c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a0a      	ldr	r2, [pc, #40]	; (80093bc <vPortSetupTimerInterrupt+0x40>)
 8009392:	fba2 2303 	umull	r2, r3, r2, r3
 8009396:	099b      	lsrs	r3, r3, #6
 8009398:	4a09      	ldr	r2, [pc, #36]	; (80093c0 <vPortSetupTimerInterrupt+0x44>)
 800939a:	3b01      	subs	r3, #1
 800939c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800939e:	4b04      	ldr	r3, [pc, #16]	; (80093b0 <vPortSetupTimerInterrupt+0x34>)
 80093a0:	2207      	movs	r2, #7
 80093a2:	601a      	str	r2, [r3, #0]
}
 80093a4:	bf00      	nop
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	e000e010 	.word	0xe000e010
 80093b4:	e000e018 	.word	0xe000e018
 80093b8:	20000030 	.word	0x20000030
 80093bc:	10624dd3 	.word	0x10624dd3
 80093c0:	e000e014 	.word	0xe000e014

080093c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80093c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80093d4 <vPortEnableVFP+0x10>
 80093c8:	6801      	ldr	r1, [r0, #0]
 80093ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80093ce:	6001      	str	r1, [r0, #0]
 80093d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80093d2:	bf00      	nop
 80093d4:	e000ed88 	.word	0xe000ed88

080093d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b08a      	sub	sp, #40	; 0x28
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80093e0:	2300      	movs	r3, #0
 80093e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80093e4:	f7ff f940 	bl	8008668 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80093e8:	4b5b      	ldr	r3, [pc, #364]	; (8009558 <pvPortMalloc+0x180>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80093f0:	f000 f920 	bl	8009634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80093f4:	4b59      	ldr	r3, [pc, #356]	; (800955c <pvPortMalloc+0x184>)
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4013      	ands	r3, r2
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f040 8093 	bne.w	8009528 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d01d      	beq.n	8009444 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009408:	2208      	movs	r2, #8
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4413      	add	r3, r2
 800940e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f003 0307 	and.w	r3, r3, #7
 8009416:	2b00      	cmp	r3, #0
 8009418:	d014      	beq.n	8009444 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f023 0307 	bic.w	r3, r3, #7
 8009420:	3308      	adds	r3, #8
 8009422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f003 0307 	and.w	r3, r3, #7
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00a      	beq.n	8009444 <pvPortMalloc+0x6c>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	617b      	str	r3, [r7, #20]
}
 8009440:	bf00      	nop
 8009442:	e7fe      	b.n	8009442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d06e      	beq.n	8009528 <pvPortMalloc+0x150>
 800944a:	4b45      	ldr	r3, [pc, #276]	; (8009560 <pvPortMalloc+0x188>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	429a      	cmp	r2, r3
 8009452:	d869      	bhi.n	8009528 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009454:	4b43      	ldr	r3, [pc, #268]	; (8009564 <pvPortMalloc+0x18c>)
 8009456:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009458:	4b42      	ldr	r3, [pc, #264]	; (8009564 <pvPortMalloc+0x18c>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800945e:	e004      	b.n	800946a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009462:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	429a      	cmp	r2, r3
 8009472:	d903      	bls.n	800947c <pvPortMalloc+0xa4>
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1f1      	bne.n	8009460 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800947c:	4b36      	ldr	r3, [pc, #216]	; (8009558 <pvPortMalloc+0x180>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009482:	429a      	cmp	r2, r3
 8009484:	d050      	beq.n	8009528 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2208      	movs	r2, #8
 800948c:	4413      	add	r3, r2
 800948e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	1ad2      	subs	r2, r2, r3
 80094a0:	2308      	movs	r3, #8
 80094a2:	005b      	lsls	r3, r3, #1
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d91f      	bls.n	80094e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4413      	add	r3, r2
 80094ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	f003 0307 	and.w	r3, r3, #7
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00a      	beq.n	80094d0 <pvPortMalloc+0xf8>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	613b      	str	r3, [r7, #16]
}
 80094cc:	bf00      	nop
 80094ce:	e7fe      	b.n	80094ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	685a      	ldr	r2, [r3, #4]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	1ad2      	subs	r2, r2, r3
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094e2:	69b8      	ldr	r0, [r7, #24]
 80094e4:	f000 f908 	bl	80096f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094e8:	4b1d      	ldr	r3, [pc, #116]	; (8009560 <pvPortMalloc+0x188>)
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	4a1b      	ldr	r2, [pc, #108]	; (8009560 <pvPortMalloc+0x188>)
 80094f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094f6:	4b1a      	ldr	r3, [pc, #104]	; (8009560 <pvPortMalloc+0x188>)
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	4b1b      	ldr	r3, [pc, #108]	; (8009568 <pvPortMalloc+0x190>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d203      	bcs.n	800950a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009502:	4b17      	ldr	r3, [pc, #92]	; (8009560 <pvPortMalloc+0x188>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a18      	ldr	r2, [pc, #96]	; (8009568 <pvPortMalloc+0x190>)
 8009508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800950a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	4b13      	ldr	r3, [pc, #76]	; (800955c <pvPortMalloc+0x184>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	431a      	orrs	r2, r3
 8009514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	2200      	movs	r2, #0
 800951c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800951e:	4b13      	ldr	r3, [pc, #76]	; (800956c <pvPortMalloc+0x194>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3301      	adds	r3, #1
 8009524:	4a11      	ldr	r2, [pc, #68]	; (800956c <pvPortMalloc+0x194>)
 8009526:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009528:	f7ff f8ac 	bl	8008684 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	f003 0307 	and.w	r3, r3, #7
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00a      	beq.n	800954c <pvPortMalloc+0x174>
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	60fb      	str	r3, [r7, #12]
}
 8009548:	bf00      	nop
 800954a:	e7fe      	b.n	800954a <pvPortMalloc+0x172>
	return pvReturn;
 800954c:	69fb      	ldr	r3, [r7, #28]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3728      	adds	r7, #40	; 0x28
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	20001500 	.word	0x20001500
 800955c:	20001514 	.word	0x20001514
 8009560:	20001504 	.word	0x20001504
 8009564:	200014f8 	.word	0x200014f8
 8009568:	20001508 	.word	0x20001508
 800956c:	2000150c 	.word	0x2000150c

08009570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d04d      	beq.n	800961e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009582:	2308      	movs	r3, #8
 8009584:	425b      	negs	r3, r3
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	4413      	add	r3, r2
 800958a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	685a      	ldr	r2, [r3, #4]
 8009594:	4b24      	ldr	r3, [pc, #144]	; (8009628 <vPortFree+0xb8>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4013      	ands	r3, r2
 800959a:	2b00      	cmp	r3, #0
 800959c:	d10a      	bne.n	80095b4 <vPortFree+0x44>
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	60fb      	str	r3, [r7, #12]
}
 80095b0:	bf00      	nop
 80095b2:	e7fe      	b.n	80095b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00a      	beq.n	80095d2 <vPortFree+0x62>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	60bb      	str	r3, [r7, #8]
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	4b14      	ldr	r3, [pc, #80]	; (8009628 <vPortFree+0xb8>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4013      	ands	r3, r2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d01e      	beq.n	800961e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d11a      	bne.n	800961e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	4b0e      	ldr	r3, [pc, #56]	; (8009628 <vPortFree+0xb8>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	43db      	mvns	r3, r3
 80095f2:	401a      	ands	r2, r3
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80095f8:	f7ff f836 	bl	8008668 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	685a      	ldr	r2, [r3, #4]
 8009600:	4b0a      	ldr	r3, [pc, #40]	; (800962c <vPortFree+0xbc>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4413      	add	r3, r2
 8009606:	4a09      	ldr	r2, [pc, #36]	; (800962c <vPortFree+0xbc>)
 8009608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800960a:	6938      	ldr	r0, [r7, #16]
 800960c:	f000 f874 	bl	80096f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009610:	4b07      	ldr	r3, [pc, #28]	; (8009630 <vPortFree+0xc0>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3301      	adds	r3, #1
 8009616:	4a06      	ldr	r2, [pc, #24]	; (8009630 <vPortFree+0xc0>)
 8009618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800961a:	f7ff f833 	bl	8008684 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800961e:	bf00      	nop
 8009620:	3718      	adds	r7, #24
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20001514 	.word	0x20001514
 800962c:	20001504 	.word	0x20001504
 8009630:	20001510 	.word	0x20001510

08009634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800963a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800963e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009640:	4b27      	ldr	r3, [pc, #156]	; (80096e0 <prvHeapInit+0xac>)
 8009642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00c      	beq.n	8009668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	3307      	adds	r3, #7
 8009652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f023 0307 	bic.w	r3, r3, #7
 800965a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	4a1f      	ldr	r2, [pc, #124]	; (80096e0 <prvHeapInit+0xac>)
 8009664:	4413      	add	r3, r2
 8009666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800966c:	4a1d      	ldr	r2, [pc, #116]	; (80096e4 <prvHeapInit+0xb0>)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009672:	4b1c      	ldr	r3, [pc, #112]	; (80096e4 <prvHeapInit+0xb0>)
 8009674:	2200      	movs	r2, #0
 8009676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	4413      	add	r3, r2
 800967e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009680:	2208      	movs	r2, #8
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	1a9b      	subs	r3, r3, r2
 8009686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 0307 	bic.w	r3, r3, #7
 800968e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4a15      	ldr	r2, [pc, #84]	; (80096e8 <prvHeapInit+0xb4>)
 8009694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009696:	4b14      	ldr	r3, [pc, #80]	; (80096e8 <prvHeapInit+0xb4>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2200      	movs	r2, #0
 800969c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800969e:	4b12      	ldr	r3, [pc, #72]	; (80096e8 <prvHeapInit+0xb4>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	1ad2      	subs	r2, r2, r3
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80096b4:	4b0c      	ldr	r3, [pc, #48]	; (80096e8 <prvHeapInit+0xb4>)
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	4a0a      	ldr	r2, [pc, #40]	; (80096ec <prvHeapInit+0xb8>)
 80096c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	4a09      	ldr	r2, [pc, #36]	; (80096f0 <prvHeapInit+0xbc>)
 80096ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80096cc:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <prvHeapInit+0xc0>)
 80096ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80096d2:	601a      	str	r2, [r3, #0]
}
 80096d4:	bf00      	nop
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr
 80096e0:	20000940 	.word	0x20000940
 80096e4:	200014f8 	.word	0x200014f8
 80096e8:	20001500 	.word	0x20001500
 80096ec:	20001508 	.word	0x20001508
 80096f0:	20001504 	.word	0x20001504
 80096f4:	20001514 	.word	0x20001514

080096f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009700:	4b28      	ldr	r3, [pc, #160]	; (80097a4 <prvInsertBlockIntoFreeList+0xac>)
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	e002      	b.n	800970c <prvInsertBlockIntoFreeList+0x14>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	60fb      	str	r3, [r7, #12]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	429a      	cmp	r2, r3
 8009714:	d8f7      	bhi.n	8009706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	4413      	add	r3, r2
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	429a      	cmp	r2, r3
 8009726:	d108      	bne.n	800973a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	441a      	add	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	441a      	add	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	429a      	cmp	r2, r3
 800974c:	d118      	bne.n	8009780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	4b15      	ldr	r3, [pc, #84]	; (80097a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	429a      	cmp	r2, r3
 8009758:	d00d      	beq.n	8009776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	441a      	add	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	e008      	b.n	8009788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009776:	4b0c      	ldr	r3, [pc, #48]	; (80097a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	e003      	b.n	8009788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	429a      	cmp	r2, r3
 800978e:	d002      	beq.n	8009796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009796:	bf00      	nop
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	200014f8 	.word	0x200014f8
 80097a8:	20001500 	.word	0x20001500

080097ac <__cvt>:
 80097ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097b0:	ec55 4b10 	vmov	r4, r5, d0
 80097b4:	2d00      	cmp	r5, #0
 80097b6:	460e      	mov	r6, r1
 80097b8:	4619      	mov	r1, r3
 80097ba:	462b      	mov	r3, r5
 80097bc:	bfbb      	ittet	lt
 80097be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80097c2:	461d      	movlt	r5, r3
 80097c4:	2300      	movge	r3, #0
 80097c6:	232d      	movlt	r3, #45	; 0x2d
 80097c8:	700b      	strb	r3, [r1, #0]
 80097ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80097d0:	4691      	mov	r9, r2
 80097d2:	f023 0820 	bic.w	r8, r3, #32
 80097d6:	bfbc      	itt	lt
 80097d8:	4622      	movlt	r2, r4
 80097da:	4614      	movlt	r4, r2
 80097dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097e0:	d005      	beq.n	80097ee <__cvt+0x42>
 80097e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097e6:	d100      	bne.n	80097ea <__cvt+0x3e>
 80097e8:	3601      	adds	r6, #1
 80097ea:	2102      	movs	r1, #2
 80097ec:	e000      	b.n	80097f0 <__cvt+0x44>
 80097ee:	2103      	movs	r1, #3
 80097f0:	ab03      	add	r3, sp, #12
 80097f2:	9301      	str	r3, [sp, #4]
 80097f4:	ab02      	add	r3, sp, #8
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	ec45 4b10 	vmov	d0, r4, r5
 80097fc:	4653      	mov	r3, sl
 80097fe:	4632      	mov	r2, r6
 8009800:	f000 ff96 	bl	800a730 <_dtoa_r>
 8009804:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009808:	4607      	mov	r7, r0
 800980a:	d102      	bne.n	8009812 <__cvt+0x66>
 800980c:	f019 0f01 	tst.w	r9, #1
 8009810:	d022      	beq.n	8009858 <__cvt+0xac>
 8009812:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009816:	eb07 0906 	add.w	r9, r7, r6
 800981a:	d110      	bne.n	800983e <__cvt+0x92>
 800981c:	783b      	ldrb	r3, [r7, #0]
 800981e:	2b30      	cmp	r3, #48	; 0x30
 8009820:	d10a      	bne.n	8009838 <__cvt+0x8c>
 8009822:	2200      	movs	r2, #0
 8009824:	2300      	movs	r3, #0
 8009826:	4620      	mov	r0, r4
 8009828:	4629      	mov	r1, r5
 800982a:	f7f7 f94d 	bl	8000ac8 <__aeabi_dcmpeq>
 800982e:	b918      	cbnz	r0, 8009838 <__cvt+0x8c>
 8009830:	f1c6 0601 	rsb	r6, r6, #1
 8009834:	f8ca 6000 	str.w	r6, [sl]
 8009838:	f8da 3000 	ldr.w	r3, [sl]
 800983c:	4499      	add	r9, r3
 800983e:	2200      	movs	r2, #0
 8009840:	2300      	movs	r3, #0
 8009842:	4620      	mov	r0, r4
 8009844:	4629      	mov	r1, r5
 8009846:	f7f7 f93f 	bl	8000ac8 <__aeabi_dcmpeq>
 800984a:	b108      	cbz	r0, 8009850 <__cvt+0xa4>
 800984c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009850:	2230      	movs	r2, #48	; 0x30
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	454b      	cmp	r3, r9
 8009856:	d307      	bcc.n	8009868 <__cvt+0xbc>
 8009858:	9b03      	ldr	r3, [sp, #12]
 800985a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800985c:	1bdb      	subs	r3, r3, r7
 800985e:	4638      	mov	r0, r7
 8009860:	6013      	str	r3, [r2, #0]
 8009862:	b004      	add	sp, #16
 8009864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009868:	1c59      	adds	r1, r3, #1
 800986a:	9103      	str	r1, [sp, #12]
 800986c:	701a      	strb	r2, [r3, #0]
 800986e:	e7f0      	b.n	8009852 <__cvt+0xa6>

08009870 <__exponent>:
 8009870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009872:	4603      	mov	r3, r0
 8009874:	2900      	cmp	r1, #0
 8009876:	bfb8      	it	lt
 8009878:	4249      	neglt	r1, r1
 800987a:	f803 2b02 	strb.w	r2, [r3], #2
 800987e:	bfb4      	ite	lt
 8009880:	222d      	movlt	r2, #45	; 0x2d
 8009882:	222b      	movge	r2, #43	; 0x2b
 8009884:	2909      	cmp	r1, #9
 8009886:	7042      	strb	r2, [r0, #1]
 8009888:	dd2a      	ble.n	80098e0 <__exponent+0x70>
 800988a:	f10d 0207 	add.w	r2, sp, #7
 800988e:	4617      	mov	r7, r2
 8009890:	260a      	movs	r6, #10
 8009892:	4694      	mov	ip, r2
 8009894:	fb91 f5f6 	sdiv	r5, r1, r6
 8009898:	fb06 1415 	mls	r4, r6, r5, r1
 800989c:	3430      	adds	r4, #48	; 0x30
 800989e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80098a2:	460c      	mov	r4, r1
 80098a4:	2c63      	cmp	r4, #99	; 0x63
 80098a6:	f102 32ff 	add.w	r2, r2, #4294967295
 80098aa:	4629      	mov	r1, r5
 80098ac:	dcf1      	bgt.n	8009892 <__exponent+0x22>
 80098ae:	3130      	adds	r1, #48	; 0x30
 80098b0:	f1ac 0402 	sub.w	r4, ip, #2
 80098b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80098b8:	1c41      	adds	r1, r0, #1
 80098ba:	4622      	mov	r2, r4
 80098bc:	42ba      	cmp	r2, r7
 80098be:	d30a      	bcc.n	80098d6 <__exponent+0x66>
 80098c0:	f10d 0209 	add.w	r2, sp, #9
 80098c4:	eba2 020c 	sub.w	r2, r2, ip
 80098c8:	42bc      	cmp	r4, r7
 80098ca:	bf88      	it	hi
 80098cc:	2200      	movhi	r2, #0
 80098ce:	4413      	add	r3, r2
 80098d0:	1a18      	subs	r0, r3, r0
 80098d2:	b003      	add	sp, #12
 80098d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80098da:	f801 5f01 	strb.w	r5, [r1, #1]!
 80098de:	e7ed      	b.n	80098bc <__exponent+0x4c>
 80098e0:	2330      	movs	r3, #48	; 0x30
 80098e2:	3130      	adds	r1, #48	; 0x30
 80098e4:	7083      	strb	r3, [r0, #2]
 80098e6:	70c1      	strb	r1, [r0, #3]
 80098e8:	1d03      	adds	r3, r0, #4
 80098ea:	e7f1      	b.n	80098d0 <__exponent+0x60>

080098ec <_printf_float>:
 80098ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f0:	ed2d 8b02 	vpush	{d8}
 80098f4:	b08d      	sub	sp, #52	; 0x34
 80098f6:	460c      	mov	r4, r1
 80098f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80098fc:	4616      	mov	r6, r2
 80098fe:	461f      	mov	r7, r3
 8009900:	4605      	mov	r5, r0
 8009902:	f000 fe05 	bl	800a510 <_localeconv_r>
 8009906:	f8d0 a000 	ldr.w	sl, [r0]
 800990a:	4650      	mov	r0, sl
 800990c:	f7f6 fcb0 	bl	8000270 <strlen>
 8009910:	2300      	movs	r3, #0
 8009912:	930a      	str	r3, [sp, #40]	; 0x28
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	9305      	str	r3, [sp, #20]
 8009918:	f8d8 3000 	ldr.w	r3, [r8]
 800991c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009920:	3307      	adds	r3, #7
 8009922:	f023 0307 	bic.w	r3, r3, #7
 8009926:	f103 0208 	add.w	r2, r3, #8
 800992a:	f8c8 2000 	str.w	r2, [r8]
 800992e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009932:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009936:	9307      	str	r3, [sp, #28]
 8009938:	f8cd 8018 	str.w	r8, [sp, #24]
 800993c:	ee08 0a10 	vmov	s16, r0
 8009940:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009944:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009948:	4b9e      	ldr	r3, [pc, #632]	; (8009bc4 <_printf_float+0x2d8>)
 800994a:	f04f 32ff 	mov.w	r2, #4294967295
 800994e:	f7f7 f8ed 	bl	8000b2c <__aeabi_dcmpun>
 8009952:	bb88      	cbnz	r0, 80099b8 <_printf_float+0xcc>
 8009954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009958:	4b9a      	ldr	r3, [pc, #616]	; (8009bc4 <_printf_float+0x2d8>)
 800995a:	f04f 32ff 	mov.w	r2, #4294967295
 800995e:	f7f7 f8c7 	bl	8000af0 <__aeabi_dcmple>
 8009962:	bb48      	cbnz	r0, 80099b8 <_printf_float+0xcc>
 8009964:	2200      	movs	r2, #0
 8009966:	2300      	movs	r3, #0
 8009968:	4640      	mov	r0, r8
 800996a:	4649      	mov	r1, r9
 800996c:	f7f7 f8b6 	bl	8000adc <__aeabi_dcmplt>
 8009970:	b110      	cbz	r0, 8009978 <_printf_float+0x8c>
 8009972:	232d      	movs	r3, #45	; 0x2d
 8009974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009978:	4a93      	ldr	r2, [pc, #588]	; (8009bc8 <_printf_float+0x2dc>)
 800997a:	4b94      	ldr	r3, [pc, #592]	; (8009bcc <_printf_float+0x2e0>)
 800997c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009980:	bf94      	ite	ls
 8009982:	4690      	movls	r8, r2
 8009984:	4698      	movhi	r8, r3
 8009986:	2303      	movs	r3, #3
 8009988:	6123      	str	r3, [r4, #16]
 800998a:	9b05      	ldr	r3, [sp, #20]
 800998c:	f023 0304 	bic.w	r3, r3, #4
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	f04f 0900 	mov.w	r9, #0
 8009996:	9700      	str	r7, [sp, #0]
 8009998:	4633      	mov	r3, r6
 800999a:	aa0b      	add	r2, sp, #44	; 0x2c
 800999c:	4621      	mov	r1, r4
 800999e:	4628      	mov	r0, r5
 80099a0:	f000 f9da 	bl	8009d58 <_printf_common>
 80099a4:	3001      	adds	r0, #1
 80099a6:	f040 8090 	bne.w	8009aca <_printf_float+0x1de>
 80099aa:	f04f 30ff 	mov.w	r0, #4294967295
 80099ae:	b00d      	add	sp, #52	; 0x34
 80099b0:	ecbd 8b02 	vpop	{d8}
 80099b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b8:	4642      	mov	r2, r8
 80099ba:	464b      	mov	r3, r9
 80099bc:	4640      	mov	r0, r8
 80099be:	4649      	mov	r1, r9
 80099c0:	f7f7 f8b4 	bl	8000b2c <__aeabi_dcmpun>
 80099c4:	b140      	cbz	r0, 80099d8 <_printf_float+0xec>
 80099c6:	464b      	mov	r3, r9
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bfbc      	itt	lt
 80099cc:	232d      	movlt	r3, #45	; 0x2d
 80099ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099d2:	4a7f      	ldr	r2, [pc, #508]	; (8009bd0 <_printf_float+0x2e4>)
 80099d4:	4b7f      	ldr	r3, [pc, #508]	; (8009bd4 <_printf_float+0x2e8>)
 80099d6:	e7d1      	b.n	800997c <_printf_float+0x90>
 80099d8:	6863      	ldr	r3, [r4, #4]
 80099da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80099de:	9206      	str	r2, [sp, #24]
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	d13f      	bne.n	8009a64 <_printf_float+0x178>
 80099e4:	2306      	movs	r3, #6
 80099e6:	6063      	str	r3, [r4, #4]
 80099e8:	9b05      	ldr	r3, [sp, #20]
 80099ea:	6861      	ldr	r1, [r4, #4]
 80099ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80099f0:	2300      	movs	r3, #0
 80099f2:	9303      	str	r3, [sp, #12]
 80099f4:	ab0a      	add	r3, sp, #40	; 0x28
 80099f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80099fa:	ab09      	add	r3, sp, #36	; 0x24
 80099fc:	ec49 8b10 	vmov	d0, r8, r9
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	6022      	str	r2, [r4, #0]
 8009a04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f7ff fecf 	bl	80097ac <__cvt>
 8009a0e:	9b06      	ldr	r3, [sp, #24]
 8009a10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a12:	2b47      	cmp	r3, #71	; 0x47
 8009a14:	4680      	mov	r8, r0
 8009a16:	d108      	bne.n	8009a2a <_printf_float+0x13e>
 8009a18:	1cc8      	adds	r0, r1, #3
 8009a1a:	db02      	blt.n	8009a22 <_printf_float+0x136>
 8009a1c:	6863      	ldr	r3, [r4, #4]
 8009a1e:	4299      	cmp	r1, r3
 8009a20:	dd41      	ble.n	8009aa6 <_printf_float+0x1ba>
 8009a22:	f1ab 0302 	sub.w	r3, fp, #2
 8009a26:	fa5f fb83 	uxtb.w	fp, r3
 8009a2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a2e:	d820      	bhi.n	8009a72 <_printf_float+0x186>
 8009a30:	3901      	subs	r1, #1
 8009a32:	465a      	mov	r2, fp
 8009a34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a38:	9109      	str	r1, [sp, #36]	; 0x24
 8009a3a:	f7ff ff19 	bl	8009870 <__exponent>
 8009a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a40:	1813      	adds	r3, r2, r0
 8009a42:	2a01      	cmp	r2, #1
 8009a44:	4681      	mov	r9, r0
 8009a46:	6123      	str	r3, [r4, #16]
 8009a48:	dc02      	bgt.n	8009a50 <_printf_float+0x164>
 8009a4a:	6822      	ldr	r2, [r4, #0]
 8009a4c:	07d2      	lsls	r2, r2, #31
 8009a4e:	d501      	bpl.n	8009a54 <_printf_float+0x168>
 8009a50:	3301      	adds	r3, #1
 8009a52:	6123      	str	r3, [r4, #16]
 8009a54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d09c      	beq.n	8009996 <_printf_float+0xaa>
 8009a5c:	232d      	movs	r3, #45	; 0x2d
 8009a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a62:	e798      	b.n	8009996 <_printf_float+0xaa>
 8009a64:	9a06      	ldr	r2, [sp, #24]
 8009a66:	2a47      	cmp	r2, #71	; 0x47
 8009a68:	d1be      	bne.n	80099e8 <_printf_float+0xfc>
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1bc      	bne.n	80099e8 <_printf_float+0xfc>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e7b9      	b.n	80099e6 <_printf_float+0xfa>
 8009a72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a76:	d118      	bne.n	8009aaa <_printf_float+0x1be>
 8009a78:	2900      	cmp	r1, #0
 8009a7a:	6863      	ldr	r3, [r4, #4]
 8009a7c:	dd0b      	ble.n	8009a96 <_printf_float+0x1aa>
 8009a7e:	6121      	str	r1, [r4, #16]
 8009a80:	b913      	cbnz	r3, 8009a88 <_printf_float+0x19c>
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	07d0      	lsls	r0, r2, #31
 8009a86:	d502      	bpl.n	8009a8e <_printf_float+0x1a2>
 8009a88:	3301      	adds	r3, #1
 8009a8a:	440b      	add	r3, r1
 8009a8c:	6123      	str	r3, [r4, #16]
 8009a8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a90:	f04f 0900 	mov.w	r9, #0
 8009a94:	e7de      	b.n	8009a54 <_printf_float+0x168>
 8009a96:	b913      	cbnz	r3, 8009a9e <_printf_float+0x1b2>
 8009a98:	6822      	ldr	r2, [r4, #0]
 8009a9a:	07d2      	lsls	r2, r2, #31
 8009a9c:	d501      	bpl.n	8009aa2 <_printf_float+0x1b6>
 8009a9e:	3302      	adds	r3, #2
 8009aa0:	e7f4      	b.n	8009a8c <_printf_float+0x1a0>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e7f2      	b.n	8009a8c <_printf_float+0x1a0>
 8009aa6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aac:	4299      	cmp	r1, r3
 8009aae:	db05      	blt.n	8009abc <_printf_float+0x1d0>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	6121      	str	r1, [r4, #16]
 8009ab4:	07d8      	lsls	r0, r3, #31
 8009ab6:	d5ea      	bpl.n	8009a8e <_printf_float+0x1a2>
 8009ab8:	1c4b      	adds	r3, r1, #1
 8009aba:	e7e7      	b.n	8009a8c <_printf_float+0x1a0>
 8009abc:	2900      	cmp	r1, #0
 8009abe:	bfd4      	ite	le
 8009ac0:	f1c1 0202 	rsble	r2, r1, #2
 8009ac4:	2201      	movgt	r2, #1
 8009ac6:	4413      	add	r3, r2
 8009ac8:	e7e0      	b.n	8009a8c <_printf_float+0x1a0>
 8009aca:	6823      	ldr	r3, [r4, #0]
 8009acc:	055a      	lsls	r2, r3, #21
 8009ace:	d407      	bmi.n	8009ae0 <_printf_float+0x1f4>
 8009ad0:	6923      	ldr	r3, [r4, #16]
 8009ad2:	4642      	mov	r2, r8
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	47b8      	blx	r7
 8009ada:	3001      	adds	r0, #1
 8009adc:	d12c      	bne.n	8009b38 <_printf_float+0x24c>
 8009ade:	e764      	b.n	80099aa <_printf_float+0xbe>
 8009ae0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ae4:	f240 80e0 	bls.w	8009ca8 <_printf_float+0x3bc>
 8009ae8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009aec:	2200      	movs	r2, #0
 8009aee:	2300      	movs	r3, #0
 8009af0:	f7f6 ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d034      	beq.n	8009b62 <_printf_float+0x276>
 8009af8:	4a37      	ldr	r2, [pc, #220]	; (8009bd8 <_printf_float+0x2ec>)
 8009afa:	2301      	movs	r3, #1
 8009afc:	4631      	mov	r1, r6
 8009afe:	4628      	mov	r0, r5
 8009b00:	47b8      	blx	r7
 8009b02:	3001      	adds	r0, #1
 8009b04:	f43f af51 	beq.w	80099aa <_printf_float+0xbe>
 8009b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	db02      	blt.n	8009b16 <_printf_float+0x22a>
 8009b10:	6823      	ldr	r3, [r4, #0]
 8009b12:	07d8      	lsls	r0, r3, #31
 8009b14:	d510      	bpl.n	8009b38 <_printf_float+0x24c>
 8009b16:	ee18 3a10 	vmov	r3, s16
 8009b1a:	4652      	mov	r2, sl
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4628      	mov	r0, r5
 8009b20:	47b8      	blx	r7
 8009b22:	3001      	adds	r0, #1
 8009b24:	f43f af41 	beq.w	80099aa <_printf_float+0xbe>
 8009b28:	f04f 0800 	mov.w	r8, #0
 8009b2c:	f104 091a 	add.w	r9, r4, #26
 8009b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b32:	3b01      	subs	r3, #1
 8009b34:	4543      	cmp	r3, r8
 8009b36:	dc09      	bgt.n	8009b4c <_printf_float+0x260>
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	079b      	lsls	r3, r3, #30
 8009b3c:	f100 8107 	bmi.w	8009d4e <_printf_float+0x462>
 8009b40:	68e0      	ldr	r0, [r4, #12]
 8009b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b44:	4298      	cmp	r0, r3
 8009b46:	bfb8      	it	lt
 8009b48:	4618      	movlt	r0, r3
 8009b4a:	e730      	b.n	80099ae <_printf_float+0xc2>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	464a      	mov	r2, r9
 8009b50:	4631      	mov	r1, r6
 8009b52:	4628      	mov	r0, r5
 8009b54:	47b8      	blx	r7
 8009b56:	3001      	adds	r0, #1
 8009b58:	f43f af27 	beq.w	80099aa <_printf_float+0xbe>
 8009b5c:	f108 0801 	add.w	r8, r8, #1
 8009b60:	e7e6      	b.n	8009b30 <_printf_float+0x244>
 8009b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	dc39      	bgt.n	8009bdc <_printf_float+0x2f0>
 8009b68:	4a1b      	ldr	r2, [pc, #108]	; (8009bd8 <_printf_float+0x2ec>)
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	4631      	mov	r1, r6
 8009b6e:	4628      	mov	r0, r5
 8009b70:	47b8      	blx	r7
 8009b72:	3001      	adds	r0, #1
 8009b74:	f43f af19 	beq.w	80099aa <_printf_float+0xbe>
 8009b78:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	d102      	bne.n	8009b86 <_printf_float+0x29a>
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	07d9      	lsls	r1, r3, #31
 8009b84:	d5d8      	bpl.n	8009b38 <_printf_float+0x24c>
 8009b86:	ee18 3a10 	vmov	r3, s16
 8009b8a:	4652      	mov	r2, sl
 8009b8c:	4631      	mov	r1, r6
 8009b8e:	4628      	mov	r0, r5
 8009b90:	47b8      	blx	r7
 8009b92:	3001      	adds	r0, #1
 8009b94:	f43f af09 	beq.w	80099aa <_printf_float+0xbe>
 8009b98:	f04f 0900 	mov.w	r9, #0
 8009b9c:	f104 0a1a 	add.w	sl, r4, #26
 8009ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba2:	425b      	negs	r3, r3
 8009ba4:	454b      	cmp	r3, r9
 8009ba6:	dc01      	bgt.n	8009bac <_printf_float+0x2c0>
 8009ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009baa:	e792      	b.n	8009ad2 <_printf_float+0x1e6>
 8009bac:	2301      	movs	r3, #1
 8009bae:	4652      	mov	r2, sl
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	47b8      	blx	r7
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	f43f aef7 	beq.w	80099aa <_printf_float+0xbe>
 8009bbc:	f109 0901 	add.w	r9, r9, #1
 8009bc0:	e7ee      	b.n	8009ba0 <_printf_float+0x2b4>
 8009bc2:	bf00      	nop
 8009bc4:	7fefffff 	.word	0x7fefffff
 8009bc8:	0800d000 	.word	0x0800d000
 8009bcc:	0800d004 	.word	0x0800d004
 8009bd0:	0800d008 	.word	0x0800d008
 8009bd4:	0800d00c 	.word	0x0800d00c
 8009bd8:	0800d23b 	.word	0x0800d23b
 8009bdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009be0:	429a      	cmp	r2, r3
 8009be2:	bfa8      	it	ge
 8009be4:	461a      	movge	r2, r3
 8009be6:	2a00      	cmp	r2, #0
 8009be8:	4691      	mov	r9, r2
 8009bea:	dc37      	bgt.n	8009c5c <_printf_float+0x370>
 8009bec:	f04f 0b00 	mov.w	fp, #0
 8009bf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bf4:	f104 021a 	add.w	r2, r4, #26
 8009bf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bfa:	9305      	str	r3, [sp, #20]
 8009bfc:	eba3 0309 	sub.w	r3, r3, r9
 8009c00:	455b      	cmp	r3, fp
 8009c02:	dc33      	bgt.n	8009c6c <_printf_float+0x380>
 8009c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	db3b      	blt.n	8009c84 <_printf_float+0x398>
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	07da      	lsls	r2, r3, #31
 8009c10:	d438      	bmi.n	8009c84 <_printf_float+0x398>
 8009c12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009c16:	eba2 0903 	sub.w	r9, r2, r3
 8009c1a:	9b05      	ldr	r3, [sp, #20]
 8009c1c:	1ad2      	subs	r2, r2, r3
 8009c1e:	4591      	cmp	r9, r2
 8009c20:	bfa8      	it	ge
 8009c22:	4691      	movge	r9, r2
 8009c24:	f1b9 0f00 	cmp.w	r9, #0
 8009c28:	dc35      	bgt.n	8009c96 <_printf_float+0x3aa>
 8009c2a:	f04f 0800 	mov.w	r8, #0
 8009c2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c32:	f104 0a1a 	add.w	sl, r4, #26
 8009c36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c3a:	1a9b      	subs	r3, r3, r2
 8009c3c:	eba3 0309 	sub.w	r3, r3, r9
 8009c40:	4543      	cmp	r3, r8
 8009c42:	f77f af79 	ble.w	8009b38 <_printf_float+0x24c>
 8009c46:	2301      	movs	r3, #1
 8009c48:	4652      	mov	r2, sl
 8009c4a:	4631      	mov	r1, r6
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	47b8      	blx	r7
 8009c50:	3001      	adds	r0, #1
 8009c52:	f43f aeaa 	beq.w	80099aa <_printf_float+0xbe>
 8009c56:	f108 0801 	add.w	r8, r8, #1
 8009c5a:	e7ec      	b.n	8009c36 <_printf_float+0x34a>
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	4631      	mov	r1, r6
 8009c60:	4642      	mov	r2, r8
 8009c62:	4628      	mov	r0, r5
 8009c64:	47b8      	blx	r7
 8009c66:	3001      	adds	r0, #1
 8009c68:	d1c0      	bne.n	8009bec <_printf_float+0x300>
 8009c6a:	e69e      	b.n	80099aa <_printf_float+0xbe>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	4631      	mov	r1, r6
 8009c70:	4628      	mov	r0, r5
 8009c72:	9205      	str	r2, [sp, #20]
 8009c74:	47b8      	blx	r7
 8009c76:	3001      	adds	r0, #1
 8009c78:	f43f ae97 	beq.w	80099aa <_printf_float+0xbe>
 8009c7c:	9a05      	ldr	r2, [sp, #20]
 8009c7e:	f10b 0b01 	add.w	fp, fp, #1
 8009c82:	e7b9      	b.n	8009bf8 <_printf_float+0x30c>
 8009c84:	ee18 3a10 	vmov	r3, s16
 8009c88:	4652      	mov	r2, sl
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	47b8      	blx	r7
 8009c90:	3001      	adds	r0, #1
 8009c92:	d1be      	bne.n	8009c12 <_printf_float+0x326>
 8009c94:	e689      	b.n	80099aa <_printf_float+0xbe>
 8009c96:	9a05      	ldr	r2, [sp, #20]
 8009c98:	464b      	mov	r3, r9
 8009c9a:	4442      	add	r2, r8
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	47b8      	blx	r7
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d1c1      	bne.n	8009c2a <_printf_float+0x33e>
 8009ca6:	e680      	b.n	80099aa <_printf_float+0xbe>
 8009ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009caa:	2a01      	cmp	r2, #1
 8009cac:	dc01      	bgt.n	8009cb2 <_printf_float+0x3c6>
 8009cae:	07db      	lsls	r3, r3, #31
 8009cb0:	d53a      	bpl.n	8009d28 <_printf_float+0x43c>
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	4642      	mov	r2, r8
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	4628      	mov	r0, r5
 8009cba:	47b8      	blx	r7
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	f43f ae74 	beq.w	80099aa <_printf_float+0xbe>
 8009cc2:	ee18 3a10 	vmov	r3, s16
 8009cc6:	4652      	mov	r2, sl
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4628      	mov	r0, r5
 8009ccc:	47b8      	blx	r7
 8009cce:	3001      	adds	r0, #1
 8009cd0:	f43f ae6b 	beq.w	80099aa <_printf_float+0xbe>
 8009cd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009ce0:	f7f6 fef2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ce4:	b9d8      	cbnz	r0, 8009d1e <_printf_float+0x432>
 8009ce6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009cea:	f108 0201 	add.w	r2, r8, #1
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b8      	blx	r7
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	d10e      	bne.n	8009d16 <_printf_float+0x42a>
 8009cf8:	e657      	b.n	80099aa <_printf_float+0xbe>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	4652      	mov	r2, sl
 8009cfe:	4631      	mov	r1, r6
 8009d00:	4628      	mov	r0, r5
 8009d02:	47b8      	blx	r7
 8009d04:	3001      	adds	r0, #1
 8009d06:	f43f ae50 	beq.w	80099aa <_printf_float+0xbe>
 8009d0a:	f108 0801 	add.w	r8, r8, #1
 8009d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d10:	3b01      	subs	r3, #1
 8009d12:	4543      	cmp	r3, r8
 8009d14:	dcf1      	bgt.n	8009cfa <_printf_float+0x40e>
 8009d16:	464b      	mov	r3, r9
 8009d18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d1c:	e6da      	b.n	8009ad4 <_printf_float+0x1e8>
 8009d1e:	f04f 0800 	mov.w	r8, #0
 8009d22:	f104 0a1a 	add.w	sl, r4, #26
 8009d26:	e7f2      	b.n	8009d0e <_printf_float+0x422>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	4642      	mov	r2, r8
 8009d2c:	e7df      	b.n	8009cee <_printf_float+0x402>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	464a      	mov	r2, r9
 8009d32:	4631      	mov	r1, r6
 8009d34:	4628      	mov	r0, r5
 8009d36:	47b8      	blx	r7
 8009d38:	3001      	adds	r0, #1
 8009d3a:	f43f ae36 	beq.w	80099aa <_printf_float+0xbe>
 8009d3e:	f108 0801 	add.w	r8, r8, #1
 8009d42:	68e3      	ldr	r3, [r4, #12]
 8009d44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d46:	1a5b      	subs	r3, r3, r1
 8009d48:	4543      	cmp	r3, r8
 8009d4a:	dcf0      	bgt.n	8009d2e <_printf_float+0x442>
 8009d4c:	e6f8      	b.n	8009b40 <_printf_float+0x254>
 8009d4e:	f04f 0800 	mov.w	r8, #0
 8009d52:	f104 0919 	add.w	r9, r4, #25
 8009d56:	e7f4      	b.n	8009d42 <_printf_float+0x456>

08009d58 <_printf_common>:
 8009d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d5c:	4616      	mov	r6, r2
 8009d5e:	4699      	mov	r9, r3
 8009d60:	688a      	ldr	r2, [r1, #8]
 8009d62:	690b      	ldr	r3, [r1, #16]
 8009d64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	bfb8      	it	lt
 8009d6c:	4613      	movlt	r3, r2
 8009d6e:	6033      	str	r3, [r6, #0]
 8009d70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d74:	4607      	mov	r7, r0
 8009d76:	460c      	mov	r4, r1
 8009d78:	b10a      	cbz	r2, 8009d7e <_printf_common+0x26>
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	6033      	str	r3, [r6, #0]
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	0699      	lsls	r1, r3, #26
 8009d82:	bf42      	ittt	mi
 8009d84:	6833      	ldrmi	r3, [r6, #0]
 8009d86:	3302      	addmi	r3, #2
 8009d88:	6033      	strmi	r3, [r6, #0]
 8009d8a:	6825      	ldr	r5, [r4, #0]
 8009d8c:	f015 0506 	ands.w	r5, r5, #6
 8009d90:	d106      	bne.n	8009da0 <_printf_common+0x48>
 8009d92:	f104 0a19 	add.w	sl, r4, #25
 8009d96:	68e3      	ldr	r3, [r4, #12]
 8009d98:	6832      	ldr	r2, [r6, #0]
 8009d9a:	1a9b      	subs	r3, r3, r2
 8009d9c:	42ab      	cmp	r3, r5
 8009d9e:	dc26      	bgt.n	8009dee <_printf_common+0x96>
 8009da0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009da4:	1e13      	subs	r3, r2, #0
 8009da6:	6822      	ldr	r2, [r4, #0]
 8009da8:	bf18      	it	ne
 8009daa:	2301      	movne	r3, #1
 8009dac:	0692      	lsls	r2, r2, #26
 8009dae:	d42b      	bmi.n	8009e08 <_printf_common+0xb0>
 8009db0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009db4:	4649      	mov	r1, r9
 8009db6:	4638      	mov	r0, r7
 8009db8:	47c0      	blx	r8
 8009dba:	3001      	adds	r0, #1
 8009dbc:	d01e      	beq.n	8009dfc <_printf_common+0xa4>
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	6922      	ldr	r2, [r4, #16]
 8009dc2:	f003 0306 	and.w	r3, r3, #6
 8009dc6:	2b04      	cmp	r3, #4
 8009dc8:	bf02      	ittt	eq
 8009dca:	68e5      	ldreq	r5, [r4, #12]
 8009dcc:	6833      	ldreq	r3, [r6, #0]
 8009dce:	1aed      	subeq	r5, r5, r3
 8009dd0:	68a3      	ldr	r3, [r4, #8]
 8009dd2:	bf0c      	ite	eq
 8009dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dd8:	2500      	movne	r5, #0
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	bfc4      	itt	gt
 8009dde:	1a9b      	subgt	r3, r3, r2
 8009de0:	18ed      	addgt	r5, r5, r3
 8009de2:	2600      	movs	r6, #0
 8009de4:	341a      	adds	r4, #26
 8009de6:	42b5      	cmp	r5, r6
 8009de8:	d11a      	bne.n	8009e20 <_printf_common+0xc8>
 8009dea:	2000      	movs	r0, #0
 8009dec:	e008      	b.n	8009e00 <_printf_common+0xa8>
 8009dee:	2301      	movs	r3, #1
 8009df0:	4652      	mov	r2, sl
 8009df2:	4649      	mov	r1, r9
 8009df4:	4638      	mov	r0, r7
 8009df6:	47c0      	blx	r8
 8009df8:	3001      	adds	r0, #1
 8009dfa:	d103      	bne.n	8009e04 <_printf_common+0xac>
 8009dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e04:	3501      	adds	r5, #1
 8009e06:	e7c6      	b.n	8009d96 <_printf_common+0x3e>
 8009e08:	18e1      	adds	r1, r4, r3
 8009e0a:	1c5a      	adds	r2, r3, #1
 8009e0c:	2030      	movs	r0, #48	; 0x30
 8009e0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e12:	4422      	add	r2, r4
 8009e14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e1c:	3302      	adds	r3, #2
 8009e1e:	e7c7      	b.n	8009db0 <_printf_common+0x58>
 8009e20:	2301      	movs	r3, #1
 8009e22:	4622      	mov	r2, r4
 8009e24:	4649      	mov	r1, r9
 8009e26:	4638      	mov	r0, r7
 8009e28:	47c0      	blx	r8
 8009e2a:	3001      	adds	r0, #1
 8009e2c:	d0e6      	beq.n	8009dfc <_printf_common+0xa4>
 8009e2e:	3601      	adds	r6, #1
 8009e30:	e7d9      	b.n	8009de6 <_printf_common+0x8e>
	...

08009e34 <_printf_i>:
 8009e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e38:	7e0f      	ldrb	r7, [r1, #24]
 8009e3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e3c:	2f78      	cmp	r7, #120	; 0x78
 8009e3e:	4691      	mov	r9, r2
 8009e40:	4680      	mov	r8, r0
 8009e42:	460c      	mov	r4, r1
 8009e44:	469a      	mov	sl, r3
 8009e46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e4a:	d807      	bhi.n	8009e5c <_printf_i+0x28>
 8009e4c:	2f62      	cmp	r7, #98	; 0x62
 8009e4e:	d80a      	bhi.n	8009e66 <_printf_i+0x32>
 8009e50:	2f00      	cmp	r7, #0
 8009e52:	f000 80d4 	beq.w	8009ffe <_printf_i+0x1ca>
 8009e56:	2f58      	cmp	r7, #88	; 0x58
 8009e58:	f000 80c0 	beq.w	8009fdc <_printf_i+0x1a8>
 8009e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e64:	e03a      	b.n	8009edc <_printf_i+0xa8>
 8009e66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e6a:	2b15      	cmp	r3, #21
 8009e6c:	d8f6      	bhi.n	8009e5c <_printf_i+0x28>
 8009e6e:	a101      	add	r1, pc, #4	; (adr r1, 8009e74 <_printf_i+0x40>)
 8009e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e74:	08009ecd 	.word	0x08009ecd
 8009e78:	08009ee1 	.word	0x08009ee1
 8009e7c:	08009e5d 	.word	0x08009e5d
 8009e80:	08009e5d 	.word	0x08009e5d
 8009e84:	08009e5d 	.word	0x08009e5d
 8009e88:	08009e5d 	.word	0x08009e5d
 8009e8c:	08009ee1 	.word	0x08009ee1
 8009e90:	08009e5d 	.word	0x08009e5d
 8009e94:	08009e5d 	.word	0x08009e5d
 8009e98:	08009e5d 	.word	0x08009e5d
 8009e9c:	08009e5d 	.word	0x08009e5d
 8009ea0:	08009fe5 	.word	0x08009fe5
 8009ea4:	08009f0d 	.word	0x08009f0d
 8009ea8:	08009f9f 	.word	0x08009f9f
 8009eac:	08009e5d 	.word	0x08009e5d
 8009eb0:	08009e5d 	.word	0x08009e5d
 8009eb4:	0800a007 	.word	0x0800a007
 8009eb8:	08009e5d 	.word	0x08009e5d
 8009ebc:	08009f0d 	.word	0x08009f0d
 8009ec0:	08009e5d 	.word	0x08009e5d
 8009ec4:	08009e5d 	.word	0x08009e5d
 8009ec8:	08009fa7 	.word	0x08009fa7
 8009ecc:	682b      	ldr	r3, [r5, #0]
 8009ece:	1d1a      	adds	r2, r3, #4
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	602a      	str	r2, [r5, #0]
 8009ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009edc:	2301      	movs	r3, #1
 8009ede:	e09f      	b.n	800a020 <_printf_i+0x1ec>
 8009ee0:	6820      	ldr	r0, [r4, #0]
 8009ee2:	682b      	ldr	r3, [r5, #0]
 8009ee4:	0607      	lsls	r7, r0, #24
 8009ee6:	f103 0104 	add.w	r1, r3, #4
 8009eea:	6029      	str	r1, [r5, #0]
 8009eec:	d501      	bpl.n	8009ef2 <_printf_i+0xbe>
 8009eee:	681e      	ldr	r6, [r3, #0]
 8009ef0:	e003      	b.n	8009efa <_printf_i+0xc6>
 8009ef2:	0646      	lsls	r6, r0, #25
 8009ef4:	d5fb      	bpl.n	8009eee <_printf_i+0xba>
 8009ef6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009efa:	2e00      	cmp	r6, #0
 8009efc:	da03      	bge.n	8009f06 <_printf_i+0xd2>
 8009efe:	232d      	movs	r3, #45	; 0x2d
 8009f00:	4276      	negs	r6, r6
 8009f02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f06:	485a      	ldr	r0, [pc, #360]	; (800a070 <_printf_i+0x23c>)
 8009f08:	230a      	movs	r3, #10
 8009f0a:	e012      	b.n	8009f32 <_printf_i+0xfe>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	6820      	ldr	r0, [r4, #0]
 8009f10:	1d19      	adds	r1, r3, #4
 8009f12:	6029      	str	r1, [r5, #0]
 8009f14:	0605      	lsls	r5, r0, #24
 8009f16:	d501      	bpl.n	8009f1c <_printf_i+0xe8>
 8009f18:	681e      	ldr	r6, [r3, #0]
 8009f1a:	e002      	b.n	8009f22 <_printf_i+0xee>
 8009f1c:	0641      	lsls	r1, r0, #25
 8009f1e:	d5fb      	bpl.n	8009f18 <_printf_i+0xe4>
 8009f20:	881e      	ldrh	r6, [r3, #0]
 8009f22:	4853      	ldr	r0, [pc, #332]	; (800a070 <_printf_i+0x23c>)
 8009f24:	2f6f      	cmp	r7, #111	; 0x6f
 8009f26:	bf0c      	ite	eq
 8009f28:	2308      	moveq	r3, #8
 8009f2a:	230a      	movne	r3, #10
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f32:	6865      	ldr	r5, [r4, #4]
 8009f34:	60a5      	str	r5, [r4, #8]
 8009f36:	2d00      	cmp	r5, #0
 8009f38:	bfa2      	ittt	ge
 8009f3a:	6821      	ldrge	r1, [r4, #0]
 8009f3c:	f021 0104 	bicge.w	r1, r1, #4
 8009f40:	6021      	strge	r1, [r4, #0]
 8009f42:	b90e      	cbnz	r6, 8009f48 <_printf_i+0x114>
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	d04b      	beq.n	8009fe0 <_printf_i+0x1ac>
 8009f48:	4615      	mov	r5, r2
 8009f4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f4e:	fb03 6711 	mls	r7, r3, r1, r6
 8009f52:	5dc7      	ldrb	r7, [r0, r7]
 8009f54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f58:	4637      	mov	r7, r6
 8009f5a:	42bb      	cmp	r3, r7
 8009f5c:	460e      	mov	r6, r1
 8009f5e:	d9f4      	bls.n	8009f4a <_printf_i+0x116>
 8009f60:	2b08      	cmp	r3, #8
 8009f62:	d10b      	bne.n	8009f7c <_printf_i+0x148>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	07de      	lsls	r6, r3, #31
 8009f68:	d508      	bpl.n	8009f7c <_printf_i+0x148>
 8009f6a:	6923      	ldr	r3, [r4, #16]
 8009f6c:	6861      	ldr	r1, [r4, #4]
 8009f6e:	4299      	cmp	r1, r3
 8009f70:	bfde      	ittt	le
 8009f72:	2330      	movle	r3, #48	; 0x30
 8009f74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f7c:	1b52      	subs	r2, r2, r5
 8009f7e:	6122      	str	r2, [r4, #16]
 8009f80:	f8cd a000 	str.w	sl, [sp]
 8009f84:	464b      	mov	r3, r9
 8009f86:	aa03      	add	r2, sp, #12
 8009f88:	4621      	mov	r1, r4
 8009f8a:	4640      	mov	r0, r8
 8009f8c:	f7ff fee4 	bl	8009d58 <_printf_common>
 8009f90:	3001      	adds	r0, #1
 8009f92:	d14a      	bne.n	800a02a <_printf_i+0x1f6>
 8009f94:	f04f 30ff 	mov.w	r0, #4294967295
 8009f98:	b004      	add	sp, #16
 8009f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9e:	6823      	ldr	r3, [r4, #0]
 8009fa0:	f043 0320 	orr.w	r3, r3, #32
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	4833      	ldr	r0, [pc, #204]	; (800a074 <_printf_i+0x240>)
 8009fa8:	2778      	movs	r7, #120	; 0x78
 8009faa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	6829      	ldr	r1, [r5, #0]
 8009fb2:	061f      	lsls	r7, r3, #24
 8009fb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fb8:	d402      	bmi.n	8009fc0 <_printf_i+0x18c>
 8009fba:	065f      	lsls	r7, r3, #25
 8009fbc:	bf48      	it	mi
 8009fbe:	b2b6      	uxthmi	r6, r6
 8009fc0:	07df      	lsls	r7, r3, #31
 8009fc2:	bf48      	it	mi
 8009fc4:	f043 0320 	orrmi.w	r3, r3, #32
 8009fc8:	6029      	str	r1, [r5, #0]
 8009fca:	bf48      	it	mi
 8009fcc:	6023      	strmi	r3, [r4, #0]
 8009fce:	b91e      	cbnz	r6, 8009fd8 <_printf_i+0x1a4>
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	f023 0320 	bic.w	r3, r3, #32
 8009fd6:	6023      	str	r3, [r4, #0]
 8009fd8:	2310      	movs	r3, #16
 8009fda:	e7a7      	b.n	8009f2c <_printf_i+0xf8>
 8009fdc:	4824      	ldr	r0, [pc, #144]	; (800a070 <_printf_i+0x23c>)
 8009fde:	e7e4      	b.n	8009faa <_printf_i+0x176>
 8009fe0:	4615      	mov	r5, r2
 8009fe2:	e7bd      	b.n	8009f60 <_printf_i+0x12c>
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	6826      	ldr	r6, [r4, #0]
 8009fe8:	6961      	ldr	r1, [r4, #20]
 8009fea:	1d18      	adds	r0, r3, #4
 8009fec:	6028      	str	r0, [r5, #0]
 8009fee:	0635      	lsls	r5, r6, #24
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	d501      	bpl.n	8009ff8 <_printf_i+0x1c4>
 8009ff4:	6019      	str	r1, [r3, #0]
 8009ff6:	e002      	b.n	8009ffe <_printf_i+0x1ca>
 8009ff8:	0670      	lsls	r0, r6, #25
 8009ffa:	d5fb      	bpl.n	8009ff4 <_printf_i+0x1c0>
 8009ffc:	8019      	strh	r1, [r3, #0]
 8009ffe:	2300      	movs	r3, #0
 800a000:	6123      	str	r3, [r4, #16]
 800a002:	4615      	mov	r5, r2
 800a004:	e7bc      	b.n	8009f80 <_printf_i+0x14c>
 800a006:	682b      	ldr	r3, [r5, #0]
 800a008:	1d1a      	adds	r2, r3, #4
 800a00a:	602a      	str	r2, [r5, #0]
 800a00c:	681d      	ldr	r5, [r3, #0]
 800a00e:	6862      	ldr	r2, [r4, #4]
 800a010:	2100      	movs	r1, #0
 800a012:	4628      	mov	r0, r5
 800a014:	f7f6 f8dc 	bl	80001d0 <memchr>
 800a018:	b108      	cbz	r0, 800a01e <_printf_i+0x1ea>
 800a01a:	1b40      	subs	r0, r0, r5
 800a01c:	6060      	str	r0, [r4, #4]
 800a01e:	6863      	ldr	r3, [r4, #4]
 800a020:	6123      	str	r3, [r4, #16]
 800a022:	2300      	movs	r3, #0
 800a024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a028:	e7aa      	b.n	8009f80 <_printf_i+0x14c>
 800a02a:	6923      	ldr	r3, [r4, #16]
 800a02c:	462a      	mov	r2, r5
 800a02e:	4649      	mov	r1, r9
 800a030:	4640      	mov	r0, r8
 800a032:	47d0      	blx	sl
 800a034:	3001      	adds	r0, #1
 800a036:	d0ad      	beq.n	8009f94 <_printf_i+0x160>
 800a038:	6823      	ldr	r3, [r4, #0]
 800a03a:	079b      	lsls	r3, r3, #30
 800a03c:	d413      	bmi.n	800a066 <_printf_i+0x232>
 800a03e:	68e0      	ldr	r0, [r4, #12]
 800a040:	9b03      	ldr	r3, [sp, #12]
 800a042:	4298      	cmp	r0, r3
 800a044:	bfb8      	it	lt
 800a046:	4618      	movlt	r0, r3
 800a048:	e7a6      	b.n	8009f98 <_printf_i+0x164>
 800a04a:	2301      	movs	r3, #1
 800a04c:	4632      	mov	r2, r6
 800a04e:	4649      	mov	r1, r9
 800a050:	4640      	mov	r0, r8
 800a052:	47d0      	blx	sl
 800a054:	3001      	adds	r0, #1
 800a056:	d09d      	beq.n	8009f94 <_printf_i+0x160>
 800a058:	3501      	adds	r5, #1
 800a05a:	68e3      	ldr	r3, [r4, #12]
 800a05c:	9903      	ldr	r1, [sp, #12]
 800a05e:	1a5b      	subs	r3, r3, r1
 800a060:	42ab      	cmp	r3, r5
 800a062:	dcf2      	bgt.n	800a04a <_printf_i+0x216>
 800a064:	e7eb      	b.n	800a03e <_printf_i+0x20a>
 800a066:	2500      	movs	r5, #0
 800a068:	f104 0619 	add.w	r6, r4, #25
 800a06c:	e7f5      	b.n	800a05a <_printf_i+0x226>
 800a06e:	bf00      	nop
 800a070:	0800d010 	.word	0x0800d010
 800a074:	0800d021 	.word	0x0800d021

0800a078 <std>:
 800a078:	2300      	movs	r3, #0
 800a07a:	b510      	push	{r4, lr}
 800a07c:	4604      	mov	r4, r0
 800a07e:	e9c0 3300 	strd	r3, r3, [r0]
 800a082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a086:	6083      	str	r3, [r0, #8]
 800a088:	8181      	strh	r1, [r0, #12]
 800a08a:	6643      	str	r3, [r0, #100]	; 0x64
 800a08c:	81c2      	strh	r2, [r0, #14]
 800a08e:	6183      	str	r3, [r0, #24]
 800a090:	4619      	mov	r1, r3
 800a092:	2208      	movs	r2, #8
 800a094:	305c      	adds	r0, #92	; 0x5c
 800a096:	f000 fa33 	bl	800a500 <memset>
 800a09a:	4b0d      	ldr	r3, [pc, #52]	; (800a0d0 <std+0x58>)
 800a09c:	6263      	str	r3, [r4, #36]	; 0x24
 800a09e:	4b0d      	ldr	r3, [pc, #52]	; (800a0d4 <std+0x5c>)
 800a0a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0a2:	4b0d      	ldr	r3, [pc, #52]	; (800a0d8 <std+0x60>)
 800a0a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0a6:	4b0d      	ldr	r3, [pc, #52]	; (800a0dc <std+0x64>)
 800a0a8:	6323      	str	r3, [r4, #48]	; 0x30
 800a0aa:	4b0d      	ldr	r3, [pc, #52]	; (800a0e0 <std+0x68>)
 800a0ac:	6224      	str	r4, [r4, #32]
 800a0ae:	429c      	cmp	r4, r3
 800a0b0:	d006      	beq.n	800a0c0 <std+0x48>
 800a0b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a0b6:	4294      	cmp	r4, r2
 800a0b8:	d002      	beq.n	800a0c0 <std+0x48>
 800a0ba:	33d0      	adds	r3, #208	; 0xd0
 800a0bc:	429c      	cmp	r4, r3
 800a0be:	d105      	bne.n	800a0cc <std+0x54>
 800a0c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0c8:	f000 ba96 	b.w	800a5f8 <__retarget_lock_init_recursive>
 800a0cc:	bd10      	pop	{r4, pc}
 800a0ce:	bf00      	nop
 800a0d0:	0800a34d 	.word	0x0800a34d
 800a0d4:	0800a373 	.word	0x0800a373
 800a0d8:	0800a3ab 	.word	0x0800a3ab
 800a0dc:	0800a3cf 	.word	0x0800a3cf
 800a0e0:	20001518 	.word	0x20001518

0800a0e4 <stdio_exit_handler>:
 800a0e4:	4a02      	ldr	r2, [pc, #8]	; (800a0f0 <stdio_exit_handler+0xc>)
 800a0e6:	4903      	ldr	r1, [pc, #12]	; (800a0f4 <stdio_exit_handler+0x10>)
 800a0e8:	4803      	ldr	r0, [pc, #12]	; (800a0f8 <stdio_exit_handler+0x14>)
 800a0ea:	f000 b869 	b.w	800a1c0 <_fwalk_sglue>
 800a0ee:	bf00      	nop
 800a0f0:	20000040 	.word	0x20000040
 800a0f4:	0800c609 	.word	0x0800c609
 800a0f8:	2000004c 	.word	0x2000004c

0800a0fc <cleanup_stdio>:
 800a0fc:	6841      	ldr	r1, [r0, #4]
 800a0fe:	4b0c      	ldr	r3, [pc, #48]	; (800a130 <cleanup_stdio+0x34>)
 800a100:	4299      	cmp	r1, r3
 800a102:	b510      	push	{r4, lr}
 800a104:	4604      	mov	r4, r0
 800a106:	d001      	beq.n	800a10c <cleanup_stdio+0x10>
 800a108:	f002 fa7e 	bl	800c608 <_fflush_r>
 800a10c:	68a1      	ldr	r1, [r4, #8]
 800a10e:	4b09      	ldr	r3, [pc, #36]	; (800a134 <cleanup_stdio+0x38>)
 800a110:	4299      	cmp	r1, r3
 800a112:	d002      	beq.n	800a11a <cleanup_stdio+0x1e>
 800a114:	4620      	mov	r0, r4
 800a116:	f002 fa77 	bl	800c608 <_fflush_r>
 800a11a:	68e1      	ldr	r1, [r4, #12]
 800a11c:	4b06      	ldr	r3, [pc, #24]	; (800a138 <cleanup_stdio+0x3c>)
 800a11e:	4299      	cmp	r1, r3
 800a120:	d004      	beq.n	800a12c <cleanup_stdio+0x30>
 800a122:	4620      	mov	r0, r4
 800a124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a128:	f002 ba6e 	b.w	800c608 <_fflush_r>
 800a12c:	bd10      	pop	{r4, pc}
 800a12e:	bf00      	nop
 800a130:	20001518 	.word	0x20001518
 800a134:	20001580 	.word	0x20001580
 800a138:	200015e8 	.word	0x200015e8

0800a13c <global_stdio_init.part.0>:
 800a13c:	b510      	push	{r4, lr}
 800a13e:	4b0b      	ldr	r3, [pc, #44]	; (800a16c <global_stdio_init.part.0+0x30>)
 800a140:	4c0b      	ldr	r4, [pc, #44]	; (800a170 <global_stdio_init.part.0+0x34>)
 800a142:	4a0c      	ldr	r2, [pc, #48]	; (800a174 <global_stdio_init.part.0+0x38>)
 800a144:	601a      	str	r2, [r3, #0]
 800a146:	4620      	mov	r0, r4
 800a148:	2200      	movs	r2, #0
 800a14a:	2104      	movs	r1, #4
 800a14c:	f7ff ff94 	bl	800a078 <std>
 800a150:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a154:	2201      	movs	r2, #1
 800a156:	2109      	movs	r1, #9
 800a158:	f7ff ff8e 	bl	800a078 <std>
 800a15c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a160:	2202      	movs	r2, #2
 800a162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a166:	2112      	movs	r1, #18
 800a168:	f7ff bf86 	b.w	800a078 <std>
 800a16c:	20001650 	.word	0x20001650
 800a170:	20001518 	.word	0x20001518
 800a174:	0800a0e5 	.word	0x0800a0e5

0800a178 <__sfp_lock_acquire>:
 800a178:	4801      	ldr	r0, [pc, #4]	; (800a180 <__sfp_lock_acquire+0x8>)
 800a17a:	f000 ba3e 	b.w	800a5fa <__retarget_lock_acquire_recursive>
 800a17e:	bf00      	nop
 800a180:	20001659 	.word	0x20001659

0800a184 <__sfp_lock_release>:
 800a184:	4801      	ldr	r0, [pc, #4]	; (800a18c <__sfp_lock_release+0x8>)
 800a186:	f000 ba39 	b.w	800a5fc <__retarget_lock_release_recursive>
 800a18a:	bf00      	nop
 800a18c:	20001659 	.word	0x20001659

0800a190 <__sinit>:
 800a190:	b510      	push	{r4, lr}
 800a192:	4604      	mov	r4, r0
 800a194:	f7ff fff0 	bl	800a178 <__sfp_lock_acquire>
 800a198:	6a23      	ldr	r3, [r4, #32]
 800a19a:	b11b      	cbz	r3, 800a1a4 <__sinit+0x14>
 800a19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1a0:	f7ff bff0 	b.w	800a184 <__sfp_lock_release>
 800a1a4:	4b04      	ldr	r3, [pc, #16]	; (800a1b8 <__sinit+0x28>)
 800a1a6:	6223      	str	r3, [r4, #32]
 800a1a8:	4b04      	ldr	r3, [pc, #16]	; (800a1bc <__sinit+0x2c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1f5      	bne.n	800a19c <__sinit+0xc>
 800a1b0:	f7ff ffc4 	bl	800a13c <global_stdio_init.part.0>
 800a1b4:	e7f2      	b.n	800a19c <__sinit+0xc>
 800a1b6:	bf00      	nop
 800a1b8:	0800a0fd 	.word	0x0800a0fd
 800a1bc:	20001650 	.word	0x20001650

0800a1c0 <_fwalk_sglue>:
 800a1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1c4:	4607      	mov	r7, r0
 800a1c6:	4688      	mov	r8, r1
 800a1c8:	4614      	mov	r4, r2
 800a1ca:	2600      	movs	r6, #0
 800a1cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1d0:	f1b9 0901 	subs.w	r9, r9, #1
 800a1d4:	d505      	bpl.n	800a1e2 <_fwalk_sglue+0x22>
 800a1d6:	6824      	ldr	r4, [r4, #0]
 800a1d8:	2c00      	cmp	r4, #0
 800a1da:	d1f7      	bne.n	800a1cc <_fwalk_sglue+0xc>
 800a1dc:	4630      	mov	r0, r6
 800a1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1e2:	89ab      	ldrh	r3, [r5, #12]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d907      	bls.n	800a1f8 <_fwalk_sglue+0x38>
 800a1e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	d003      	beq.n	800a1f8 <_fwalk_sglue+0x38>
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	47c0      	blx	r8
 800a1f6:	4306      	orrs	r6, r0
 800a1f8:	3568      	adds	r5, #104	; 0x68
 800a1fa:	e7e9      	b.n	800a1d0 <_fwalk_sglue+0x10>

0800a1fc <_puts_r>:
 800a1fc:	6a03      	ldr	r3, [r0, #32]
 800a1fe:	b570      	push	{r4, r5, r6, lr}
 800a200:	6884      	ldr	r4, [r0, #8]
 800a202:	4605      	mov	r5, r0
 800a204:	460e      	mov	r6, r1
 800a206:	b90b      	cbnz	r3, 800a20c <_puts_r+0x10>
 800a208:	f7ff ffc2 	bl	800a190 <__sinit>
 800a20c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a20e:	07db      	lsls	r3, r3, #31
 800a210:	d405      	bmi.n	800a21e <_puts_r+0x22>
 800a212:	89a3      	ldrh	r3, [r4, #12]
 800a214:	0598      	lsls	r0, r3, #22
 800a216:	d402      	bmi.n	800a21e <_puts_r+0x22>
 800a218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a21a:	f000 f9ee 	bl	800a5fa <__retarget_lock_acquire_recursive>
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	0719      	lsls	r1, r3, #28
 800a222:	d513      	bpl.n	800a24c <_puts_r+0x50>
 800a224:	6923      	ldr	r3, [r4, #16]
 800a226:	b18b      	cbz	r3, 800a24c <_puts_r+0x50>
 800a228:	3e01      	subs	r6, #1
 800a22a:	68a3      	ldr	r3, [r4, #8]
 800a22c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a230:	3b01      	subs	r3, #1
 800a232:	60a3      	str	r3, [r4, #8]
 800a234:	b9e9      	cbnz	r1, 800a272 <_puts_r+0x76>
 800a236:	2b00      	cmp	r3, #0
 800a238:	da2e      	bge.n	800a298 <_puts_r+0x9c>
 800a23a:	4622      	mov	r2, r4
 800a23c:	210a      	movs	r1, #10
 800a23e:	4628      	mov	r0, r5
 800a240:	f000 f8c9 	bl	800a3d6 <__swbuf_r>
 800a244:	3001      	adds	r0, #1
 800a246:	d007      	beq.n	800a258 <_puts_r+0x5c>
 800a248:	250a      	movs	r5, #10
 800a24a:	e007      	b.n	800a25c <_puts_r+0x60>
 800a24c:	4621      	mov	r1, r4
 800a24e:	4628      	mov	r0, r5
 800a250:	f000 f8fe 	bl	800a450 <__swsetup_r>
 800a254:	2800      	cmp	r0, #0
 800a256:	d0e7      	beq.n	800a228 <_puts_r+0x2c>
 800a258:	f04f 35ff 	mov.w	r5, #4294967295
 800a25c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a25e:	07da      	lsls	r2, r3, #31
 800a260:	d405      	bmi.n	800a26e <_puts_r+0x72>
 800a262:	89a3      	ldrh	r3, [r4, #12]
 800a264:	059b      	lsls	r3, r3, #22
 800a266:	d402      	bmi.n	800a26e <_puts_r+0x72>
 800a268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a26a:	f000 f9c7 	bl	800a5fc <__retarget_lock_release_recursive>
 800a26e:	4628      	mov	r0, r5
 800a270:	bd70      	pop	{r4, r5, r6, pc}
 800a272:	2b00      	cmp	r3, #0
 800a274:	da04      	bge.n	800a280 <_puts_r+0x84>
 800a276:	69a2      	ldr	r2, [r4, #24]
 800a278:	429a      	cmp	r2, r3
 800a27a:	dc06      	bgt.n	800a28a <_puts_r+0x8e>
 800a27c:	290a      	cmp	r1, #10
 800a27e:	d004      	beq.n	800a28a <_puts_r+0x8e>
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	1c5a      	adds	r2, r3, #1
 800a284:	6022      	str	r2, [r4, #0]
 800a286:	7019      	strb	r1, [r3, #0]
 800a288:	e7cf      	b.n	800a22a <_puts_r+0x2e>
 800a28a:	4622      	mov	r2, r4
 800a28c:	4628      	mov	r0, r5
 800a28e:	f000 f8a2 	bl	800a3d6 <__swbuf_r>
 800a292:	3001      	adds	r0, #1
 800a294:	d1c9      	bne.n	800a22a <_puts_r+0x2e>
 800a296:	e7df      	b.n	800a258 <_puts_r+0x5c>
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	250a      	movs	r5, #10
 800a29c:	1c5a      	adds	r2, r3, #1
 800a29e:	6022      	str	r2, [r4, #0]
 800a2a0:	701d      	strb	r5, [r3, #0]
 800a2a2:	e7db      	b.n	800a25c <_puts_r+0x60>

0800a2a4 <puts>:
 800a2a4:	4b02      	ldr	r3, [pc, #8]	; (800a2b0 <puts+0xc>)
 800a2a6:	4601      	mov	r1, r0
 800a2a8:	6818      	ldr	r0, [r3, #0]
 800a2aa:	f7ff bfa7 	b.w	800a1fc <_puts_r>
 800a2ae:	bf00      	nop
 800a2b0:	20000098 	.word	0x20000098

0800a2b4 <siprintf>:
 800a2b4:	b40e      	push	{r1, r2, r3}
 800a2b6:	b500      	push	{lr}
 800a2b8:	b09c      	sub	sp, #112	; 0x70
 800a2ba:	ab1d      	add	r3, sp, #116	; 0x74
 800a2bc:	9002      	str	r0, [sp, #8]
 800a2be:	9006      	str	r0, [sp, #24]
 800a2c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2c4:	4809      	ldr	r0, [pc, #36]	; (800a2ec <siprintf+0x38>)
 800a2c6:	9107      	str	r1, [sp, #28]
 800a2c8:	9104      	str	r1, [sp, #16]
 800a2ca:	4909      	ldr	r1, [pc, #36]	; (800a2f0 <siprintf+0x3c>)
 800a2cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2d0:	9105      	str	r1, [sp, #20]
 800a2d2:	6800      	ldr	r0, [r0, #0]
 800a2d4:	9301      	str	r3, [sp, #4]
 800a2d6:	a902      	add	r1, sp, #8
 800a2d8:	f001 fcf2 	bl	800bcc0 <_svfiprintf_r>
 800a2dc:	9b02      	ldr	r3, [sp, #8]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	701a      	strb	r2, [r3, #0]
 800a2e2:	b01c      	add	sp, #112	; 0x70
 800a2e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2e8:	b003      	add	sp, #12
 800a2ea:	4770      	bx	lr
 800a2ec:	20000098 	.word	0x20000098
 800a2f0:	ffff0208 	.word	0xffff0208

0800a2f4 <siscanf>:
 800a2f4:	b40e      	push	{r1, r2, r3}
 800a2f6:	b510      	push	{r4, lr}
 800a2f8:	b09f      	sub	sp, #124	; 0x7c
 800a2fa:	ac21      	add	r4, sp, #132	; 0x84
 800a2fc:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a300:	f854 2b04 	ldr.w	r2, [r4], #4
 800a304:	9201      	str	r2, [sp, #4]
 800a306:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a30a:	9004      	str	r0, [sp, #16]
 800a30c:	9008      	str	r0, [sp, #32]
 800a30e:	f7f5 ffaf 	bl	8000270 <strlen>
 800a312:	4b0c      	ldr	r3, [pc, #48]	; (800a344 <siscanf+0x50>)
 800a314:	9005      	str	r0, [sp, #20]
 800a316:	9009      	str	r0, [sp, #36]	; 0x24
 800a318:	930d      	str	r3, [sp, #52]	; 0x34
 800a31a:	480b      	ldr	r0, [pc, #44]	; (800a348 <siscanf+0x54>)
 800a31c:	9a01      	ldr	r2, [sp, #4]
 800a31e:	6800      	ldr	r0, [r0, #0]
 800a320:	9403      	str	r4, [sp, #12]
 800a322:	2300      	movs	r3, #0
 800a324:	9311      	str	r3, [sp, #68]	; 0x44
 800a326:	9316      	str	r3, [sp, #88]	; 0x58
 800a328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a32c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a330:	a904      	add	r1, sp, #16
 800a332:	4623      	mov	r3, r4
 800a334:	f001 fe1c 	bl	800bf70 <__ssvfiscanf_r>
 800a338:	b01f      	add	sp, #124	; 0x7c
 800a33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a33e:	b003      	add	sp, #12
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	0800a36f 	.word	0x0800a36f
 800a348:	20000098 	.word	0x20000098

0800a34c <__sread>:
 800a34c:	b510      	push	{r4, lr}
 800a34e:	460c      	mov	r4, r1
 800a350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a354:	f000 f902 	bl	800a55c <_read_r>
 800a358:	2800      	cmp	r0, #0
 800a35a:	bfab      	itete	ge
 800a35c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a35e:	89a3      	ldrhlt	r3, [r4, #12]
 800a360:	181b      	addge	r3, r3, r0
 800a362:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a366:	bfac      	ite	ge
 800a368:	6563      	strge	r3, [r4, #84]	; 0x54
 800a36a:	81a3      	strhlt	r3, [r4, #12]
 800a36c:	bd10      	pop	{r4, pc}

0800a36e <__seofread>:
 800a36e:	2000      	movs	r0, #0
 800a370:	4770      	bx	lr

0800a372 <__swrite>:
 800a372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a376:	461f      	mov	r7, r3
 800a378:	898b      	ldrh	r3, [r1, #12]
 800a37a:	05db      	lsls	r3, r3, #23
 800a37c:	4605      	mov	r5, r0
 800a37e:	460c      	mov	r4, r1
 800a380:	4616      	mov	r6, r2
 800a382:	d505      	bpl.n	800a390 <__swrite+0x1e>
 800a384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a388:	2302      	movs	r3, #2
 800a38a:	2200      	movs	r2, #0
 800a38c:	f000 f8d4 	bl	800a538 <_lseek_r>
 800a390:	89a3      	ldrh	r3, [r4, #12]
 800a392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a39a:	81a3      	strh	r3, [r4, #12]
 800a39c:	4632      	mov	r2, r6
 800a39e:	463b      	mov	r3, r7
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a6:	f000 b8eb 	b.w	800a580 <_write_r>

0800a3aa <__sseek>:
 800a3aa:	b510      	push	{r4, lr}
 800a3ac:	460c      	mov	r4, r1
 800a3ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b2:	f000 f8c1 	bl	800a538 <_lseek_r>
 800a3b6:	1c43      	adds	r3, r0, #1
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	bf15      	itete	ne
 800a3bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3c6:	81a3      	strheq	r3, [r4, #12]
 800a3c8:	bf18      	it	ne
 800a3ca:	81a3      	strhne	r3, [r4, #12]
 800a3cc:	bd10      	pop	{r4, pc}

0800a3ce <__sclose>:
 800a3ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3d2:	f000 b8a1 	b.w	800a518 <_close_r>

0800a3d6 <__swbuf_r>:
 800a3d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d8:	460e      	mov	r6, r1
 800a3da:	4614      	mov	r4, r2
 800a3dc:	4605      	mov	r5, r0
 800a3de:	b118      	cbz	r0, 800a3e8 <__swbuf_r+0x12>
 800a3e0:	6a03      	ldr	r3, [r0, #32]
 800a3e2:	b90b      	cbnz	r3, 800a3e8 <__swbuf_r+0x12>
 800a3e4:	f7ff fed4 	bl	800a190 <__sinit>
 800a3e8:	69a3      	ldr	r3, [r4, #24]
 800a3ea:	60a3      	str	r3, [r4, #8]
 800a3ec:	89a3      	ldrh	r3, [r4, #12]
 800a3ee:	071a      	lsls	r2, r3, #28
 800a3f0:	d525      	bpl.n	800a43e <__swbuf_r+0x68>
 800a3f2:	6923      	ldr	r3, [r4, #16]
 800a3f4:	b31b      	cbz	r3, 800a43e <__swbuf_r+0x68>
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	6922      	ldr	r2, [r4, #16]
 800a3fa:	1a98      	subs	r0, r3, r2
 800a3fc:	6963      	ldr	r3, [r4, #20]
 800a3fe:	b2f6      	uxtb	r6, r6
 800a400:	4283      	cmp	r3, r0
 800a402:	4637      	mov	r7, r6
 800a404:	dc04      	bgt.n	800a410 <__swbuf_r+0x3a>
 800a406:	4621      	mov	r1, r4
 800a408:	4628      	mov	r0, r5
 800a40a:	f002 f8fd 	bl	800c608 <_fflush_r>
 800a40e:	b9e0      	cbnz	r0, 800a44a <__swbuf_r+0x74>
 800a410:	68a3      	ldr	r3, [r4, #8]
 800a412:	3b01      	subs	r3, #1
 800a414:	60a3      	str	r3, [r4, #8]
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	1c5a      	adds	r2, r3, #1
 800a41a:	6022      	str	r2, [r4, #0]
 800a41c:	701e      	strb	r6, [r3, #0]
 800a41e:	6962      	ldr	r2, [r4, #20]
 800a420:	1c43      	adds	r3, r0, #1
 800a422:	429a      	cmp	r2, r3
 800a424:	d004      	beq.n	800a430 <__swbuf_r+0x5a>
 800a426:	89a3      	ldrh	r3, [r4, #12]
 800a428:	07db      	lsls	r3, r3, #31
 800a42a:	d506      	bpl.n	800a43a <__swbuf_r+0x64>
 800a42c:	2e0a      	cmp	r6, #10
 800a42e:	d104      	bne.n	800a43a <__swbuf_r+0x64>
 800a430:	4621      	mov	r1, r4
 800a432:	4628      	mov	r0, r5
 800a434:	f002 f8e8 	bl	800c608 <_fflush_r>
 800a438:	b938      	cbnz	r0, 800a44a <__swbuf_r+0x74>
 800a43a:	4638      	mov	r0, r7
 800a43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a43e:	4621      	mov	r1, r4
 800a440:	4628      	mov	r0, r5
 800a442:	f000 f805 	bl	800a450 <__swsetup_r>
 800a446:	2800      	cmp	r0, #0
 800a448:	d0d5      	beq.n	800a3f6 <__swbuf_r+0x20>
 800a44a:	f04f 37ff 	mov.w	r7, #4294967295
 800a44e:	e7f4      	b.n	800a43a <__swbuf_r+0x64>

0800a450 <__swsetup_r>:
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	4b2a      	ldr	r3, [pc, #168]	; (800a4fc <__swsetup_r+0xac>)
 800a454:	4605      	mov	r5, r0
 800a456:	6818      	ldr	r0, [r3, #0]
 800a458:	460c      	mov	r4, r1
 800a45a:	b118      	cbz	r0, 800a464 <__swsetup_r+0x14>
 800a45c:	6a03      	ldr	r3, [r0, #32]
 800a45e:	b90b      	cbnz	r3, 800a464 <__swsetup_r+0x14>
 800a460:	f7ff fe96 	bl	800a190 <__sinit>
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a46a:	0718      	lsls	r0, r3, #28
 800a46c:	d422      	bmi.n	800a4b4 <__swsetup_r+0x64>
 800a46e:	06d9      	lsls	r1, r3, #27
 800a470:	d407      	bmi.n	800a482 <__swsetup_r+0x32>
 800a472:	2309      	movs	r3, #9
 800a474:	602b      	str	r3, [r5, #0]
 800a476:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a47a:	81a3      	strh	r3, [r4, #12]
 800a47c:	f04f 30ff 	mov.w	r0, #4294967295
 800a480:	e034      	b.n	800a4ec <__swsetup_r+0x9c>
 800a482:	0758      	lsls	r0, r3, #29
 800a484:	d512      	bpl.n	800a4ac <__swsetup_r+0x5c>
 800a486:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a488:	b141      	cbz	r1, 800a49c <__swsetup_r+0x4c>
 800a48a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a48e:	4299      	cmp	r1, r3
 800a490:	d002      	beq.n	800a498 <__swsetup_r+0x48>
 800a492:	4628      	mov	r0, r5
 800a494:	f000 ff3e 	bl	800b314 <_free_r>
 800a498:	2300      	movs	r3, #0
 800a49a:	6363      	str	r3, [r4, #52]	; 0x34
 800a49c:	89a3      	ldrh	r3, [r4, #12]
 800a49e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4a2:	81a3      	strh	r3, [r4, #12]
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	6063      	str	r3, [r4, #4]
 800a4a8:	6923      	ldr	r3, [r4, #16]
 800a4aa:	6023      	str	r3, [r4, #0]
 800a4ac:	89a3      	ldrh	r3, [r4, #12]
 800a4ae:	f043 0308 	orr.w	r3, r3, #8
 800a4b2:	81a3      	strh	r3, [r4, #12]
 800a4b4:	6923      	ldr	r3, [r4, #16]
 800a4b6:	b94b      	cbnz	r3, 800a4cc <__swsetup_r+0x7c>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4c2:	d003      	beq.n	800a4cc <__swsetup_r+0x7c>
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	f002 f8ec 	bl	800c6a4 <__smakebuf_r>
 800a4cc:	89a0      	ldrh	r0, [r4, #12]
 800a4ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4d2:	f010 0301 	ands.w	r3, r0, #1
 800a4d6:	d00a      	beq.n	800a4ee <__swsetup_r+0x9e>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	60a3      	str	r3, [r4, #8]
 800a4dc:	6963      	ldr	r3, [r4, #20]
 800a4de:	425b      	negs	r3, r3
 800a4e0:	61a3      	str	r3, [r4, #24]
 800a4e2:	6923      	ldr	r3, [r4, #16]
 800a4e4:	b943      	cbnz	r3, 800a4f8 <__swsetup_r+0xa8>
 800a4e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4ea:	d1c4      	bne.n	800a476 <__swsetup_r+0x26>
 800a4ec:	bd38      	pop	{r3, r4, r5, pc}
 800a4ee:	0781      	lsls	r1, r0, #30
 800a4f0:	bf58      	it	pl
 800a4f2:	6963      	ldrpl	r3, [r4, #20]
 800a4f4:	60a3      	str	r3, [r4, #8]
 800a4f6:	e7f4      	b.n	800a4e2 <__swsetup_r+0x92>
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	e7f7      	b.n	800a4ec <__swsetup_r+0x9c>
 800a4fc:	20000098 	.word	0x20000098

0800a500 <memset>:
 800a500:	4402      	add	r2, r0
 800a502:	4603      	mov	r3, r0
 800a504:	4293      	cmp	r3, r2
 800a506:	d100      	bne.n	800a50a <memset+0xa>
 800a508:	4770      	bx	lr
 800a50a:	f803 1b01 	strb.w	r1, [r3], #1
 800a50e:	e7f9      	b.n	800a504 <memset+0x4>

0800a510 <_localeconv_r>:
 800a510:	4800      	ldr	r0, [pc, #0]	; (800a514 <_localeconv_r+0x4>)
 800a512:	4770      	bx	lr
 800a514:	2000018c 	.word	0x2000018c

0800a518 <_close_r>:
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	4d06      	ldr	r5, [pc, #24]	; (800a534 <_close_r+0x1c>)
 800a51c:	2300      	movs	r3, #0
 800a51e:	4604      	mov	r4, r0
 800a520:	4608      	mov	r0, r1
 800a522:	602b      	str	r3, [r5, #0]
 800a524:	f7f8 fb99 	bl	8002c5a <_close>
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	d102      	bne.n	800a532 <_close_r+0x1a>
 800a52c:	682b      	ldr	r3, [r5, #0]
 800a52e:	b103      	cbz	r3, 800a532 <_close_r+0x1a>
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	bd38      	pop	{r3, r4, r5, pc}
 800a534:	20001654 	.word	0x20001654

0800a538 <_lseek_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4d07      	ldr	r5, [pc, #28]	; (800a558 <_lseek_r+0x20>)
 800a53c:	4604      	mov	r4, r0
 800a53e:	4608      	mov	r0, r1
 800a540:	4611      	mov	r1, r2
 800a542:	2200      	movs	r2, #0
 800a544:	602a      	str	r2, [r5, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	f7f8 fbae 	bl	8002ca8 <_lseek>
 800a54c:	1c43      	adds	r3, r0, #1
 800a54e:	d102      	bne.n	800a556 <_lseek_r+0x1e>
 800a550:	682b      	ldr	r3, [r5, #0]
 800a552:	b103      	cbz	r3, 800a556 <_lseek_r+0x1e>
 800a554:	6023      	str	r3, [r4, #0]
 800a556:	bd38      	pop	{r3, r4, r5, pc}
 800a558:	20001654 	.word	0x20001654

0800a55c <_read_r>:
 800a55c:	b538      	push	{r3, r4, r5, lr}
 800a55e:	4d07      	ldr	r5, [pc, #28]	; (800a57c <_read_r+0x20>)
 800a560:	4604      	mov	r4, r0
 800a562:	4608      	mov	r0, r1
 800a564:	4611      	mov	r1, r2
 800a566:	2200      	movs	r2, #0
 800a568:	602a      	str	r2, [r5, #0]
 800a56a:	461a      	mov	r2, r3
 800a56c:	f7f8 fb3c 	bl	8002be8 <_read>
 800a570:	1c43      	adds	r3, r0, #1
 800a572:	d102      	bne.n	800a57a <_read_r+0x1e>
 800a574:	682b      	ldr	r3, [r5, #0]
 800a576:	b103      	cbz	r3, 800a57a <_read_r+0x1e>
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	bd38      	pop	{r3, r4, r5, pc}
 800a57c:	20001654 	.word	0x20001654

0800a580 <_write_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	4d07      	ldr	r5, [pc, #28]	; (800a5a0 <_write_r+0x20>)
 800a584:	4604      	mov	r4, r0
 800a586:	4608      	mov	r0, r1
 800a588:	4611      	mov	r1, r2
 800a58a:	2200      	movs	r2, #0
 800a58c:	602a      	str	r2, [r5, #0]
 800a58e:	461a      	mov	r2, r3
 800a590:	f7f8 fb47 	bl	8002c22 <_write>
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	d102      	bne.n	800a59e <_write_r+0x1e>
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	b103      	cbz	r3, 800a59e <_write_r+0x1e>
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	bd38      	pop	{r3, r4, r5, pc}
 800a5a0:	20001654 	.word	0x20001654

0800a5a4 <__errno>:
 800a5a4:	4b01      	ldr	r3, [pc, #4]	; (800a5ac <__errno+0x8>)
 800a5a6:	6818      	ldr	r0, [r3, #0]
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	20000098 	.word	0x20000098

0800a5b0 <__libc_init_array>:
 800a5b0:	b570      	push	{r4, r5, r6, lr}
 800a5b2:	4d0d      	ldr	r5, [pc, #52]	; (800a5e8 <__libc_init_array+0x38>)
 800a5b4:	4c0d      	ldr	r4, [pc, #52]	; (800a5ec <__libc_init_array+0x3c>)
 800a5b6:	1b64      	subs	r4, r4, r5
 800a5b8:	10a4      	asrs	r4, r4, #2
 800a5ba:	2600      	movs	r6, #0
 800a5bc:	42a6      	cmp	r6, r4
 800a5be:	d109      	bne.n	800a5d4 <__libc_init_array+0x24>
 800a5c0:	4d0b      	ldr	r5, [pc, #44]	; (800a5f0 <__libc_init_array+0x40>)
 800a5c2:	4c0c      	ldr	r4, [pc, #48]	; (800a5f4 <__libc_init_array+0x44>)
 800a5c4:	f002 fc8e 	bl	800cee4 <_init>
 800a5c8:	1b64      	subs	r4, r4, r5
 800a5ca:	10a4      	asrs	r4, r4, #2
 800a5cc:	2600      	movs	r6, #0
 800a5ce:	42a6      	cmp	r6, r4
 800a5d0:	d105      	bne.n	800a5de <__libc_init_array+0x2e>
 800a5d2:	bd70      	pop	{r4, r5, r6, pc}
 800a5d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5d8:	4798      	blx	r3
 800a5da:	3601      	adds	r6, #1
 800a5dc:	e7ee      	b.n	800a5bc <__libc_init_array+0xc>
 800a5de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e2:	4798      	blx	r3
 800a5e4:	3601      	adds	r6, #1
 800a5e6:	e7f2      	b.n	800a5ce <__libc_init_array+0x1e>
 800a5e8:	0800d390 	.word	0x0800d390
 800a5ec:	0800d390 	.word	0x0800d390
 800a5f0:	0800d390 	.word	0x0800d390
 800a5f4:	0800d394 	.word	0x0800d394

0800a5f8 <__retarget_lock_init_recursive>:
 800a5f8:	4770      	bx	lr

0800a5fa <__retarget_lock_acquire_recursive>:
 800a5fa:	4770      	bx	lr

0800a5fc <__retarget_lock_release_recursive>:
 800a5fc:	4770      	bx	lr

0800a5fe <memcpy>:
 800a5fe:	440a      	add	r2, r1
 800a600:	4291      	cmp	r1, r2
 800a602:	f100 33ff 	add.w	r3, r0, #4294967295
 800a606:	d100      	bne.n	800a60a <memcpy+0xc>
 800a608:	4770      	bx	lr
 800a60a:	b510      	push	{r4, lr}
 800a60c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a610:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a614:	4291      	cmp	r1, r2
 800a616:	d1f9      	bne.n	800a60c <memcpy+0xe>
 800a618:	bd10      	pop	{r4, pc}

0800a61a <quorem>:
 800a61a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a61e:	6903      	ldr	r3, [r0, #16]
 800a620:	690c      	ldr	r4, [r1, #16]
 800a622:	42a3      	cmp	r3, r4
 800a624:	4607      	mov	r7, r0
 800a626:	db7e      	blt.n	800a726 <quorem+0x10c>
 800a628:	3c01      	subs	r4, #1
 800a62a:	f101 0814 	add.w	r8, r1, #20
 800a62e:	f100 0514 	add.w	r5, r0, #20
 800a632:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a63c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a640:	3301      	adds	r3, #1
 800a642:	429a      	cmp	r2, r3
 800a644:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a648:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a64c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a650:	d331      	bcc.n	800a6b6 <quorem+0x9c>
 800a652:	f04f 0e00 	mov.w	lr, #0
 800a656:	4640      	mov	r0, r8
 800a658:	46ac      	mov	ip, r5
 800a65a:	46f2      	mov	sl, lr
 800a65c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a660:	b293      	uxth	r3, r2
 800a662:	fb06 e303 	mla	r3, r6, r3, lr
 800a666:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a66a:	0c1a      	lsrs	r2, r3, #16
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	ebaa 0303 	sub.w	r3, sl, r3
 800a672:	f8dc a000 	ldr.w	sl, [ip]
 800a676:	fa13 f38a 	uxtah	r3, r3, sl
 800a67a:	fb06 220e 	mla	r2, r6, lr, r2
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	9b00      	ldr	r3, [sp, #0]
 800a682:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a686:	b292      	uxth	r2, r2
 800a688:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a68c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a690:	f8bd 3000 	ldrh.w	r3, [sp]
 800a694:	4581      	cmp	r9, r0
 800a696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a69a:	f84c 3b04 	str.w	r3, [ip], #4
 800a69e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a6a2:	d2db      	bcs.n	800a65c <quorem+0x42>
 800a6a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a6a8:	b92b      	cbnz	r3, 800a6b6 <quorem+0x9c>
 800a6aa:	9b01      	ldr	r3, [sp, #4]
 800a6ac:	3b04      	subs	r3, #4
 800a6ae:	429d      	cmp	r5, r3
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	d32c      	bcc.n	800a70e <quorem+0xf4>
 800a6b4:	613c      	str	r4, [r7, #16]
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	f001 f9a8 	bl	800ba0c <__mcmp>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	db22      	blt.n	800a706 <quorem+0xec>
 800a6c0:	3601      	adds	r6, #1
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6ca:	f8d1 c000 	ldr.w	ip, [r1]
 800a6ce:	b293      	uxth	r3, r2
 800a6d0:	1ac3      	subs	r3, r0, r3
 800a6d2:	0c12      	lsrs	r2, r2, #16
 800a6d4:	fa13 f38c 	uxtah	r3, r3, ip
 800a6d8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a6dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6e6:	45c1      	cmp	r9, r8
 800a6e8:	f841 3b04 	str.w	r3, [r1], #4
 800a6ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a6f0:	d2e9      	bcs.n	800a6c6 <quorem+0xac>
 800a6f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6fa:	b922      	cbnz	r2, 800a706 <quorem+0xec>
 800a6fc:	3b04      	subs	r3, #4
 800a6fe:	429d      	cmp	r5, r3
 800a700:	461a      	mov	r2, r3
 800a702:	d30a      	bcc.n	800a71a <quorem+0x100>
 800a704:	613c      	str	r4, [r7, #16]
 800a706:	4630      	mov	r0, r6
 800a708:	b003      	add	sp, #12
 800a70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70e:	6812      	ldr	r2, [r2, #0]
 800a710:	3b04      	subs	r3, #4
 800a712:	2a00      	cmp	r2, #0
 800a714:	d1ce      	bne.n	800a6b4 <quorem+0x9a>
 800a716:	3c01      	subs	r4, #1
 800a718:	e7c9      	b.n	800a6ae <quorem+0x94>
 800a71a:	6812      	ldr	r2, [r2, #0]
 800a71c:	3b04      	subs	r3, #4
 800a71e:	2a00      	cmp	r2, #0
 800a720:	d1f0      	bne.n	800a704 <quorem+0xea>
 800a722:	3c01      	subs	r4, #1
 800a724:	e7eb      	b.n	800a6fe <quorem+0xe4>
 800a726:	2000      	movs	r0, #0
 800a728:	e7ee      	b.n	800a708 <quorem+0xee>
 800a72a:	0000      	movs	r0, r0
 800a72c:	0000      	movs	r0, r0
	...

0800a730 <_dtoa_r>:
 800a730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a734:	ed2d 8b04 	vpush	{d8-d9}
 800a738:	69c5      	ldr	r5, [r0, #28]
 800a73a:	b093      	sub	sp, #76	; 0x4c
 800a73c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a740:	ec57 6b10 	vmov	r6, r7, d0
 800a744:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a748:	9107      	str	r1, [sp, #28]
 800a74a:	4604      	mov	r4, r0
 800a74c:	920a      	str	r2, [sp, #40]	; 0x28
 800a74e:	930d      	str	r3, [sp, #52]	; 0x34
 800a750:	b975      	cbnz	r5, 800a770 <_dtoa_r+0x40>
 800a752:	2010      	movs	r0, #16
 800a754:	f000 fe2a 	bl	800b3ac <malloc>
 800a758:	4602      	mov	r2, r0
 800a75a:	61e0      	str	r0, [r4, #28]
 800a75c:	b920      	cbnz	r0, 800a768 <_dtoa_r+0x38>
 800a75e:	4bae      	ldr	r3, [pc, #696]	; (800aa18 <_dtoa_r+0x2e8>)
 800a760:	21ef      	movs	r1, #239	; 0xef
 800a762:	48ae      	ldr	r0, [pc, #696]	; (800aa1c <_dtoa_r+0x2ec>)
 800a764:	f002 f89a 	bl	800c89c <__assert_func>
 800a768:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a76c:	6005      	str	r5, [r0, #0]
 800a76e:	60c5      	str	r5, [r0, #12]
 800a770:	69e3      	ldr	r3, [r4, #28]
 800a772:	6819      	ldr	r1, [r3, #0]
 800a774:	b151      	cbz	r1, 800a78c <_dtoa_r+0x5c>
 800a776:	685a      	ldr	r2, [r3, #4]
 800a778:	604a      	str	r2, [r1, #4]
 800a77a:	2301      	movs	r3, #1
 800a77c:	4093      	lsls	r3, r2
 800a77e:	608b      	str	r3, [r1, #8]
 800a780:	4620      	mov	r0, r4
 800a782:	f000 ff07 	bl	800b594 <_Bfree>
 800a786:	69e3      	ldr	r3, [r4, #28]
 800a788:	2200      	movs	r2, #0
 800a78a:	601a      	str	r2, [r3, #0]
 800a78c:	1e3b      	subs	r3, r7, #0
 800a78e:	bfbb      	ittet	lt
 800a790:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a794:	9303      	strlt	r3, [sp, #12]
 800a796:	2300      	movge	r3, #0
 800a798:	2201      	movlt	r2, #1
 800a79a:	bfac      	ite	ge
 800a79c:	f8c8 3000 	strge.w	r3, [r8]
 800a7a0:	f8c8 2000 	strlt.w	r2, [r8]
 800a7a4:	4b9e      	ldr	r3, [pc, #632]	; (800aa20 <_dtoa_r+0x2f0>)
 800a7a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a7aa:	ea33 0308 	bics.w	r3, r3, r8
 800a7ae:	d11b      	bne.n	800a7e8 <_dtoa_r+0xb8>
 800a7b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7b2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a7bc:	4333      	orrs	r3, r6
 800a7be:	f000 8593 	beq.w	800b2e8 <_dtoa_r+0xbb8>
 800a7c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7c4:	b963      	cbnz	r3, 800a7e0 <_dtoa_r+0xb0>
 800a7c6:	4b97      	ldr	r3, [pc, #604]	; (800aa24 <_dtoa_r+0x2f4>)
 800a7c8:	e027      	b.n	800a81a <_dtoa_r+0xea>
 800a7ca:	4b97      	ldr	r3, [pc, #604]	; (800aa28 <_dtoa_r+0x2f8>)
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	3308      	adds	r3, #8
 800a7d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7d2:	6013      	str	r3, [r2, #0]
 800a7d4:	9800      	ldr	r0, [sp, #0]
 800a7d6:	b013      	add	sp, #76	; 0x4c
 800a7d8:	ecbd 8b04 	vpop	{d8-d9}
 800a7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e0:	4b90      	ldr	r3, [pc, #576]	; (800aa24 <_dtoa_r+0x2f4>)
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	3303      	adds	r3, #3
 800a7e6:	e7f3      	b.n	800a7d0 <_dtoa_r+0xa0>
 800a7e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	ec51 0b17 	vmov	r0, r1, d7
 800a7f2:	eeb0 8a47 	vmov.f32	s16, s14
 800a7f6:	eef0 8a67 	vmov.f32	s17, s15
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	f7f6 f964 	bl	8000ac8 <__aeabi_dcmpeq>
 800a800:	4681      	mov	r9, r0
 800a802:	b160      	cbz	r0, 800a81e <_dtoa_r+0xee>
 800a804:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a806:	2301      	movs	r3, #1
 800a808:	6013      	str	r3, [r2, #0]
 800a80a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f000 8568 	beq.w	800b2e2 <_dtoa_r+0xbb2>
 800a812:	4b86      	ldr	r3, [pc, #536]	; (800aa2c <_dtoa_r+0x2fc>)
 800a814:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a816:	6013      	str	r3, [r2, #0]
 800a818:	3b01      	subs	r3, #1
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	e7da      	b.n	800a7d4 <_dtoa_r+0xa4>
 800a81e:	aa10      	add	r2, sp, #64	; 0x40
 800a820:	a911      	add	r1, sp, #68	; 0x44
 800a822:	4620      	mov	r0, r4
 800a824:	eeb0 0a48 	vmov.f32	s0, s16
 800a828:	eef0 0a68 	vmov.f32	s1, s17
 800a82c:	f001 f994 	bl	800bb58 <__d2b>
 800a830:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a834:	4682      	mov	sl, r0
 800a836:	2d00      	cmp	r5, #0
 800a838:	d07f      	beq.n	800a93a <_dtoa_r+0x20a>
 800a83a:	ee18 3a90 	vmov	r3, s17
 800a83e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a842:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a846:	ec51 0b18 	vmov	r0, r1, d8
 800a84a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a84e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a852:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a856:	4619      	mov	r1, r3
 800a858:	2200      	movs	r2, #0
 800a85a:	4b75      	ldr	r3, [pc, #468]	; (800aa30 <_dtoa_r+0x300>)
 800a85c:	f7f5 fd14 	bl	8000288 <__aeabi_dsub>
 800a860:	a367      	add	r3, pc, #412	; (adr r3, 800aa00 <_dtoa_r+0x2d0>)
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	f7f5 fec7 	bl	80005f8 <__aeabi_dmul>
 800a86a:	a367      	add	r3, pc, #412	; (adr r3, 800aa08 <_dtoa_r+0x2d8>)
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f7f5 fd0c 	bl	800028c <__adddf3>
 800a874:	4606      	mov	r6, r0
 800a876:	4628      	mov	r0, r5
 800a878:	460f      	mov	r7, r1
 800a87a:	f7f5 fe53 	bl	8000524 <__aeabi_i2d>
 800a87e:	a364      	add	r3, pc, #400	; (adr r3, 800aa10 <_dtoa_r+0x2e0>)
 800a880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a884:	f7f5 feb8 	bl	80005f8 <__aeabi_dmul>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	4630      	mov	r0, r6
 800a88e:	4639      	mov	r1, r7
 800a890:	f7f5 fcfc 	bl	800028c <__adddf3>
 800a894:	4606      	mov	r6, r0
 800a896:	460f      	mov	r7, r1
 800a898:	f7f6 f95e 	bl	8000b58 <__aeabi_d2iz>
 800a89c:	2200      	movs	r2, #0
 800a89e:	4683      	mov	fp, r0
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	4639      	mov	r1, r7
 800a8a6:	f7f6 f919 	bl	8000adc <__aeabi_dcmplt>
 800a8aa:	b148      	cbz	r0, 800a8c0 <_dtoa_r+0x190>
 800a8ac:	4658      	mov	r0, fp
 800a8ae:	f7f5 fe39 	bl	8000524 <__aeabi_i2d>
 800a8b2:	4632      	mov	r2, r6
 800a8b4:	463b      	mov	r3, r7
 800a8b6:	f7f6 f907 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8ba:	b908      	cbnz	r0, 800a8c0 <_dtoa_r+0x190>
 800a8bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8c0:	f1bb 0f16 	cmp.w	fp, #22
 800a8c4:	d857      	bhi.n	800a976 <_dtoa_r+0x246>
 800a8c6:	4b5b      	ldr	r3, [pc, #364]	; (800aa34 <_dtoa_r+0x304>)
 800a8c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	ec51 0b18 	vmov	r0, r1, d8
 800a8d4:	f7f6 f902 	bl	8000adc <__aeabi_dcmplt>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	d04e      	beq.n	800a97a <_dtoa_r+0x24a>
 800a8dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	930c      	str	r3, [sp, #48]	; 0x30
 800a8e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8e6:	1b5b      	subs	r3, r3, r5
 800a8e8:	1e5a      	subs	r2, r3, #1
 800a8ea:	bf45      	ittet	mi
 800a8ec:	f1c3 0301 	rsbmi	r3, r3, #1
 800a8f0:	9305      	strmi	r3, [sp, #20]
 800a8f2:	2300      	movpl	r3, #0
 800a8f4:	2300      	movmi	r3, #0
 800a8f6:	9206      	str	r2, [sp, #24]
 800a8f8:	bf54      	ite	pl
 800a8fa:	9305      	strpl	r3, [sp, #20]
 800a8fc:	9306      	strmi	r3, [sp, #24]
 800a8fe:	f1bb 0f00 	cmp.w	fp, #0
 800a902:	db3c      	blt.n	800a97e <_dtoa_r+0x24e>
 800a904:	9b06      	ldr	r3, [sp, #24]
 800a906:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a90a:	445b      	add	r3, fp
 800a90c:	9306      	str	r3, [sp, #24]
 800a90e:	2300      	movs	r3, #0
 800a910:	9308      	str	r3, [sp, #32]
 800a912:	9b07      	ldr	r3, [sp, #28]
 800a914:	2b09      	cmp	r3, #9
 800a916:	d868      	bhi.n	800a9ea <_dtoa_r+0x2ba>
 800a918:	2b05      	cmp	r3, #5
 800a91a:	bfc4      	itt	gt
 800a91c:	3b04      	subgt	r3, #4
 800a91e:	9307      	strgt	r3, [sp, #28]
 800a920:	9b07      	ldr	r3, [sp, #28]
 800a922:	f1a3 0302 	sub.w	r3, r3, #2
 800a926:	bfcc      	ite	gt
 800a928:	2500      	movgt	r5, #0
 800a92a:	2501      	movle	r5, #1
 800a92c:	2b03      	cmp	r3, #3
 800a92e:	f200 8085 	bhi.w	800aa3c <_dtoa_r+0x30c>
 800a932:	e8df f003 	tbb	[pc, r3]
 800a936:	3b2e      	.short	0x3b2e
 800a938:	5839      	.short	0x5839
 800a93a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a93e:	441d      	add	r5, r3
 800a940:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a944:	2b20      	cmp	r3, #32
 800a946:	bfc1      	itttt	gt
 800a948:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a94c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a950:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a954:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a958:	bfd6      	itet	le
 800a95a:	f1c3 0320 	rsble	r3, r3, #32
 800a95e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a962:	fa06 f003 	lslle.w	r0, r6, r3
 800a966:	f7f5 fdcd 	bl	8000504 <__aeabi_ui2d>
 800a96a:	2201      	movs	r2, #1
 800a96c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a970:	3d01      	subs	r5, #1
 800a972:	920e      	str	r2, [sp, #56]	; 0x38
 800a974:	e76f      	b.n	800a856 <_dtoa_r+0x126>
 800a976:	2301      	movs	r3, #1
 800a978:	e7b3      	b.n	800a8e2 <_dtoa_r+0x1b2>
 800a97a:	900c      	str	r0, [sp, #48]	; 0x30
 800a97c:	e7b2      	b.n	800a8e4 <_dtoa_r+0x1b4>
 800a97e:	9b05      	ldr	r3, [sp, #20]
 800a980:	eba3 030b 	sub.w	r3, r3, fp
 800a984:	9305      	str	r3, [sp, #20]
 800a986:	f1cb 0300 	rsb	r3, fp, #0
 800a98a:	9308      	str	r3, [sp, #32]
 800a98c:	2300      	movs	r3, #0
 800a98e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a990:	e7bf      	b.n	800a912 <_dtoa_r+0x1e2>
 800a992:	2300      	movs	r3, #0
 800a994:	9309      	str	r3, [sp, #36]	; 0x24
 800a996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a998:	2b00      	cmp	r3, #0
 800a99a:	dc52      	bgt.n	800aa42 <_dtoa_r+0x312>
 800a99c:	2301      	movs	r3, #1
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	9304      	str	r3, [sp, #16]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	920a      	str	r2, [sp, #40]	; 0x28
 800a9a6:	e00b      	b.n	800a9c0 <_dtoa_r+0x290>
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e7f3      	b.n	800a994 <_dtoa_r+0x264>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9b2:	445b      	add	r3, fp
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	9304      	str	r3, [sp, #16]
 800a9bc:	bfb8      	it	lt
 800a9be:	2301      	movlt	r3, #1
 800a9c0:	69e0      	ldr	r0, [r4, #28]
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	2204      	movs	r2, #4
 800a9c6:	f102 0614 	add.w	r6, r2, #20
 800a9ca:	429e      	cmp	r6, r3
 800a9cc:	d93d      	bls.n	800aa4a <_dtoa_r+0x31a>
 800a9ce:	6041      	str	r1, [r0, #4]
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f000 fd9f 	bl	800b514 <_Balloc>
 800a9d6:	9000      	str	r0, [sp, #0]
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	d139      	bne.n	800aa50 <_dtoa_r+0x320>
 800a9dc:	4b16      	ldr	r3, [pc, #88]	; (800aa38 <_dtoa_r+0x308>)
 800a9de:	4602      	mov	r2, r0
 800a9e0:	f240 11af 	movw	r1, #431	; 0x1af
 800a9e4:	e6bd      	b.n	800a762 <_dtoa_r+0x32>
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e7e1      	b.n	800a9ae <_dtoa_r+0x27e>
 800a9ea:	2501      	movs	r5, #1
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9307      	str	r3, [sp, #28]
 800a9f0:	9509      	str	r5, [sp, #36]	; 0x24
 800a9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f6:	9301      	str	r3, [sp, #4]
 800a9f8:	9304      	str	r3, [sp, #16]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	2312      	movs	r3, #18
 800a9fe:	e7d1      	b.n	800a9a4 <_dtoa_r+0x274>
 800aa00:	636f4361 	.word	0x636f4361
 800aa04:	3fd287a7 	.word	0x3fd287a7
 800aa08:	8b60c8b3 	.word	0x8b60c8b3
 800aa0c:	3fc68a28 	.word	0x3fc68a28
 800aa10:	509f79fb 	.word	0x509f79fb
 800aa14:	3fd34413 	.word	0x3fd34413
 800aa18:	0800d03f 	.word	0x0800d03f
 800aa1c:	0800d056 	.word	0x0800d056
 800aa20:	7ff00000 	.word	0x7ff00000
 800aa24:	0800d03b 	.word	0x0800d03b
 800aa28:	0800d032 	.word	0x0800d032
 800aa2c:	0800d23c 	.word	0x0800d23c
 800aa30:	3ff80000 	.word	0x3ff80000
 800aa34:	0800d140 	.word	0x0800d140
 800aa38:	0800d0ae 	.word	0x0800d0ae
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa40:	e7d7      	b.n	800a9f2 <_dtoa_r+0x2c2>
 800aa42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa44:	9301      	str	r3, [sp, #4]
 800aa46:	9304      	str	r3, [sp, #16]
 800aa48:	e7ba      	b.n	800a9c0 <_dtoa_r+0x290>
 800aa4a:	3101      	adds	r1, #1
 800aa4c:	0052      	lsls	r2, r2, #1
 800aa4e:	e7ba      	b.n	800a9c6 <_dtoa_r+0x296>
 800aa50:	69e3      	ldr	r3, [r4, #28]
 800aa52:	9a00      	ldr	r2, [sp, #0]
 800aa54:	601a      	str	r2, [r3, #0]
 800aa56:	9b04      	ldr	r3, [sp, #16]
 800aa58:	2b0e      	cmp	r3, #14
 800aa5a:	f200 80a8 	bhi.w	800abae <_dtoa_r+0x47e>
 800aa5e:	2d00      	cmp	r5, #0
 800aa60:	f000 80a5 	beq.w	800abae <_dtoa_r+0x47e>
 800aa64:	f1bb 0f00 	cmp.w	fp, #0
 800aa68:	dd38      	ble.n	800aadc <_dtoa_r+0x3ac>
 800aa6a:	4bc0      	ldr	r3, [pc, #768]	; (800ad6c <_dtoa_r+0x63c>)
 800aa6c:	f00b 020f 	and.w	r2, fp, #15
 800aa70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aa78:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aa7c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800aa80:	d019      	beq.n	800aab6 <_dtoa_r+0x386>
 800aa82:	4bbb      	ldr	r3, [pc, #748]	; (800ad70 <_dtoa_r+0x640>)
 800aa84:	ec51 0b18 	vmov	r0, r1, d8
 800aa88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa8c:	f7f5 fede 	bl	800084c <__aeabi_ddiv>
 800aa90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa94:	f008 080f 	and.w	r8, r8, #15
 800aa98:	2503      	movs	r5, #3
 800aa9a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ad70 <_dtoa_r+0x640>
 800aa9e:	f1b8 0f00 	cmp.w	r8, #0
 800aaa2:	d10a      	bne.n	800aaba <_dtoa_r+0x38a>
 800aaa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaa8:	4632      	mov	r2, r6
 800aaaa:	463b      	mov	r3, r7
 800aaac:	f7f5 fece 	bl	800084c <__aeabi_ddiv>
 800aab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aab4:	e02b      	b.n	800ab0e <_dtoa_r+0x3de>
 800aab6:	2502      	movs	r5, #2
 800aab8:	e7ef      	b.n	800aa9a <_dtoa_r+0x36a>
 800aaba:	f018 0f01 	tst.w	r8, #1
 800aabe:	d008      	beq.n	800aad2 <_dtoa_r+0x3a2>
 800aac0:	4630      	mov	r0, r6
 800aac2:	4639      	mov	r1, r7
 800aac4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aac8:	f7f5 fd96 	bl	80005f8 <__aeabi_dmul>
 800aacc:	3501      	adds	r5, #1
 800aace:	4606      	mov	r6, r0
 800aad0:	460f      	mov	r7, r1
 800aad2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aad6:	f109 0908 	add.w	r9, r9, #8
 800aada:	e7e0      	b.n	800aa9e <_dtoa_r+0x36e>
 800aadc:	f000 809f 	beq.w	800ac1e <_dtoa_r+0x4ee>
 800aae0:	f1cb 0600 	rsb	r6, fp, #0
 800aae4:	4ba1      	ldr	r3, [pc, #644]	; (800ad6c <_dtoa_r+0x63c>)
 800aae6:	4fa2      	ldr	r7, [pc, #648]	; (800ad70 <_dtoa_r+0x640>)
 800aae8:	f006 020f 	and.w	r2, r6, #15
 800aaec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	ec51 0b18 	vmov	r0, r1, d8
 800aaf8:	f7f5 fd7e 	bl	80005f8 <__aeabi_dmul>
 800aafc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab00:	1136      	asrs	r6, r6, #4
 800ab02:	2300      	movs	r3, #0
 800ab04:	2502      	movs	r5, #2
 800ab06:	2e00      	cmp	r6, #0
 800ab08:	d17e      	bne.n	800ac08 <_dtoa_r+0x4d8>
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1d0      	bne.n	800aab0 <_dtoa_r+0x380>
 800ab0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f000 8084 	beq.w	800ac22 <_dtoa_r+0x4f2>
 800ab1a:	4b96      	ldr	r3, [pc, #600]	; (800ad74 <_dtoa_r+0x644>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	4640      	mov	r0, r8
 800ab20:	4649      	mov	r1, r9
 800ab22:	f7f5 ffdb 	bl	8000adc <__aeabi_dcmplt>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d07b      	beq.n	800ac22 <_dtoa_r+0x4f2>
 800ab2a:	9b04      	ldr	r3, [sp, #16]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d078      	beq.n	800ac22 <_dtoa_r+0x4f2>
 800ab30:	9b01      	ldr	r3, [sp, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	dd39      	ble.n	800abaa <_dtoa_r+0x47a>
 800ab36:	4b90      	ldr	r3, [pc, #576]	; (800ad78 <_dtoa_r+0x648>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	4640      	mov	r0, r8
 800ab3c:	4649      	mov	r1, r9
 800ab3e:	f7f5 fd5b 	bl	80005f8 <__aeabi_dmul>
 800ab42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab46:	9e01      	ldr	r6, [sp, #4]
 800ab48:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ab4c:	3501      	adds	r5, #1
 800ab4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab52:	4628      	mov	r0, r5
 800ab54:	f7f5 fce6 	bl	8000524 <__aeabi_i2d>
 800ab58:	4642      	mov	r2, r8
 800ab5a:	464b      	mov	r3, r9
 800ab5c:	f7f5 fd4c 	bl	80005f8 <__aeabi_dmul>
 800ab60:	4b86      	ldr	r3, [pc, #536]	; (800ad7c <_dtoa_r+0x64c>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	f7f5 fb92 	bl	800028c <__adddf3>
 800ab68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ab6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab70:	9303      	str	r3, [sp, #12]
 800ab72:	2e00      	cmp	r6, #0
 800ab74:	d158      	bne.n	800ac28 <_dtoa_r+0x4f8>
 800ab76:	4b82      	ldr	r3, [pc, #520]	; (800ad80 <_dtoa_r+0x650>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	4640      	mov	r0, r8
 800ab7c:	4649      	mov	r1, r9
 800ab7e:	f7f5 fb83 	bl	8000288 <__aeabi_dsub>
 800ab82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab86:	4680      	mov	r8, r0
 800ab88:	4689      	mov	r9, r1
 800ab8a:	f7f5 ffc5 	bl	8000b18 <__aeabi_dcmpgt>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	f040 8296 	bne.w	800b0c0 <_dtoa_r+0x990>
 800ab94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ab98:	4640      	mov	r0, r8
 800ab9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab9e:	4649      	mov	r1, r9
 800aba0:	f7f5 ff9c 	bl	8000adc <__aeabi_dcmplt>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	f040 8289 	bne.w	800b0bc <_dtoa_r+0x98c>
 800abaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800abae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f2c0 814e 	blt.w	800ae52 <_dtoa_r+0x722>
 800abb6:	f1bb 0f0e 	cmp.w	fp, #14
 800abba:	f300 814a 	bgt.w	800ae52 <_dtoa_r+0x722>
 800abbe:	4b6b      	ldr	r3, [pc, #428]	; (800ad6c <_dtoa_r+0x63c>)
 800abc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800abc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f280 80dc 	bge.w	800ad88 <_dtoa_r+0x658>
 800abd0:	9b04      	ldr	r3, [sp, #16]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f300 80d8 	bgt.w	800ad88 <_dtoa_r+0x658>
 800abd8:	f040 826f 	bne.w	800b0ba <_dtoa_r+0x98a>
 800abdc:	4b68      	ldr	r3, [pc, #416]	; (800ad80 <_dtoa_r+0x650>)
 800abde:	2200      	movs	r2, #0
 800abe0:	4640      	mov	r0, r8
 800abe2:	4649      	mov	r1, r9
 800abe4:	f7f5 fd08 	bl	80005f8 <__aeabi_dmul>
 800abe8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abec:	f7f5 ff8a 	bl	8000b04 <__aeabi_dcmpge>
 800abf0:	9e04      	ldr	r6, [sp, #16]
 800abf2:	4637      	mov	r7, r6
 800abf4:	2800      	cmp	r0, #0
 800abf6:	f040 8245 	bne.w	800b084 <_dtoa_r+0x954>
 800abfa:	9d00      	ldr	r5, [sp, #0]
 800abfc:	2331      	movs	r3, #49	; 0x31
 800abfe:	f805 3b01 	strb.w	r3, [r5], #1
 800ac02:	f10b 0b01 	add.w	fp, fp, #1
 800ac06:	e241      	b.n	800b08c <_dtoa_r+0x95c>
 800ac08:	07f2      	lsls	r2, r6, #31
 800ac0a:	d505      	bpl.n	800ac18 <_dtoa_r+0x4e8>
 800ac0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac10:	f7f5 fcf2 	bl	80005f8 <__aeabi_dmul>
 800ac14:	3501      	adds	r5, #1
 800ac16:	2301      	movs	r3, #1
 800ac18:	1076      	asrs	r6, r6, #1
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	e773      	b.n	800ab06 <_dtoa_r+0x3d6>
 800ac1e:	2502      	movs	r5, #2
 800ac20:	e775      	b.n	800ab0e <_dtoa_r+0x3de>
 800ac22:	9e04      	ldr	r6, [sp, #16]
 800ac24:	465f      	mov	r7, fp
 800ac26:	e792      	b.n	800ab4e <_dtoa_r+0x41e>
 800ac28:	9900      	ldr	r1, [sp, #0]
 800ac2a:	4b50      	ldr	r3, [pc, #320]	; (800ad6c <_dtoa_r+0x63c>)
 800ac2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac30:	4431      	add	r1, r6
 800ac32:	9102      	str	r1, [sp, #8]
 800ac34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac36:	eeb0 9a47 	vmov.f32	s18, s14
 800ac3a:	eef0 9a67 	vmov.f32	s19, s15
 800ac3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac46:	2900      	cmp	r1, #0
 800ac48:	d044      	beq.n	800acd4 <_dtoa_r+0x5a4>
 800ac4a:	494e      	ldr	r1, [pc, #312]	; (800ad84 <_dtoa_r+0x654>)
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	f7f5 fdfd 	bl	800084c <__aeabi_ddiv>
 800ac52:	ec53 2b19 	vmov	r2, r3, d9
 800ac56:	f7f5 fb17 	bl	8000288 <__aeabi_dsub>
 800ac5a:	9d00      	ldr	r5, [sp, #0]
 800ac5c:	ec41 0b19 	vmov	d9, r0, r1
 800ac60:	4649      	mov	r1, r9
 800ac62:	4640      	mov	r0, r8
 800ac64:	f7f5 ff78 	bl	8000b58 <__aeabi_d2iz>
 800ac68:	4606      	mov	r6, r0
 800ac6a:	f7f5 fc5b 	bl	8000524 <__aeabi_i2d>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	4640      	mov	r0, r8
 800ac74:	4649      	mov	r1, r9
 800ac76:	f7f5 fb07 	bl	8000288 <__aeabi_dsub>
 800ac7a:	3630      	adds	r6, #48	; 0x30
 800ac7c:	f805 6b01 	strb.w	r6, [r5], #1
 800ac80:	ec53 2b19 	vmov	r2, r3, d9
 800ac84:	4680      	mov	r8, r0
 800ac86:	4689      	mov	r9, r1
 800ac88:	f7f5 ff28 	bl	8000adc <__aeabi_dcmplt>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	d164      	bne.n	800ad5a <_dtoa_r+0x62a>
 800ac90:	4642      	mov	r2, r8
 800ac92:	464b      	mov	r3, r9
 800ac94:	4937      	ldr	r1, [pc, #220]	; (800ad74 <_dtoa_r+0x644>)
 800ac96:	2000      	movs	r0, #0
 800ac98:	f7f5 faf6 	bl	8000288 <__aeabi_dsub>
 800ac9c:	ec53 2b19 	vmov	r2, r3, d9
 800aca0:	f7f5 ff1c 	bl	8000adc <__aeabi_dcmplt>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	f040 80b6 	bne.w	800ae16 <_dtoa_r+0x6e6>
 800acaa:	9b02      	ldr	r3, [sp, #8]
 800acac:	429d      	cmp	r5, r3
 800acae:	f43f af7c 	beq.w	800abaa <_dtoa_r+0x47a>
 800acb2:	4b31      	ldr	r3, [pc, #196]	; (800ad78 <_dtoa_r+0x648>)
 800acb4:	ec51 0b19 	vmov	r0, r1, d9
 800acb8:	2200      	movs	r2, #0
 800acba:	f7f5 fc9d 	bl	80005f8 <__aeabi_dmul>
 800acbe:	4b2e      	ldr	r3, [pc, #184]	; (800ad78 <_dtoa_r+0x648>)
 800acc0:	ec41 0b19 	vmov	d9, r0, r1
 800acc4:	2200      	movs	r2, #0
 800acc6:	4640      	mov	r0, r8
 800acc8:	4649      	mov	r1, r9
 800acca:	f7f5 fc95 	bl	80005f8 <__aeabi_dmul>
 800acce:	4680      	mov	r8, r0
 800acd0:	4689      	mov	r9, r1
 800acd2:	e7c5      	b.n	800ac60 <_dtoa_r+0x530>
 800acd4:	ec51 0b17 	vmov	r0, r1, d7
 800acd8:	f7f5 fc8e 	bl	80005f8 <__aeabi_dmul>
 800acdc:	9b02      	ldr	r3, [sp, #8]
 800acde:	9d00      	ldr	r5, [sp, #0]
 800ace0:	930f      	str	r3, [sp, #60]	; 0x3c
 800ace2:	ec41 0b19 	vmov	d9, r0, r1
 800ace6:	4649      	mov	r1, r9
 800ace8:	4640      	mov	r0, r8
 800acea:	f7f5 ff35 	bl	8000b58 <__aeabi_d2iz>
 800acee:	4606      	mov	r6, r0
 800acf0:	f7f5 fc18 	bl	8000524 <__aeabi_i2d>
 800acf4:	3630      	adds	r6, #48	; 0x30
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	4640      	mov	r0, r8
 800acfc:	4649      	mov	r1, r9
 800acfe:	f7f5 fac3 	bl	8000288 <__aeabi_dsub>
 800ad02:	f805 6b01 	strb.w	r6, [r5], #1
 800ad06:	9b02      	ldr	r3, [sp, #8]
 800ad08:	429d      	cmp	r5, r3
 800ad0a:	4680      	mov	r8, r0
 800ad0c:	4689      	mov	r9, r1
 800ad0e:	f04f 0200 	mov.w	r2, #0
 800ad12:	d124      	bne.n	800ad5e <_dtoa_r+0x62e>
 800ad14:	4b1b      	ldr	r3, [pc, #108]	; (800ad84 <_dtoa_r+0x654>)
 800ad16:	ec51 0b19 	vmov	r0, r1, d9
 800ad1a:	f7f5 fab7 	bl	800028c <__adddf3>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	4640      	mov	r0, r8
 800ad24:	4649      	mov	r1, r9
 800ad26:	f7f5 fef7 	bl	8000b18 <__aeabi_dcmpgt>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d173      	bne.n	800ae16 <_dtoa_r+0x6e6>
 800ad2e:	ec53 2b19 	vmov	r2, r3, d9
 800ad32:	4914      	ldr	r1, [pc, #80]	; (800ad84 <_dtoa_r+0x654>)
 800ad34:	2000      	movs	r0, #0
 800ad36:	f7f5 faa7 	bl	8000288 <__aeabi_dsub>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	4640      	mov	r0, r8
 800ad40:	4649      	mov	r1, r9
 800ad42:	f7f5 fecb 	bl	8000adc <__aeabi_dcmplt>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	f43f af2f 	beq.w	800abaa <_dtoa_r+0x47a>
 800ad4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad4e:	1e6b      	subs	r3, r5, #1
 800ad50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad56:	2b30      	cmp	r3, #48	; 0x30
 800ad58:	d0f8      	beq.n	800ad4c <_dtoa_r+0x61c>
 800ad5a:	46bb      	mov	fp, r7
 800ad5c:	e04a      	b.n	800adf4 <_dtoa_r+0x6c4>
 800ad5e:	4b06      	ldr	r3, [pc, #24]	; (800ad78 <_dtoa_r+0x648>)
 800ad60:	f7f5 fc4a 	bl	80005f8 <__aeabi_dmul>
 800ad64:	4680      	mov	r8, r0
 800ad66:	4689      	mov	r9, r1
 800ad68:	e7bd      	b.n	800ace6 <_dtoa_r+0x5b6>
 800ad6a:	bf00      	nop
 800ad6c:	0800d140 	.word	0x0800d140
 800ad70:	0800d118 	.word	0x0800d118
 800ad74:	3ff00000 	.word	0x3ff00000
 800ad78:	40240000 	.word	0x40240000
 800ad7c:	401c0000 	.word	0x401c0000
 800ad80:	40140000 	.word	0x40140000
 800ad84:	3fe00000 	.word	0x3fe00000
 800ad88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad8c:	9d00      	ldr	r5, [sp, #0]
 800ad8e:	4642      	mov	r2, r8
 800ad90:	464b      	mov	r3, r9
 800ad92:	4630      	mov	r0, r6
 800ad94:	4639      	mov	r1, r7
 800ad96:	f7f5 fd59 	bl	800084c <__aeabi_ddiv>
 800ad9a:	f7f5 fedd 	bl	8000b58 <__aeabi_d2iz>
 800ad9e:	9001      	str	r0, [sp, #4]
 800ada0:	f7f5 fbc0 	bl	8000524 <__aeabi_i2d>
 800ada4:	4642      	mov	r2, r8
 800ada6:	464b      	mov	r3, r9
 800ada8:	f7f5 fc26 	bl	80005f8 <__aeabi_dmul>
 800adac:	4602      	mov	r2, r0
 800adae:	460b      	mov	r3, r1
 800adb0:	4630      	mov	r0, r6
 800adb2:	4639      	mov	r1, r7
 800adb4:	f7f5 fa68 	bl	8000288 <__aeabi_dsub>
 800adb8:	9e01      	ldr	r6, [sp, #4]
 800adba:	9f04      	ldr	r7, [sp, #16]
 800adbc:	3630      	adds	r6, #48	; 0x30
 800adbe:	f805 6b01 	strb.w	r6, [r5], #1
 800adc2:	9e00      	ldr	r6, [sp, #0]
 800adc4:	1bae      	subs	r6, r5, r6
 800adc6:	42b7      	cmp	r7, r6
 800adc8:	4602      	mov	r2, r0
 800adca:	460b      	mov	r3, r1
 800adcc:	d134      	bne.n	800ae38 <_dtoa_r+0x708>
 800adce:	f7f5 fa5d 	bl	800028c <__adddf3>
 800add2:	4642      	mov	r2, r8
 800add4:	464b      	mov	r3, r9
 800add6:	4606      	mov	r6, r0
 800add8:	460f      	mov	r7, r1
 800adda:	f7f5 fe9d 	bl	8000b18 <__aeabi_dcmpgt>
 800adde:	b9c8      	cbnz	r0, 800ae14 <_dtoa_r+0x6e4>
 800ade0:	4642      	mov	r2, r8
 800ade2:	464b      	mov	r3, r9
 800ade4:	4630      	mov	r0, r6
 800ade6:	4639      	mov	r1, r7
 800ade8:	f7f5 fe6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800adec:	b110      	cbz	r0, 800adf4 <_dtoa_r+0x6c4>
 800adee:	9b01      	ldr	r3, [sp, #4]
 800adf0:	07db      	lsls	r3, r3, #31
 800adf2:	d40f      	bmi.n	800ae14 <_dtoa_r+0x6e4>
 800adf4:	4651      	mov	r1, sl
 800adf6:	4620      	mov	r0, r4
 800adf8:	f000 fbcc 	bl	800b594 <_Bfree>
 800adfc:	2300      	movs	r3, #0
 800adfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae00:	702b      	strb	r3, [r5, #0]
 800ae02:	f10b 0301 	add.w	r3, fp, #1
 800ae06:	6013      	str	r3, [r2, #0]
 800ae08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f43f ace2 	beq.w	800a7d4 <_dtoa_r+0xa4>
 800ae10:	601d      	str	r5, [r3, #0]
 800ae12:	e4df      	b.n	800a7d4 <_dtoa_r+0xa4>
 800ae14:	465f      	mov	r7, fp
 800ae16:	462b      	mov	r3, r5
 800ae18:	461d      	mov	r5, r3
 800ae1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae1e:	2a39      	cmp	r2, #57	; 0x39
 800ae20:	d106      	bne.n	800ae30 <_dtoa_r+0x700>
 800ae22:	9a00      	ldr	r2, [sp, #0]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d1f7      	bne.n	800ae18 <_dtoa_r+0x6e8>
 800ae28:	9900      	ldr	r1, [sp, #0]
 800ae2a:	2230      	movs	r2, #48	; 0x30
 800ae2c:	3701      	adds	r7, #1
 800ae2e:	700a      	strb	r2, [r1, #0]
 800ae30:	781a      	ldrb	r2, [r3, #0]
 800ae32:	3201      	adds	r2, #1
 800ae34:	701a      	strb	r2, [r3, #0]
 800ae36:	e790      	b.n	800ad5a <_dtoa_r+0x62a>
 800ae38:	4ba3      	ldr	r3, [pc, #652]	; (800b0c8 <_dtoa_r+0x998>)
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f7f5 fbdc 	bl	80005f8 <__aeabi_dmul>
 800ae40:	2200      	movs	r2, #0
 800ae42:	2300      	movs	r3, #0
 800ae44:	4606      	mov	r6, r0
 800ae46:	460f      	mov	r7, r1
 800ae48:	f7f5 fe3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d09e      	beq.n	800ad8e <_dtoa_r+0x65e>
 800ae50:	e7d0      	b.n	800adf4 <_dtoa_r+0x6c4>
 800ae52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae54:	2a00      	cmp	r2, #0
 800ae56:	f000 80ca 	beq.w	800afee <_dtoa_r+0x8be>
 800ae5a:	9a07      	ldr	r2, [sp, #28]
 800ae5c:	2a01      	cmp	r2, #1
 800ae5e:	f300 80ad 	bgt.w	800afbc <_dtoa_r+0x88c>
 800ae62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae64:	2a00      	cmp	r2, #0
 800ae66:	f000 80a5 	beq.w	800afb4 <_dtoa_r+0x884>
 800ae6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae6e:	9e08      	ldr	r6, [sp, #32]
 800ae70:	9d05      	ldr	r5, [sp, #20]
 800ae72:	9a05      	ldr	r2, [sp, #20]
 800ae74:	441a      	add	r2, r3
 800ae76:	9205      	str	r2, [sp, #20]
 800ae78:	9a06      	ldr	r2, [sp, #24]
 800ae7a:	2101      	movs	r1, #1
 800ae7c:	441a      	add	r2, r3
 800ae7e:	4620      	mov	r0, r4
 800ae80:	9206      	str	r2, [sp, #24]
 800ae82:	f000 fc3d 	bl	800b700 <__i2b>
 800ae86:	4607      	mov	r7, r0
 800ae88:	b165      	cbz	r5, 800aea4 <_dtoa_r+0x774>
 800ae8a:	9b06      	ldr	r3, [sp, #24]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	dd09      	ble.n	800aea4 <_dtoa_r+0x774>
 800ae90:	42ab      	cmp	r3, r5
 800ae92:	9a05      	ldr	r2, [sp, #20]
 800ae94:	bfa8      	it	ge
 800ae96:	462b      	movge	r3, r5
 800ae98:	1ad2      	subs	r2, r2, r3
 800ae9a:	9205      	str	r2, [sp, #20]
 800ae9c:	9a06      	ldr	r2, [sp, #24]
 800ae9e:	1aed      	subs	r5, r5, r3
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	9306      	str	r3, [sp, #24]
 800aea4:	9b08      	ldr	r3, [sp, #32]
 800aea6:	b1f3      	cbz	r3, 800aee6 <_dtoa_r+0x7b6>
 800aea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f000 80a3 	beq.w	800aff6 <_dtoa_r+0x8c6>
 800aeb0:	2e00      	cmp	r6, #0
 800aeb2:	dd10      	ble.n	800aed6 <_dtoa_r+0x7a6>
 800aeb4:	4639      	mov	r1, r7
 800aeb6:	4632      	mov	r2, r6
 800aeb8:	4620      	mov	r0, r4
 800aeba:	f000 fce1 	bl	800b880 <__pow5mult>
 800aebe:	4652      	mov	r2, sl
 800aec0:	4601      	mov	r1, r0
 800aec2:	4607      	mov	r7, r0
 800aec4:	4620      	mov	r0, r4
 800aec6:	f000 fc31 	bl	800b72c <__multiply>
 800aeca:	4651      	mov	r1, sl
 800aecc:	4680      	mov	r8, r0
 800aece:	4620      	mov	r0, r4
 800aed0:	f000 fb60 	bl	800b594 <_Bfree>
 800aed4:	46c2      	mov	sl, r8
 800aed6:	9b08      	ldr	r3, [sp, #32]
 800aed8:	1b9a      	subs	r2, r3, r6
 800aeda:	d004      	beq.n	800aee6 <_dtoa_r+0x7b6>
 800aedc:	4651      	mov	r1, sl
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 fcce 	bl	800b880 <__pow5mult>
 800aee4:	4682      	mov	sl, r0
 800aee6:	2101      	movs	r1, #1
 800aee8:	4620      	mov	r0, r4
 800aeea:	f000 fc09 	bl	800b700 <__i2b>
 800aeee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	4606      	mov	r6, r0
 800aef4:	f340 8081 	ble.w	800affa <_dtoa_r+0x8ca>
 800aef8:	461a      	mov	r2, r3
 800aefa:	4601      	mov	r1, r0
 800aefc:	4620      	mov	r0, r4
 800aefe:	f000 fcbf 	bl	800b880 <__pow5mult>
 800af02:	9b07      	ldr	r3, [sp, #28]
 800af04:	2b01      	cmp	r3, #1
 800af06:	4606      	mov	r6, r0
 800af08:	dd7a      	ble.n	800b000 <_dtoa_r+0x8d0>
 800af0a:	f04f 0800 	mov.w	r8, #0
 800af0e:	6933      	ldr	r3, [r6, #16]
 800af10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af14:	6918      	ldr	r0, [r3, #16]
 800af16:	f000 fba5 	bl	800b664 <__hi0bits>
 800af1a:	f1c0 0020 	rsb	r0, r0, #32
 800af1e:	9b06      	ldr	r3, [sp, #24]
 800af20:	4418      	add	r0, r3
 800af22:	f010 001f 	ands.w	r0, r0, #31
 800af26:	f000 8094 	beq.w	800b052 <_dtoa_r+0x922>
 800af2a:	f1c0 0320 	rsb	r3, r0, #32
 800af2e:	2b04      	cmp	r3, #4
 800af30:	f340 8085 	ble.w	800b03e <_dtoa_r+0x90e>
 800af34:	9b05      	ldr	r3, [sp, #20]
 800af36:	f1c0 001c 	rsb	r0, r0, #28
 800af3a:	4403      	add	r3, r0
 800af3c:	9305      	str	r3, [sp, #20]
 800af3e:	9b06      	ldr	r3, [sp, #24]
 800af40:	4403      	add	r3, r0
 800af42:	4405      	add	r5, r0
 800af44:	9306      	str	r3, [sp, #24]
 800af46:	9b05      	ldr	r3, [sp, #20]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	dd05      	ble.n	800af58 <_dtoa_r+0x828>
 800af4c:	4651      	mov	r1, sl
 800af4e:	461a      	mov	r2, r3
 800af50:	4620      	mov	r0, r4
 800af52:	f000 fcef 	bl	800b934 <__lshift>
 800af56:	4682      	mov	sl, r0
 800af58:	9b06      	ldr	r3, [sp, #24]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	dd05      	ble.n	800af6a <_dtoa_r+0x83a>
 800af5e:	4631      	mov	r1, r6
 800af60:	461a      	mov	r2, r3
 800af62:	4620      	mov	r0, r4
 800af64:	f000 fce6 	bl	800b934 <__lshift>
 800af68:	4606      	mov	r6, r0
 800af6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d072      	beq.n	800b056 <_dtoa_r+0x926>
 800af70:	4631      	mov	r1, r6
 800af72:	4650      	mov	r0, sl
 800af74:	f000 fd4a 	bl	800ba0c <__mcmp>
 800af78:	2800      	cmp	r0, #0
 800af7a:	da6c      	bge.n	800b056 <_dtoa_r+0x926>
 800af7c:	2300      	movs	r3, #0
 800af7e:	4651      	mov	r1, sl
 800af80:	220a      	movs	r2, #10
 800af82:	4620      	mov	r0, r4
 800af84:	f000 fb28 	bl	800b5d8 <__multadd>
 800af88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af8e:	4682      	mov	sl, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 81b0 	beq.w	800b2f6 <_dtoa_r+0xbc6>
 800af96:	2300      	movs	r3, #0
 800af98:	4639      	mov	r1, r7
 800af9a:	220a      	movs	r2, #10
 800af9c:	4620      	mov	r0, r4
 800af9e:	f000 fb1b 	bl	800b5d8 <__multadd>
 800afa2:	9b01      	ldr	r3, [sp, #4]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	4607      	mov	r7, r0
 800afa8:	f300 8096 	bgt.w	800b0d8 <_dtoa_r+0x9a8>
 800afac:	9b07      	ldr	r3, [sp, #28]
 800afae:	2b02      	cmp	r3, #2
 800afb0:	dc59      	bgt.n	800b066 <_dtoa_r+0x936>
 800afb2:	e091      	b.n	800b0d8 <_dtoa_r+0x9a8>
 800afb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800afba:	e758      	b.n	800ae6e <_dtoa_r+0x73e>
 800afbc:	9b04      	ldr	r3, [sp, #16]
 800afbe:	1e5e      	subs	r6, r3, #1
 800afc0:	9b08      	ldr	r3, [sp, #32]
 800afc2:	42b3      	cmp	r3, r6
 800afc4:	bfbf      	itttt	lt
 800afc6:	9b08      	ldrlt	r3, [sp, #32]
 800afc8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800afca:	9608      	strlt	r6, [sp, #32]
 800afcc:	1af3      	sublt	r3, r6, r3
 800afce:	bfb4      	ite	lt
 800afd0:	18d2      	addlt	r2, r2, r3
 800afd2:	1b9e      	subge	r6, r3, r6
 800afd4:	9b04      	ldr	r3, [sp, #16]
 800afd6:	bfbc      	itt	lt
 800afd8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800afda:	2600      	movlt	r6, #0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	bfb7      	itett	lt
 800afe0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800afe4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800afe8:	1a9d      	sublt	r5, r3, r2
 800afea:	2300      	movlt	r3, #0
 800afec:	e741      	b.n	800ae72 <_dtoa_r+0x742>
 800afee:	9e08      	ldr	r6, [sp, #32]
 800aff0:	9d05      	ldr	r5, [sp, #20]
 800aff2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aff4:	e748      	b.n	800ae88 <_dtoa_r+0x758>
 800aff6:	9a08      	ldr	r2, [sp, #32]
 800aff8:	e770      	b.n	800aedc <_dtoa_r+0x7ac>
 800affa:	9b07      	ldr	r3, [sp, #28]
 800affc:	2b01      	cmp	r3, #1
 800affe:	dc19      	bgt.n	800b034 <_dtoa_r+0x904>
 800b000:	9b02      	ldr	r3, [sp, #8]
 800b002:	b9bb      	cbnz	r3, 800b034 <_dtoa_r+0x904>
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b00a:	b99b      	cbnz	r3, 800b034 <_dtoa_r+0x904>
 800b00c:	9b03      	ldr	r3, [sp, #12]
 800b00e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b012:	0d1b      	lsrs	r3, r3, #20
 800b014:	051b      	lsls	r3, r3, #20
 800b016:	b183      	cbz	r3, 800b03a <_dtoa_r+0x90a>
 800b018:	9b05      	ldr	r3, [sp, #20]
 800b01a:	3301      	adds	r3, #1
 800b01c:	9305      	str	r3, [sp, #20]
 800b01e:	9b06      	ldr	r3, [sp, #24]
 800b020:	3301      	adds	r3, #1
 800b022:	9306      	str	r3, [sp, #24]
 800b024:	f04f 0801 	mov.w	r8, #1
 800b028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f47f af6f 	bne.w	800af0e <_dtoa_r+0x7de>
 800b030:	2001      	movs	r0, #1
 800b032:	e774      	b.n	800af1e <_dtoa_r+0x7ee>
 800b034:	f04f 0800 	mov.w	r8, #0
 800b038:	e7f6      	b.n	800b028 <_dtoa_r+0x8f8>
 800b03a:	4698      	mov	r8, r3
 800b03c:	e7f4      	b.n	800b028 <_dtoa_r+0x8f8>
 800b03e:	d082      	beq.n	800af46 <_dtoa_r+0x816>
 800b040:	9a05      	ldr	r2, [sp, #20]
 800b042:	331c      	adds	r3, #28
 800b044:	441a      	add	r2, r3
 800b046:	9205      	str	r2, [sp, #20]
 800b048:	9a06      	ldr	r2, [sp, #24]
 800b04a:	441a      	add	r2, r3
 800b04c:	441d      	add	r5, r3
 800b04e:	9206      	str	r2, [sp, #24]
 800b050:	e779      	b.n	800af46 <_dtoa_r+0x816>
 800b052:	4603      	mov	r3, r0
 800b054:	e7f4      	b.n	800b040 <_dtoa_r+0x910>
 800b056:	9b04      	ldr	r3, [sp, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	dc37      	bgt.n	800b0cc <_dtoa_r+0x99c>
 800b05c:	9b07      	ldr	r3, [sp, #28]
 800b05e:	2b02      	cmp	r3, #2
 800b060:	dd34      	ble.n	800b0cc <_dtoa_r+0x99c>
 800b062:	9b04      	ldr	r3, [sp, #16]
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	9b01      	ldr	r3, [sp, #4]
 800b068:	b963      	cbnz	r3, 800b084 <_dtoa_r+0x954>
 800b06a:	4631      	mov	r1, r6
 800b06c:	2205      	movs	r2, #5
 800b06e:	4620      	mov	r0, r4
 800b070:	f000 fab2 	bl	800b5d8 <__multadd>
 800b074:	4601      	mov	r1, r0
 800b076:	4606      	mov	r6, r0
 800b078:	4650      	mov	r0, sl
 800b07a:	f000 fcc7 	bl	800ba0c <__mcmp>
 800b07e:	2800      	cmp	r0, #0
 800b080:	f73f adbb 	bgt.w	800abfa <_dtoa_r+0x4ca>
 800b084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b086:	9d00      	ldr	r5, [sp, #0]
 800b088:	ea6f 0b03 	mvn.w	fp, r3
 800b08c:	f04f 0800 	mov.w	r8, #0
 800b090:	4631      	mov	r1, r6
 800b092:	4620      	mov	r0, r4
 800b094:	f000 fa7e 	bl	800b594 <_Bfree>
 800b098:	2f00      	cmp	r7, #0
 800b09a:	f43f aeab 	beq.w	800adf4 <_dtoa_r+0x6c4>
 800b09e:	f1b8 0f00 	cmp.w	r8, #0
 800b0a2:	d005      	beq.n	800b0b0 <_dtoa_r+0x980>
 800b0a4:	45b8      	cmp	r8, r7
 800b0a6:	d003      	beq.n	800b0b0 <_dtoa_r+0x980>
 800b0a8:	4641      	mov	r1, r8
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f000 fa72 	bl	800b594 <_Bfree>
 800b0b0:	4639      	mov	r1, r7
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f000 fa6e 	bl	800b594 <_Bfree>
 800b0b8:	e69c      	b.n	800adf4 <_dtoa_r+0x6c4>
 800b0ba:	2600      	movs	r6, #0
 800b0bc:	4637      	mov	r7, r6
 800b0be:	e7e1      	b.n	800b084 <_dtoa_r+0x954>
 800b0c0:	46bb      	mov	fp, r7
 800b0c2:	4637      	mov	r7, r6
 800b0c4:	e599      	b.n	800abfa <_dtoa_r+0x4ca>
 800b0c6:	bf00      	nop
 800b0c8:	40240000 	.word	0x40240000
 800b0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f000 80c8 	beq.w	800b264 <_dtoa_r+0xb34>
 800b0d4:	9b04      	ldr	r3, [sp, #16]
 800b0d6:	9301      	str	r3, [sp, #4]
 800b0d8:	2d00      	cmp	r5, #0
 800b0da:	dd05      	ble.n	800b0e8 <_dtoa_r+0x9b8>
 800b0dc:	4639      	mov	r1, r7
 800b0de:	462a      	mov	r2, r5
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f000 fc27 	bl	800b934 <__lshift>
 800b0e6:	4607      	mov	r7, r0
 800b0e8:	f1b8 0f00 	cmp.w	r8, #0
 800b0ec:	d05b      	beq.n	800b1a6 <_dtoa_r+0xa76>
 800b0ee:	6879      	ldr	r1, [r7, #4]
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f000 fa0f 	bl	800b514 <_Balloc>
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	b928      	cbnz	r0, 800b106 <_dtoa_r+0x9d6>
 800b0fa:	4b83      	ldr	r3, [pc, #524]	; (800b308 <_dtoa_r+0xbd8>)
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b102:	f7ff bb2e 	b.w	800a762 <_dtoa_r+0x32>
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	3202      	adds	r2, #2
 800b10a:	0092      	lsls	r2, r2, #2
 800b10c:	f107 010c 	add.w	r1, r7, #12
 800b110:	300c      	adds	r0, #12
 800b112:	f7ff fa74 	bl	800a5fe <memcpy>
 800b116:	2201      	movs	r2, #1
 800b118:	4629      	mov	r1, r5
 800b11a:	4620      	mov	r0, r4
 800b11c:	f000 fc0a 	bl	800b934 <__lshift>
 800b120:	9b00      	ldr	r3, [sp, #0]
 800b122:	3301      	adds	r3, #1
 800b124:	9304      	str	r3, [sp, #16]
 800b126:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b12a:	4413      	add	r3, r2
 800b12c:	9308      	str	r3, [sp, #32]
 800b12e:	9b02      	ldr	r3, [sp, #8]
 800b130:	f003 0301 	and.w	r3, r3, #1
 800b134:	46b8      	mov	r8, r7
 800b136:	9306      	str	r3, [sp, #24]
 800b138:	4607      	mov	r7, r0
 800b13a:	9b04      	ldr	r3, [sp, #16]
 800b13c:	4631      	mov	r1, r6
 800b13e:	3b01      	subs	r3, #1
 800b140:	4650      	mov	r0, sl
 800b142:	9301      	str	r3, [sp, #4]
 800b144:	f7ff fa69 	bl	800a61a <quorem>
 800b148:	4641      	mov	r1, r8
 800b14a:	9002      	str	r0, [sp, #8]
 800b14c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b150:	4650      	mov	r0, sl
 800b152:	f000 fc5b 	bl	800ba0c <__mcmp>
 800b156:	463a      	mov	r2, r7
 800b158:	9005      	str	r0, [sp, #20]
 800b15a:	4631      	mov	r1, r6
 800b15c:	4620      	mov	r0, r4
 800b15e:	f000 fc71 	bl	800ba44 <__mdiff>
 800b162:	68c2      	ldr	r2, [r0, #12]
 800b164:	4605      	mov	r5, r0
 800b166:	bb02      	cbnz	r2, 800b1aa <_dtoa_r+0xa7a>
 800b168:	4601      	mov	r1, r0
 800b16a:	4650      	mov	r0, sl
 800b16c:	f000 fc4e 	bl	800ba0c <__mcmp>
 800b170:	4602      	mov	r2, r0
 800b172:	4629      	mov	r1, r5
 800b174:	4620      	mov	r0, r4
 800b176:	9209      	str	r2, [sp, #36]	; 0x24
 800b178:	f000 fa0c 	bl	800b594 <_Bfree>
 800b17c:	9b07      	ldr	r3, [sp, #28]
 800b17e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b180:	9d04      	ldr	r5, [sp, #16]
 800b182:	ea43 0102 	orr.w	r1, r3, r2
 800b186:	9b06      	ldr	r3, [sp, #24]
 800b188:	4319      	orrs	r1, r3
 800b18a:	d110      	bne.n	800b1ae <_dtoa_r+0xa7e>
 800b18c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b190:	d029      	beq.n	800b1e6 <_dtoa_r+0xab6>
 800b192:	9b05      	ldr	r3, [sp, #20]
 800b194:	2b00      	cmp	r3, #0
 800b196:	dd02      	ble.n	800b19e <_dtoa_r+0xa6e>
 800b198:	9b02      	ldr	r3, [sp, #8]
 800b19a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b19e:	9b01      	ldr	r3, [sp, #4]
 800b1a0:	f883 9000 	strb.w	r9, [r3]
 800b1a4:	e774      	b.n	800b090 <_dtoa_r+0x960>
 800b1a6:	4638      	mov	r0, r7
 800b1a8:	e7ba      	b.n	800b120 <_dtoa_r+0x9f0>
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	e7e1      	b.n	800b172 <_dtoa_r+0xa42>
 800b1ae:	9b05      	ldr	r3, [sp, #20]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	db04      	blt.n	800b1be <_dtoa_r+0xa8e>
 800b1b4:	9907      	ldr	r1, [sp, #28]
 800b1b6:	430b      	orrs	r3, r1
 800b1b8:	9906      	ldr	r1, [sp, #24]
 800b1ba:	430b      	orrs	r3, r1
 800b1bc:	d120      	bne.n	800b200 <_dtoa_r+0xad0>
 800b1be:	2a00      	cmp	r2, #0
 800b1c0:	dded      	ble.n	800b19e <_dtoa_r+0xa6e>
 800b1c2:	4651      	mov	r1, sl
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f000 fbb4 	bl	800b934 <__lshift>
 800b1cc:	4631      	mov	r1, r6
 800b1ce:	4682      	mov	sl, r0
 800b1d0:	f000 fc1c 	bl	800ba0c <__mcmp>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	dc03      	bgt.n	800b1e0 <_dtoa_r+0xab0>
 800b1d8:	d1e1      	bne.n	800b19e <_dtoa_r+0xa6e>
 800b1da:	f019 0f01 	tst.w	r9, #1
 800b1de:	d0de      	beq.n	800b19e <_dtoa_r+0xa6e>
 800b1e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b1e4:	d1d8      	bne.n	800b198 <_dtoa_r+0xa68>
 800b1e6:	9a01      	ldr	r2, [sp, #4]
 800b1e8:	2339      	movs	r3, #57	; 0x39
 800b1ea:	7013      	strb	r3, [r2, #0]
 800b1ec:	462b      	mov	r3, r5
 800b1ee:	461d      	mov	r5, r3
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b1f6:	2a39      	cmp	r2, #57	; 0x39
 800b1f8:	d06c      	beq.n	800b2d4 <_dtoa_r+0xba4>
 800b1fa:	3201      	adds	r2, #1
 800b1fc:	701a      	strb	r2, [r3, #0]
 800b1fe:	e747      	b.n	800b090 <_dtoa_r+0x960>
 800b200:	2a00      	cmp	r2, #0
 800b202:	dd07      	ble.n	800b214 <_dtoa_r+0xae4>
 800b204:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b208:	d0ed      	beq.n	800b1e6 <_dtoa_r+0xab6>
 800b20a:	9a01      	ldr	r2, [sp, #4]
 800b20c:	f109 0301 	add.w	r3, r9, #1
 800b210:	7013      	strb	r3, [r2, #0]
 800b212:	e73d      	b.n	800b090 <_dtoa_r+0x960>
 800b214:	9b04      	ldr	r3, [sp, #16]
 800b216:	9a08      	ldr	r2, [sp, #32]
 800b218:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d043      	beq.n	800b2a8 <_dtoa_r+0xb78>
 800b220:	4651      	mov	r1, sl
 800b222:	2300      	movs	r3, #0
 800b224:	220a      	movs	r2, #10
 800b226:	4620      	mov	r0, r4
 800b228:	f000 f9d6 	bl	800b5d8 <__multadd>
 800b22c:	45b8      	cmp	r8, r7
 800b22e:	4682      	mov	sl, r0
 800b230:	f04f 0300 	mov.w	r3, #0
 800b234:	f04f 020a 	mov.w	r2, #10
 800b238:	4641      	mov	r1, r8
 800b23a:	4620      	mov	r0, r4
 800b23c:	d107      	bne.n	800b24e <_dtoa_r+0xb1e>
 800b23e:	f000 f9cb 	bl	800b5d8 <__multadd>
 800b242:	4680      	mov	r8, r0
 800b244:	4607      	mov	r7, r0
 800b246:	9b04      	ldr	r3, [sp, #16]
 800b248:	3301      	adds	r3, #1
 800b24a:	9304      	str	r3, [sp, #16]
 800b24c:	e775      	b.n	800b13a <_dtoa_r+0xa0a>
 800b24e:	f000 f9c3 	bl	800b5d8 <__multadd>
 800b252:	4639      	mov	r1, r7
 800b254:	4680      	mov	r8, r0
 800b256:	2300      	movs	r3, #0
 800b258:	220a      	movs	r2, #10
 800b25a:	4620      	mov	r0, r4
 800b25c:	f000 f9bc 	bl	800b5d8 <__multadd>
 800b260:	4607      	mov	r7, r0
 800b262:	e7f0      	b.n	800b246 <_dtoa_r+0xb16>
 800b264:	9b04      	ldr	r3, [sp, #16]
 800b266:	9301      	str	r3, [sp, #4]
 800b268:	9d00      	ldr	r5, [sp, #0]
 800b26a:	4631      	mov	r1, r6
 800b26c:	4650      	mov	r0, sl
 800b26e:	f7ff f9d4 	bl	800a61a <quorem>
 800b272:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b276:	9b00      	ldr	r3, [sp, #0]
 800b278:	f805 9b01 	strb.w	r9, [r5], #1
 800b27c:	1aea      	subs	r2, r5, r3
 800b27e:	9b01      	ldr	r3, [sp, #4]
 800b280:	4293      	cmp	r3, r2
 800b282:	dd07      	ble.n	800b294 <_dtoa_r+0xb64>
 800b284:	4651      	mov	r1, sl
 800b286:	2300      	movs	r3, #0
 800b288:	220a      	movs	r2, #10
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 f9a4 	bl	800b5d8 <__multadd>
 800b290:	4682      	mov	sl, r0
 800b292:	e7ea      	b.n	800b26a <_dtoa_r+0xb3a>
 800b294:	9b01      	ldr	r3, [sp, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	bfc8      	it	gt
 800b29a:	461d      	movgt	r5, r3
 800b29c:	9b00      	ldr	r3, [sp, #0]
 800b29e:	bfd8      	it	le
 800b2a0:	2501      	movle	r5, #1
 800b2a2:	441d      	add	r5, r3
 800b2a4:	f04f 0800 	mov.w	r8, #0
 800b2a8:	4651      	mov	r1, sl
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f000 fb41 	bl	800b934 <__lshift>
 800b2b2:	4631      	mov	r1, r6
 800b2b4:	4682      	mov	sl, r0
 800b2b6:	f000 fba9 	bl	800ba0c <__mcmp>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	dc96      	bgt.n	800b1ec <_dtoa_r+0xabc>
 800b2be:	d102      	bne.n	800b2c6 <_dtoa_r+0xb96>
 800b2c0:	f019 0f01 	tst.w	r9, #1
 800b2c4:	d192      	bne.n	800b1ec <_dtoa_r+0xabc>
 800b2c6:	462b      	mov	r3, r5
 800b2c8:	461d      	mov	r5, r3
 800b2ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2ce:	2a30      	cmp	r2, #48	; 0x30
 800b2d0:	d0fa      	beq.n	800b2c8 <_dtoa_r+0xb98>
 800b2d2:	e6dd      	b.n	800b090 <_dtoa_r+0x960>
 800b2d4:	9a00      	ldr	r2, [sp, #0]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d189      	bne.n	800b1ee <_dtoa_r+0xabe>
 800b2da:	f10b 0b01 	add.w	fp, fp, #1
 800b2de:	2331      	movs	r3, #49	; 0x31
 800b2e0:	e796      	b.n	800b210 <_dtoa_r+0xae0>
 800b2e2:	4b0a      	ldr	r3, [pc, #40]	; (800b30c <_dtoa_r+0xbdc>)
 800b2e4:	f7ff ba99 	b.w	800a81a <_dtoa_r+0xea>
 800b2e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f47f aa6d 	bne.w	800a7ca <_dtoa_r+0x9a>
 800b2f0:	4b07      	ldr	r3, [pc, #28]	; (800b310 <_dtoa_r+0xbe0>)
 800b2f2:	f7ff ba92 	b.w	800a81a <_dtoa_r+0xea>
 800b2f6:	9b01      	ldr	r3, [sp, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	dcb5      	bgt.n	800b268 <_dtoa_r+0xb38>
 800b2fc:	9b07      	ldr	r3, [sp, #28]
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	f73f aeb1 	bgt.w	800b066 <_dtoa_r+0x936>
 800b304:	e7b0      	b.n	800b268 <_dtoa_r+0xb38>
 800b306:	bf00      	nop
 800b308:	0800d0ae 	.word	0x0800d0ae
 800b30c:	0800d23b 	.word	0x0800d23b
 800b310:	0800d032 	.word	0x0800d032

0800b314 <_free_r>:
 800b314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b316:	2900      	cmp	r1, #0
 800b318:	d044      	beq.n	800b3a4 <_free_r+0x90>
 800b31a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b31e:	9001      	str	r0, [sp, #4]
 800b320:	2b00      	cmp	r3, #0
 800b322:	f1a1 0404 	sub.w	r4, r1, #4
 800b326:	bfb8      	it	lt
 800b328:	18e4      	addlt	r4, r4, r3
 800b32a:	f000 f8e7 	bl	800b4fc <__malloc_lock>
 800b32e:	4a1e      	ldr	r2, [pc, #120]	; (800b3a8 <_free_r+0x94>)
 800b330:	9801      	ldr	r0, [sp, #4]
 800b332:	6813      	ldr	r3, [r2, #0]
 800b334:	b933      	cbnz	r3, 800b344 <_free_r+0x30>
 800b336:	6063      	str	r3, [r4, #4]
 800b338:	6014      	str	r4, [r2, #0]
 800b33a:	b003      	add	sp, #12
 800b33c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b340:	f000 b8e2 	b.w	800b508 <__malloc_unlock>
 800b344:	42a3      	cmp	r3, r4
 800b346:	d908      	bls.n	800b35a <_free_r+0x46>
 800b348:	6825      	ldr	r5, [r4, #0]
 800b34a:	1961      	adds	r1, r4, r5
 800b34c:	428b      	cmp	r3, r1
 800b34e:	bf01      	itttt	eq
 800b350:	6819      	ldreq	r1, [r3, #0]
 800b352:	685b      	ldreq	r3, [r3, #4]
 800b354:	1949      	addeq	r1, r1, r5
 800b356:	6021      	streq	r1, [r4, #0]
 800b358:	e7ed      	b.n	800b336 <_free_r+0x22>
 800b35a:	461a      	mov	r2, r3
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	b10b      	cbz	r3, 800b364 <_free_r+0x50>
 800b360:	42a3      	cmp	r3, r4
 800b362:	d9fa      	bls.n	800b35a <_free_r+0x46>
 800b364:	6811      	ldr	r1, [r2, #0]
 800b366:	1855      	adds	r5, r2, r1
 800b368:	42a5      	cmp	r5, r4
 800b36a:	d10b      	bne.n	800b384 <_free_r+0x70>
 800b36c:	6824      	ldr	r4, [r4, #0]
 800b36e:	4421      	add	r1, r4
 800b370:	1854      	adds	r4, r2, r1
 800b372:	42a3      	cmp	r3, r4
 800b374:	6011      	str	r1, [r2, #0]
 800b376:	d1e0      	bne.n	800b33a <_free_r+0x26>
 800b378:	681c      	ldr	r4, [r3, #0]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	6053      	str	r3, [r2, #4]
 800b37e:	440c      	add	r4, r1
 800b380:	6014      	str	r4, [r2, #0]
 800b382:	e7da      	b.n	800b33a <_free_r+0x26>
 800b384:	d902      	bls.n	800b38c <_free_r+0x78>
 800b386:	230c      	movs	r3, #12
 800b388:	6003      	str	r3, [r0, #0]
 800b38a:	e7d6      	b.n	800b33a <_free_r+0x26>
 800b38c:	6825      	ldr	r5, [r4, #0]
 800b38e:	1961      	adds	r1, r4, r5
 800b390:	428b      	cmp	r3, r1
 800b392:	bf04      	itt	eq
 800b394:	6819      	ldreq	r1, [r3, #0]
 800b396:	685b      	ldreq	r3, [r3, #4]
 800b398:	6063      	str	r3, [r4, #4]
 800b39a:	bf04      	itt	eq
 800b39c:	1949      	addeq	r1, r1, r5
 800b39e:	6021      	streq	r1, [r4, #0]
 800b3a0:	6054      	str	r4, [r2, #4]
 800b3a2:	e7ca      	b.n	800b33a <_free_r+0x26>
 800b3a4:	b003      	add	sp, #12
 800b3a6:	bd30      	pop	{r4, r5, pc}
 800b3a8:	2000165c 	.word	0x2000165c

0800b3ac <malloc>:
 800b3ac:	4b02      	ldr	r3, [pc, #8]	; (800b3b8 <malloc+0xc>)
 800b3ae:	4601      	mov	r1, r0
 800b3b0:	6818      	ldr	r0, [r3, #0]
 800b3b2:	f000 b823 	b.w	800b3fc <_malloc_r>
 800b3b6:	bf00      	nop
 800b3b8:	20000098 	.word	0x20000098

0800b3bc <sbrk_aligned>:
 800b3bc:	b570      	push	{r4, r5, r6, lr}
 800b3be:	4e0e      	ldr	r6, [pc, #56]	; (800b3f8 <sbrk_aligned+0x3c>)
 800b3c0:	460c      	mov	r4, r1
 800b3c2:	6831      	ldr	r1, [r6, #0]
 800b3c4:	4605      	mov	r5, r0
 800b3c6:	b911      	cbnz	r1, 800b3ce <sbrk_aligned+0x12>
 800b3c8:	f001 fa58 	bl	800c87c <_sbrk_r>
 800b3cc:	6030      	str	r0, [r6, #0]
 800b3ce:	4621      	mov	r1, r4
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	f001 fa53 	bl	800c87c <_sbrk_r>
 800b3d6:	1c43      	adds	r3, r0, #1
 800b3d8:	d00a      	beq.n	800b3f0 <sbrk_aligned+0x34>
 800b3da:	1cc4      	adds	r4, r0, #3
 800b3dc:	f024 0403 	bic.w	r4, r4, #3
 800b3e0:	42a0      	cmp	r0, r4
 800b3e2:	d007      	beq.n	800b3f4 <sbrk_aligned+0x38>
 800b3e4:	1a21      	subs	r1, r4, r0
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	f001 fa48 	bl	800c87c <_sbrk_r>
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	d101      	bne.n	800b3f4 <sbrk_aligned+0x38>
 800b3f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	bd70      	pop	{r4, r5, r6, pc}
 800b3f8:	20001660 	.word	0x20001660

0800b3fc <_malloc_r>:
 800b3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b400:	1ccd      	adds	r5, r1, #3
 800b402:	f025 0503 	bic.w	r5, r5, #3
 800b406:	3508      	adds	r5, #8
 800b408:	2d0c      	cmp	r5, #12
 800b40a:	bf38      	it	cc
 800b40c:	250c      	movcc	r5, #12
 800b40e:	2d00      	cmp	r5, #0
 800b410:	4607      	mov	r7, r0
 800b412:	db01      	blt.n	800b418 <_malloc_r+0x1c>
 800b414:	42a9      	cmp	r1, r5
 800b416:	d905      	bls.n	800b424 <_malloc_r+0x28>
 800b418:	230c      	movs	r3, #12
 800b41a:	603b      	str	r3, [r7, #0]
 800b41c:	2600      	movs	r6, #0
 800b41e:	4630      	mov	r0, r6
 800b420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b424:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b4f8 <_malloc_r+0xfc>
 800b428:	f000 f868 	bl	800b4fc <__malloc_lock>
 800b42c:	f8d8 3000 	ldr.w	r3, [r8]
 800b430:	461c      	mov	r4, r3
 800b432:	bb5c      	cbnz	r4, 800b48c <_malloc_r+0x90>
 800b434:	4629      	mov	r1, r5
 800b436:	4638      	mov	r0, r7
 800b438:	f7ff ffc0 	bl	800b3bc <sbrk_aligned>
 800b43c:	1c43      	adds	r3, r0, #1
 800b43e:	4604      	mov	r4, r0
 800b440:	d155      	bne.n	800b4ee <_malloc_r+0xf2>
 800b442:	f8d8 4000 	ldr.w	r4, [r8]
 800b446:	4626      	mov	r6, r4
 800b448:	2e00      	cmp	r6, #0
 800b44a:	d145      	bne.n	800b4d8 <_malloc_r+0xdc>
 800b44c:	2c00      	cmp	r4, #0
 800b44e:	d048      	beq.n	800b4e2 <_malloc_r+0xe6>
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	4631      	mov	r1, r6
 800b454:	4638      	mov	r0, r7
 800b456:	eb04 0903 	add.w	r9, r4, r3
 800b45a:	f001 fa0f 	bl	800c87c <_sbrk_r>
 800b45e:	4581      	cmp	r9, r0
 800b460:	d13f      	bne.n	800b4e2 <_malloc_r+0xe6>
 800b462:	6821      	ldr	r1, [r4, #0]
 800b464:	1a6d      	subs	r5, r5, r1
 800b466:	4629      	mov	r1, r5
 800b468:	4638      	mov	r0, r7
 800b46a:	f7ff ffa7 	bl	800b3bc <sbrk_aligned>
 800b46e:	3001      	adds	r0, #1
 800b470:	d037      	beq.n	800b4e2 <_malloc_r+0xe6>
 800b472:	6823      	ldr	r3, [r4, #0]
 800b474:	442b      	add	r3, r5
 800b476:	6023      	str	r3, [r4, #0]
 800b478:	f8d8 3000 	ldr.w	r3, [r8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d038      	beq.n	800b4f2 <_malloc_r+0xf6>
 800b480:	685a      	ldr	r2, [r3, #4]
 800b482:	42a2      	cmp	r2, r4
 800b484:	d12b      	bne.n	800b4de <_malloc_r+0xe2>
 800b486:	2200      	movs	r2, #0
 800b488:	605a      	str	r2, [r3, #4]
 800b48a:	e00f      	b.n	800b4ac <_malloc_r+0xb0>
 800b48c:	6822      	ldr	r2, [r4, #0]
 800b48e:	1b52      	subs	r2, r2, r5
 800b490:	d41f      	bmi.n	800b4d2 <_malloc_r+0xd6>
 800b492:	2a0b      	cmp	r2, #11
 800b494:	d917      	bls.n	800b4c6 <_malloc_r+0xca>
 800b496:	1961      	adds	r1, r4, r5
 800b498:	42a3      	cmp	r3, r4
 800b49a:	6025      	str	r5, [r4, #0]
 800b49c:	bf18      	it	ne
 800b49e:	6059      	strne	r1, [r3, #4]
 800b4a0:	6863      	ldr	r3, [r4, #4]
 800b4a2:	bf08      	it	eq
 800b4a4:	f8c8 1000 	streq.w	r1, [r8]
 800b4a8:	5162      	str	r2, [r4, r5]
 800b4aa:	604b      	str	r3, [r1, #4]
 800b4ac:	4638      	mov	r0, r7
 800b4ae:	f104 060b 	add.w	r6, r4, #11
 800b4b2:	f000 f829 	bl	800b508 <__malloc_unlock>
 800b4b6:	f026 0607 	bic.w	r6, r6, #7
 800b4ba:	1d23      	adds	r3, r4, #4
 800b4bc:	1af2      	subs	r2, r6, r3
 800b4be:	d0ae      	beq.n	800b41e <_malloc_r+0x22>
 800b4c0:	1b9b      	subs	r3, r3, r6
 800b4c2:	50a3      	str	r3, [r4, r2]
 800b4c4:	e7ab      	b.n	800b41e <_malloc_r+0x22>
 800b4c6:	42a3      	cmp	r3, r4
 800b4c8:	6862      	ldr	r2, [r4, #4]
 800b4ca:	d1dd      	bne.n	800b488 <_malloc_r+0x8c>
 800b4cc:	f8c8 2000 	str.w	r2, [r8]
 800b4d0:	e7ec      	b.n	800b4ac <_malloc_r+0xb0>
 800b4d2:	4623      	mov	r3, r4
 800b4d4:	6864      	ldr	r4, [r4, #4]
 800b4d6:	e7ac      	b.n	800b432 <_malloc_r+0x36>
 800b4d8:	4634      	mov	r4, r6
 800b4da:	6876      	ldr	r6, [r6, #4]
 800b4dc:	e7b4      	b.n	800b448 <_malloc_r+0x4c>
 800b4de:	4613      	mov	r3, r2
 800b4e0:	e7cc      	b.n	800b47c <_malloc_r+0x80>
 800b4e2:	230c      	movs	r3, #12
 800b4e4:	603b      	str	r3, [r7, #0]
 800b4e6:	4638      	mov	r0, r7
 800b4e8:	f000 f80e 	bl	800b508 <__malloc_unlock>
 800b4ec:	e797      	b.n	800b41e <_malloc_r+0x22>
 800b4ee:	6025      	str	r5, [r4, #0]
 800b4f0:	e7dc      	b.n	800b4ac <_malloc_r+0xb0>
 800b4f2:	605b      	str	r3, [r3, #4]
 800b4f4:	deff      	udf	#255	; 0xff
 800b4f6:	bf00      	nop
 800b4f8:	2000165c 	.word	0x2000165c

0800b4fc <__malloc_lock>:
 800b4fc:	4801      	ldr	r0, [pc, #4]	; (800b504 <__malloc_lock+0x8>)
 800b4fe:	f7ff b87c 	b.w	800a5fa <__retarget_lock_acquire_recursive>
 800b502:	bf00      	nop
 800b504:	20001658 	.word	0x20001658

0800b508 <__malloc_unlock>:
 800b508:	4801      	ldr	r0, [pc, #4]	; (800b510 <__malloc_unlock+0x8>)
 800b50a:	f7ff b877 	b.w	800a5fc <__retarget_lock_release_recursive>
 800b50e:	bf00      	nop
 800b510:	20001658 	.word	0x20001658

0800b514 <_Balloc>:
 800b514:	b570      	push	{r4, r5, r6, lr}
 800b516:	69c6      	ldr	r6, [r0, #28]
 800b518:	4604      	mov	r4, r0
 800b51a:	460d      	mov	r5, r1
 800b51c:	b976      	cbnz	r6, 800b53c <_Balloc+0x28>
 800b51e:	2010      	movs	r0, #16
 800b520:	f7ff ff44 	bl	800b3ac <malloc>
 800b524:	4602      	mov	r2, r0
 800b526:	61e0      	str	r0, [r4, #28]
 800b528:	b920      	cbnz	r0, 800b534 <_Balloc+0x20>
 800b52a:	4b18      	ldr	r3, [pc, #96]	; (800b58c <_Balloc+0x78>)
 800b52c:	4818      	ldr	r0, [pc, #96]	; (800b590 <_Balloc+0x7c>)
 800b52e:	216b      	movs	r1, #107	; 0x6b
 800b530:	f001 f9b4 	bl	800c89c <__assert_func>
 800b534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b538:	6006      	str	r6, [r0, #0]
 800b53a:	60c6      	str	r6, [r0, #12]
 800b53c:	69e6      	ldr	r6, [r4, #28]
 800b53e:	68f3      	ldr	r3, [r6, #12]
 800b540:	b183      	cbz	r3, 800b564 <_Balloc+0x50>
 800b542:	69e3      	ldr	r3, [r4, #28]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b54a:	b9b8      	cbnz	r0, 800b57c <_Balloc+0x68>
 800b54c:	2101      	movs	r1, #1
 800b54e:	fa01 f605 	lsl.w	r6, r1, r5
 800b552:	1d72      	adds	r2, r6, #5
 800b554:	0092      	lsls	r2, r2, #2
 800b556:	4620      	mov	r0, r4
 800b558:	f001 f9be 	bl	800c8d8 <_calloc_r>
 800b55c:	b160      	cbz	r0, 800b578 <_Balloc+0x64>
 800b55e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b562:	e00e      	b.n	800b582 <_Balloc+0x6e>
 800b564:	2221      	movs	r2, #33	; 0x21
 800b566:	2104      	movs	r1, #4
 800b568:	4620      	mov	r0, r4
 800b56a:	f001 f9b5 	bl	800c8d8 <_calloc_r>
 800b56e:	69e3      	ldr	r3, [r4, #28]
 800b570:	60f0      	str	r0, [r6, #12]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1e4      	bne.n	800b542 <_Balloc+0x2e>
 800b578:	2000      	movs	r0, #0
 800b57a:	bd70      	pop	{r4, r5, r6, pc}
 800b57c:	6802      	ldr	r2, [r0, #0]
 800b57e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b582:	2300      	movs	r3, #0
 800b584:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b588:	e7f7      	b.n	800b57a <_Balloc+0x66>
 800b58a:	bf00      	nop
 800b58c:	0800d03f 	.word	0x0800d03f
 800b590:	0800d0bf 	.word	0x0800d0bf

0800b594 <_Bfree>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	69c6      	ldr	r6, [r0, #28]
 800b598:	4605      	mov	r5, r0
 800b59a:	460c      	mov	r4, r1
 800b59c:	b976      	cbnz	r6, 800b5bc <_Bfree+0x28>
 800b59e:	2010      	movs	r0, #16
 800b5a0:	f7ff ff04 	bl	800b3ac <malloc>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	61e8      	str	r0, [r5, #28]
 800b5a8:	b920      	cbnz	r0, 800b5b4 <_Bfree+0x20>
 800b5aa:	4b09      	ldr	r3, [pc, #36]	; (800b5d0 <_Bfree+0x3c>)
 800b5ac:	4809      	ldr	r0, [pc, #36]	; (800b5d4 <_Bfree+0x40>)
 800b5ae:	218f      	movs	r1, #143	; 0x8f
 800b5b0:	f001 f974 	bl	800c89c <__assert_func>
 800b5b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5b8:	6006      	str	r6, [r0, #0]
 800b5ba:	60c6      	str	r6, [r0, #12]
 800b5bc:	b13c      	cbz	r4, 800b5ce <_Bfree+0x3a>
 800b5be:	69eb      	ldr	r3, [r5, #28]
 800b5c0:	6862      	ldr	r2, [r4, #4]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5c8:	6021      	str	r1, [r4, #0]
 800b5ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5ce:	bd70      	pop	{r4, r5, r6, pc}
 800b5d0:	0800d03f 	.word	0x0800d03f
 800b5d4:	0800d0bf 	.word	0x0800d0bf

0800b5d8 <__multadd>:
 800b5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5dc:	690d      	ldr	r5, [r1, #16]
 800b5de:	4607      	mov	r7, r0
 800b5e0:	460c      	mov	r4, r1
 800b5e2:	461e      	mov	r6, r3
 800b5e4:	f101 0c14 	add.w	ip, r1, #20
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	f8dc 3000 	ldr.w	r3, [ip]
 800b5ee:	b299      	uxth	r1, r3
 800b5f0:	fb02 6101 	mla	r1, r2, r1, r6
 800b5f4:	0c1e      	lsrs	r6, r3, #16
 800b5f6:	0c0b      	lsrs	r3, r1, #16
 800b5f8:	fb02 3306 	mla	r3, r2, r6, r3
 800b5fc:	b289      	uxth	r1, r1
 800b5fe:	3001      	adds	r0, #1
 800b600:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b604:	4285      	cmp	r5, r0
 800b606:	f84c 1b04 	str.w	r1, [ip], #4
 800b60a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b60e:	dcec      	bgt.n	800b5ea <__multadd+0x12>
 800b610:	b30e      	cbz	r6, 800b656 <__multadd+0x7e>
 800b612:	68a3      	ldr	r3, [r4, #8]
 800b614:	42ab      	cmp	r3, r5
 800b616:	dc19      	bgt.n	800b64c <__multadd+0x74>
 800b618:	6861      	ldr	r1, [r4, #4]
 800b61a:	4638      	mov	r0, r7
 800b61c:	3101      	adds	r1, #1
 800b61e:	f7ff ff79 	bl	800b514 <_Balloc>
 800b622:	4680      	mov	r8, r0
 800b624:	b928      	cbnz	r0, 800b632 <__multadd+0x5a>
 800b626:	4602      	mov	r2, r0
 800b628:	4b0c      	ldr	r3, [pc, #48]	; (800b65c <__multadd+0x84>)
 800b62a:	480d      	ldr	r0, [pc, #52]	; (800b660 <__multadd+0x88>)
 800b62c:	21ba      	movs	r1, #186	; 0xba
 800b62e:	f001 f935 	bl	800c89c <__assert_func>
 800b632:	6922      	ldr	r2, [r4, #16]
 800b634:	3202      	adds	r2, #2
 800b636:	f104 010c 	add.w	r1, r4, #12
 800b63a:	0092      	lsls	r2, r2, #2
 800b63c:	300c      	adds	r0, #12
 800b63e:	f7fe ffde 	bl	800a5fe <memcpy>
 800b642:	4621      	mov	r1, r4
 800b644:	4638      	mov	r0, r7
 800b646:	f7ff ffa5 	bl	800b594 <_Bfree>
 800b64a:	4644      	mov	r4, r8
 800b64c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b650:	3501      	adds	r5, #1
 800b652:	615e      	str	r6, [r3, #20]
 800b654:	6125      	str	r5, [r4, #16]
 800b656:	4620      	mov	r0, r4
 800b658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b65c:	0800d0ae 	.word	0x0800d0ae
 800b660:	0800d0bf 	.word	0x0800d0bf

0800b664 <__hi0bits>:
 800b664:	0c03      	lsrs	r3, r0, #16
 800b666:	041b      	lsls	r3, r3, #16
 800b668:	b9d3      	cbnz	r3, 800b6a0 <__hi0bits+0x3c>
 800b66a:	0400      	lsls	r0, r0, #16
 800b66c:	2310      	movs	r3, #16
 800b66e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b672:	bf04      	itt	eq
 800b674:	0200      	lsleq	r0, r0, #8
 800b676:	3308      	addeq	r3, #8
 800b678:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b67c:	bf04      	itt	eq
 800b67e:	0100      	lsleq	r0, r0, #4
 800b680:	3304      	addeq	r3, #4
 800b682:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b686:	bf04      	itt	eq
 800b688:	0080      	lsleq	r0, r0, #2
 800b68a:	3302      	addeq	r3, #2
 800b68c:	2800      	cmp	r0, #0
 800b68e:	db05      	blt.n	800b69c <__hi0bits+0x38>
 800b690:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b694:	f103 0301 	add.w	r3, r3, #1
 800b698:	bf08      	it	eq
 800b69a:	2320      	moveq	r3, #32
 800b69c:	4618      	mov	r0, r3
 800b69e:	4770      	bx	lr
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	e7e4      	b.n	800b66e <__hi0bits+0xa>

0800b6a4 <__lo0bits>:
 800b6a4:	6803      	ldr	r3, [r0, #0]
 800b6a6:	f013 0207 	ands.w	r2, r3, #7
 800b6aa:	d00c      	beq.n	800b6c6 <__lo0bits+0x22>
 800b6ac:	07d9      	lsls	r1, r3, #31
 800b6ae:	d422      	bmi.n	800b6f6 <__lo0bits+0x52>
 800b6b0:	079a      	lsls	r2, r3, #30
 800b6b2:	bf49      	itett	mi
 800b6b4:	085b      	lsrmi	r3, r3, #1
 800b6b6:	089b      	lsrpl	r3, r3, #2
 800b6b8:	6003      	strmi	r3, [r0, #0]
 800b6ba:	2201      	movmi	r2, #1
 800b6bc:	bf5c      	itt	pl
 800b6be:	6003      	strpl	r3, [r0, #0]
 800b6c0:	2202      	movpl	r2, #2
 800b6c2:	4610      	mov	r0, r2
 800b6c4:	4770      	bx	lr
 800b6c6:	b299      	uxth	r1, r3
 800b6c8:	b909      	cbnz	r1, 800b6ce <__lo0bits+0x2a>
 800b6ca:	0c1b      	lsrs	r3, r3, #16
 800b6cc:	2210      	movs	r2, #16
 800b6ce:	b2d9      	uxtb	r1, r3
 800b6d0:	b909      	cbnz	r1, 800b6d6 <__lo0bits+0x32>
 800b6d2:	3208      	adds	r2, #8
 800b6d4:	0a1b      	lsrs	r3, r3, #8
 800b6d6:	0719      	lsls	r1, r3, #28
 800b6d8:	bf04      	itt	eq
 800b6da:	091b      	lsreq	r3, r3, #4
 800b6dc:	3204      	addeq	r2, #4
 800b6de:	0799      	lsls	r1, r3, #30
 800b6e0:	bf04      	itt	eq
 800b6e2:	089b      	lsreq	r3, r3, #2
 800b6e4:	3202      	addeq	r2, #2
 800b6e6:	07d9      	lsls	r1, r3, #31
 800b6e8:	d403      	bmi.n	800b6f2 <__lo0bits+0x4e>
 800b6ea:	085b      	lsrs	r3, r3, #1
 800b6ec:	f102 0201 	add.w	r2, r2, #1
 800b6f0:	d003      	beq.n	800b6fa <__lo0bits+0x56>
 800b6f2:	6003      	str	r3, [r0, #0]
 800b6f4:	e7e5      	b.n	800b6c2 <__lo0bits+0x1e>
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	e7e3      	b.n	800b6c2 <__lo0bits+0x1e>
 800b6fa:	2220      	movs	r2, #32
 800b6fc:	e7e1      	b.n	800b6c2 <__lo0bits+0x1e>
	...

0800b700 <__i2b>:
 800b700:	b510      	push	{r4, lr}
 800b702:	460c      	mov	r4, r1
 800b704:	2101      	movs	r1, #1
 800b706:	f7ff ff05 	bl	800b514 <_Balloc>
 800b70a:	4602      	mov	r2, r0
 800b70c:	b928      	cbnz	r0, 800b71a <__i2b+0x1a>
 800b70e:	4b05      	ldr	r3, [pc, #20]	; (800b724 <__i2b+0x24>)
 800b710:	4805      	ldr	r0, [pc, #20]	; (800b728 <__i2b+0x28>)
 800b712:	f240 1145 	movw	r1, #325	; 0x145
 800b716:	f001 f8c1 	bl	800c89c <__assert_func>
 800b71a:	2301      	movs	r3, #1
 800b71c:	6144      	str	r4, [r0, #20]
 800b71e:	6103      	str	r3, [r0, #16]
 800b720:	bd10      	pop	{r4, pc}
 800b722:	bf00      	nop
 800b724:	0800d0ae 	.word	0x0800d0ae
 800b728:	0800d0bf 	.word	0x0800d0bf

0800b72c <__multiply>:
 800b72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b730:	4691      	mov	r9, r2
 800b732:	690a      	ldr	r2, [r1, #16]
 800b734:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b738:	429a      	cmp	r2, r3
 800b73a:	bfb8      	it	lt
 800b73c:	460b      	movlt	r3, r1
 800b73e:	460c      	mov	r4, r1
 800b740:	bfbc      	itt	lt
 800b742:	464c      	movlt	r4, r9
 800b744:	4699      	movlt	r9, r3
 800b746:	6927      	ldr	r7, [r4, #16]
 800b748:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b74c:	68a3      	ldr	r3, [r4, #8]
 800b74e:	6861      	ldr	r1, [r4, #4]
 800b750:	eb07 060a 	add.w	r6, r7, sl
 800b754:	42b3      	cmp	r3, r6
 800b756:	b085      	sub	sp, #20
 800b758:	bfb8      	it	lt
 800b75a:	3101      	addlt	r1, #1
 800b75c:	f7ff feda 	bl	800b514 <_Balloc>
 800b760:	b930      	cbnz	r0, 800b770 <__multiply+0x44>
 800b762:	4602      	mov	r2, r0
 800b764:	4b44      	ldr	r3, [pc, #272]	; (800b878 <__multiply+0x14c>)
 800b766:	4845      	ldr	r0, [pc, #276]	; (800b87c <__multiply+0x150>)
 800b768:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b76c:	f001 f896 	bl	800c89c <__assert_func>
 800b770:	f100 0514 	add.w	r5, r0, #20
 800b774:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b778:	462b      	mov	r3, r5
 800b77a:	2200      	movs	r2, #0
 800b77c:	4543      	cmp	r3, r8
 800b77e:	d321      	bcc.n	800b7c4 <__multiply+0x98>
 800b780:	f104 0314 	add.w	r3, r4, #20
 800b784:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b788:	f109 0314 	add.w	r3, r9, #20
 800b78c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b790:	9202      	str	r2, [sp, #8]
 800b792:	1b3a      	subs	r2, r7, r4
 800b794:	3a15      	subs	r2, #21
 800b796:	f022 0203 	bic.w	r2, r2, #3
 800b79a:	3204      	adds	r2, #4
 800b79c:	f104 0115 	add.w	r1, r4, #21
 800b7a0:	428f      	cmp	r7, r1
 800b7a2:	bf38      	it	cc
 800b7a4:	2204      	movcc	r2, #4
 800b7a6:	9201      	str	r2, [sp, #4]
 800b7a8:	9a02      	ldr	r2, [sp, #8]
 800b7aa:	9303      	str	r3, [sp, #12]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d80c      	bhi.n	800b7ca <__multiply+0x9e>
 800b7b0:	2e00      	cmp	r6, #0
 800b7b2:	dd03      	ble.n	800b7bc <__multiply+0x90>
 800b7b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d05b      	beq.n	800b874 <__multiply+0x148>
 800b7bc:	6106      	str	r6, [r0, #16]
 800b7be:	b005      	add	sp, #20
 800b7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c4:	f843 2b04 	str.w	r2, [r3], #4
 800b7c8:	e7d8      	b.n	800b77c <__multiply+0x50>
 800b7ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800b7ce:	f1ba 0f00 	cmp.w	sl, #0
 800b7d2:	d024      	beq.n	800b81e <__multiply+0xf2>
 800b7d4:	f104 0e14 	add.w	lr, r4, #20
 800b7d8:	46a9      	mov	r9, r5
 800b7da:	f04f 0c00 	mov.w	ip, #0
 800b7de:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b7e2:	f8d9 1000 	ldr.w	r1, [r9]
 800b7e6:	fa1f fb82 	uxth.w	fp, r2
 800b7ea:	b289      	uxth	r1, r1
 800b7ec:	fb0a 110b 	mla	r1, sl, fp, r1
 800b7f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b7f4:	f8d9 2000 	ldr.w	r2, [r9]
 800b7f8:	4461      	add	r1, ip
 800b7fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b7fe:	fb0a c20b 	mla	r2, sl, fp, ip
 800b802:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b806:	b289      	uxth	r1, r1
 800b808:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b80c:	4577      	cmp	r7, lr
 800b80e:	f849 1b04 	str.w	r1, [r9], #4
 800b812:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b816:	d8e2      	bhi.n	800b7de <__multiply+0xb2>
 800b818:	9a01      	ldr	r2, [sp, #4]
 800b81a:	f845 c002 	str.w	ip, [r5, r2]
 800b81e:	9a03      	ldr	r2, [sp, #12]
 800b820:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b824:	3304      	adds	r3, #4
 800b826:	f1b9 0f00 	cmp.w	r9, #0
 800b82a:	d021      	beq.n	800b870 <__multiply+0x144>
 800b82c:	6829      	ldr	r1, [r5, #0]
 800b82e:	f104 0c14 	add.w	ip, r4, #20
 800b832:	46ae      	mov	lr, r5
 800b834:	f04f 0a00 	mov.w	sl, #0
 800b838:	f8bc b000 	ldrh.w	fp, [ip]
 800b83c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b840:	fb09 220b 	mla	r2, r9, fp, r2
 800b844:	4452      	add	r2, sl
 800b846:	b289      	uxth	r1, r1
 800b848:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b84c:	f84e 1b04 	str.w	r1, [lr], #4
 800b850:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b854:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b858:	f8be 1000 	ldrh.w	r1, [lr]
 800b85c:	fb09 110a 	mla	r1, r9, sl, r1
 800b860:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b864:	4567      	cmp	r7, ip
 800b866:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b86a:	d8e5      	bhi.n	800b838 <__multiply+0x10c>
 800b86c:	9a01      	ldr	r2, [sp, #4]
 800b86e:	50a9      	str	r1, [r5, r2]
 800b870:	3504      	adds	r5, #4
 800b872:	e799      	b.n	800b7a8 <__multiply+0x7c>
 800b874:	3e01      	subs	r6, #1
 800b876:	e79b      	b.n	800b7b0 <__multiply+0x84>
 800b878:	0800d0ae 	.word	0x0800d0ae
 800b87c:	0800d0bf 	.word	0x0800d0bf

0800b880 <__pow5mult>:
 800b880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b884:	4615      	mov	r5, r2
 800b886:	f012 0203 	ands.w	r2, r2, #3
 800b88a:	4606      	mov	r6, r0
 800b88c:	460f      	mov	r7, r1
 800b88e:	d007      	beq.n	800b8a0 <__pow5mult+0x20>
 800b890:	4c25      	ldr	r4, [pc, #148]	; (800b928 <__pow5mult+0xa8>)
 800b892:	3a01      	subs	r2, #1
 800b894:	2300      	movs	r3, #0
 800b896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b89a:	f7ff fe9d 	bl	800b5d8 <__multadd>
 800b89e:	4607      	mov	r7, r0
 800b8a0:	10ad      	asrs	r5, r5, #2
 800b8a2:	d03d      	beq.n	800b920 <__pow5mult+0xa0>
 800b8a4:	69f4      	ldr	r4, [r6, #28]
 800b8a6:	b97c      	cbnz	r4, 800b8c8 <__pow5mult+0x48>
 800b8a8:	2010      	movs	r0, #16
 800b8aa:	f7ff fd7f 	bl	800b3ac <malloc>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	61f0      	str	r0, [r6, #28]
 800b8b2:	b928      	cbnz	r0, 800b8c0 <__pow5mult+0x40>
 800b8b4:	4b1d      	ldr	r3, [pc, #116]	; (800b92c <__pow5mult+0xac>)
 800b8b6:	481e      	ldr	r0, [pc, #120]	; (800b930 <__pow5mult+0xb0>)
 800b8b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b8bc:	f000 ffee 	bl	800c89c <__assert_func>
 800b8c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8c4:	6004      	str	r4, [r0, #0]
 800b8c6:	60c4      	str	r4, [r0, #12]
 800b8c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b8cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8d0:	b94c      	cbnz	r4, 800b8e6 <__pow5mult+0x66>
 800b8d2:	f240 2171 	movw	r1, #625	; 0x271
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	f7ff ff12 	bl	800b700 <__i2b>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	6003      	str	r3, [r0, #0]
 800b8e6:	f04f 0900 	mov.w	r9, #0
 800b8ea:	07eb      	lsls	r3, r5, #31
 800b8ec:	d50a      	bpl.n	800b904 <__pow5mult+0x84>
 800b8ee:	4639      	mov	r1, r7
 800b8f0:	4622      	mov	r2, r4
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	f7ff ff1a 	bl	800b72c <__multiply>
 800b8f8:	4639      	mov	r1, r7
 800b8fa:	4680      	mov	r8, r0
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7ff fe49 	bl	800b594 <_Bfree>
 800b902:	4647      	mov	r7, r8
 800b904:	106d      	asrs	r5, r5, #1
 800b906:	d00b      	beq.n	800b920 <__pow5mult+0xa0>
 800b908:	6820      	ldr	r0, [r4, #0]
 800b90a:	b938      	cbnz	r0, 800b91c <__pow5mult+0x9c>
 800b90c:	4622      	mov	r2, r4
 800b90e:	4621      	mov	r1, r4
 800b910:	4630      	mov	r0, r6
 800b912:	f7ff ff0b 	bl	800b72c <__multiply>
 800b916:	6020      	str	r0, [r4, #0]
 800b918:	f8c0 9000 	str.w	r9, [r0]
 800b91c:	4604      	mov	r4, r0
 800b91e:	e7e4      	b.n	800b8ea <__pow5mult+0x6a>
 800b920:	4638      	mov	r0, r7
 800b922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b926:	bf00      	nop
 800b928:	0800d208 	.word	0x0800d208
 800b92c:	0800d03f 	.word	0x0800d03f
 800b930:	0800d0bf 	.word	0x0800d0bf

0800b934 <__lshift>:
 800b934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b938:	460c      	mov	r4, r1
 800b93a:	6849      	ldr	r1, [r1, #4]
 800b93c:	6923      	ldr	r3, [r4, #16]
 800b93e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b942:	68a3      	ldr	r3, [r4, #8]
 800b944:	4607      	mov	r7, r0
 800b946:	4691      	mov	r9, r2
 800b948:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b94c:	f108 0601 	add.w	r6, r8, #1
 800b950:	42b3      	cmp	r3, r6
 800b952:	db0b      	blt.n	800b96c <__lshift+0x38>
 800b954:	4638      	mov	r0, r7
 800b956:	f7ff fddd 	bl	800b514 <_Balloc>
 800b95a:	4605      	mov	r5, r0
 800b95c:	b948      	cbnz	r0, 800b972 <__lshift+0x3e>
 800b95e:	4602      	mov	r2, r0
 800b960:	4b28      	ldr	r3, [pc, #160]	; (800ba04 <__lshift+0xd0>)
 800b962:	4829      	ldr	r0, [pc, #164]	; (800ba08 <__lshift+0xd4>)
 800b964:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b968:	f000 ff98 	bl	800c89c <__assert_func>
 800b96c:	3101      	adds	r1, #1
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	e7ee      	b.n	800b950 <__lshift+0x1c>
 800b972:	2300      	movs	r3, #0
 800b974:	f100 0114 	add.w	r1, r0, #20
 800b978:	f100 0210 	add.w	r2, r0, #16
 800b97c:	4618      	mov	r0, r3
 800b97e:	4553      	cmp	r3, sl
 800b980:	db33      	blt.n	800b9ea <__lshift+0xb6>
 800b982:	6920      	ldr	r0, [r4, #16]
 800b984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b988:	f104 0314 	add.w	r3, r4, #20
 800b98c:	f019 091f 	ands.w	r9, r9, #31
 800b990:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b994:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b998:	d02b      	beq.n	800b9f2 <__lshift+0xbe>
 800b99a:	f1c9 0e20 	rsb	lr, r9, #32
 800b99e:	468a      	mov	sl, r1
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	6818      	ldr	r0, [r3, #0]
 800b9a4:	fa00 f009 	lsl.w	r0, r0, r9
 800b9a8:	4310      	orrs	r0, r2
 800b9aa:	f84a 0b04 	str.w	r0, [sl], #4
 800b9ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9b2:	459c      	cmp	ip, r3
 800b9b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9b8:	d8f3      	bhi.n	800b9a2 <__lshift+0x6e>
 800b9ba:	ebac 0304 	sub.w	r3, ip, r4
 800b9be:	3b15      	subs	r3, #21
 800b9c0:	f023 0303 	bic.w	r3, r3, #3
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	f104 0015 	add.w	r0, r4, #21
 800b9ca:	4584      	cmp	ip, r0
 800b9cc:	bf38      	it	cc
 800b9ce:	2304      	movcc	r3, #4
 800b9d0:	50ca      	str	r2, [r1, r3]
 800b9d2:	b10a      	cbz	r2, 800b9d8 <__lshift+0xa4>
 800b9d4:	f108 0602 	add.w	r6, r8, #2
 800b9d8:	3e01      	subs	r6, #1
 800b9da:	4638      	mov	r0, r7
 800b9dc:	612e      	str	r6, [r5, #16]
 800b9de:	4621      	mov	r1, r4
 800b9e0:	f7ff fdd8 	bl	800b594 <_Bfree>
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	e7c5      	b.n	800b97e <__lshift+0x4a>
 800b9f2:	3904      	subs	r1, #4
 800b9f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9fc:	459c      	cmp	ip, r3
 800b9fe:	d8f9      	bhi.n	800b9f4 <__lshift+0xc0>
 800ba00:	e7ea      	b.n	800b9d8 <__lshift+0xa4>
 800ba02:	bf00      	nop
 800ba04:	0800d0ae 	.word	0x0800d0ae
 800ba08:	0800d0bf 	.word	0x0800d0bf

0800ba0c <__mcmp>:
 800ba0c:	b530      	push	{r4, r5, lr}
 800ba0e:	6902      	ldr	r2, [r0, #16]
 800ba10:	690c      	ldr	r4, [r1, #16]
 800ba12:	1b12      	subs	r2, r2, r4
 800ba14:	d10e      	bne.n	800ba34 <__mcmp+0x28>
 800ba16:	f100 0314 	add.w	r3, r0, #20
 800ba1a:	3114      	adds	r1, #20
 800ba1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba2c:	42a5      	cmp	r5, r4
 800ba2e:	d003      	beq.n	800ba38 <__mcmp+0x2c>
 800ba30:	d305      	bcc.n	800ba3e <__mcmp+0x32>
 800ba32:	2201      	movs	r2, #1
 800ba34:	4610      	mov	r0, r2
 800ba36:	bd30      	pop	{r4, r5, pc}
 800ba38:	4283      	cmp	r3, r0
 800ba3a:	d3f3      	bcc.n	800ba24 <__mcmp+0x18>
 800ba3c:	e7fa      	b.n	800ba34 <__mcmp+0x28>
 800ba3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba42:	e7f7      	b.n	800ba34 <__mcmp+0x28>

0800ba44 <__mdiff>:
 800ba44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba48:	460c      	mov	r4, r1
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	4620      	mov	r0, r4
 800ba50:	4690      	mov	r8, r2
 800ba52:	f7ff ffdb 	bl	800ba0c <__mcmp>
 800ba56:	1e05      	subs	r5, r0, #0
 800ba58:	d110      	bne.n	800ba7c <__mdiff+0x38>
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	f7ff fd59 	bl	800b514 <_Balloc>
 800ba62:	b930      	cbnz	r0, 800ba72 <__mdiff+0x2e>
 800ba64:	4b3a      	ldr	r3, [pc, #232]	; (800bb50 <__mdiff+0x10c>)
 800ba66:	4602      	mov	r2, r0
 800ba68:	f240 2137 	movw	r1, #567	; 0x237
 800ba6c:	4839      	ldr	r0, [pc, #228]	; (800bb54 <__mdiff+0x110>)
 800ba6e:	f000 ff15 	bl	800c89c <__assert_func>
 800ba72:	2301      	movs	r3, #1
 800ba74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7c:	bfa4      	itt	ge
 800ba7e:	4643      	movge	r3, r8
 800ba80:	46a0      	movge	r8, r4
 800ba82:	4630      	mov	r0, r6
 800ba84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ba88:	bfa6      	itte	ge
 800ba8a:	461c      	movge	r4, r3
 800ba8c:	2500      	movge	r5, #0
 800ba8e:	2501      	movlt	r5, #1
 800ba90:	f7ff fd40 	bl	800b514 <_Balloc>
 800ba94:	b920      	cbnz	r0, 800baa0 <__mdiff+0x5c>
 800ba96:	4b2e      	ldr	r3, [pc, #184]	; (800bb50 <__mdiff+0x10c>)
 800ba98:	4602      	mov	r2, r0
 800ba9a:	f240 2145 	movw	r1, #581	; 0x245
 800ba9e:	e7e5      	b.n	800ba6c <__mdiff+0x28>
 800baa0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800baa4:	6926      	ldr	r6, [r4, #16]
 800baa6:	60c5      	str	r5, [r0, #12]
 800baa8:	f104 0914 	add.w	r9, r4, #20
 800baac:	f108 0514 	add.w	r5, r8, #20
 800bab0:	f100 0e14 	add.w	lr, r0, #20
 800bab4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bab8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800babc:	f108 0210 	add.w	r2, r8, #16
 800bac0:	46f2      	mov	sl, lr
 800bac2:	2100      	movs	r1, #0
 800bac4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bac8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bacc:	fa11 f88b 	uxtah	r8, r1, fp
 800bad0:	b299      	uxth	r1, r3
 800bad2:	0c1b      	lsrs	r3, r3, #16
 800bad4:	eba8 0801 	sub.w	r8, r8, r1
 800bad8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800badc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bae0:	fa1f f888 	uxth.w	r8, r8
 800bae4:	1419      	asrs	r1, r3, #16
 800bae6:	454e      	cmp	r6, r9
 800bae8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800baec:	f84a 3b04 	str.w	r3, [sl], #4
 800baf0:	d8e8      	bhi.n	800bac4 <__mdiff+0x80>
 800baf2:	1b33      	subs	r3, r6, r4
 800baf4:	3b15      	subs	r3, #21
 800baf6:	f023 0303 	bic.w	r3, r3, #3
 800bafa:	3304      	adds	r3, #4
 800bafc:	3415      	adds	r4, #21
 800bafe:	42a6      	cmp	r6, r4
 800bb00:	bf38      	it	cc
 800bb02:	2304      	movcc	r3, #4
 800bb04:	441d      	add	r5, r3
 800bb06:	4473      	add	r3, lr
 800bb08:	469e      	mov	lr, r3
 800bb0a:	462e      	mov	r6, r5
 800bb0c:	4566      	cmp	r6, ip
 800bb0e:	d30e      	bcc.n	800bb2e <__mdiff+0xea>
 800bb10:	f10c 0203 	add.w	r2, ip, #3
 800bb14:	1b52      	subs	r2, r2, r5
 800bb16:	f022 0203 	bic.w	r2, r2, #3
 800bb1a:	3d03      	subs	r5, #3
 800bb1c:	45ac      	cmp	ip, r5
 800bb1e:	bf38      	it	cc
 800bb20:	2200      	movcc	r2, #0
 800bb22:	4413      	add	r3, r2
 800bb24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bb28:	b17a      	cbz	r2, 800bb4a <__mdiff+0x106>
 800bb2a:	6107      	str	r7, [r0, #16]
 800bb2c:	e7a4      	b.n	800ba78 <__mdiff+0x34>
 800bb2e:	f856 8b04 	ldr.w	r8, [r6], #4
 800bb32:	fa11 f288 	uxtah	r2, r1, r8
 800bb36:	1414      	asrs	r4, r2, #16
 800bb38:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb3c:	b292      	uxth	r2, r2
 800bb3e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bb42:	f84e 2b04 	str.w	r2, [lr], #4
 800bb46:	1421      	asrs	r1, r4, #16
 800bb48:	e7e0      	b.n	800bb0c <__mdiff+0xc8>
 800bb4a:	3f01      	subs	r7, #1
 800bb4c:	e7ea      	b.n	800bb24 <__mdiff+0xe0>
 800bb4e:	bf00      	nop
 800bb50:	0800d0ae 	.word	0x0800d0ae
 800bb54:	0800d0bf 	.word	0x0800d0bf

0800bb58 <__d2b>:
 800bb58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb5c:	460f      	mov	r7, r1
 800bb5e:	2101      	movs	r1, #1
 800bb60:	ec59 8b10 	vmov	r8, r9, d0
 800bb64:	4616      	mov	r6, r2
 800bb66:	f7ff fcd5 	bl	800b514 <_Balloc>
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	b930      	cbnz	r0, 800bb7c <__d2b+0x24>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	4b24      	ldr	r3, [pc, #144]	; (800bc04 <__d2b+0xac>)
 800bb72:	4825      	ldr	r0, [pc, #148]	; (800bc08 <__d2b+0xb0>)
 800bb74:	f240 310f 	movw	r1, #783	; 0x30f
 800bb78:	f000 fe90 	bl	800c89c <__assert_func>
 800bb7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb84:	bb2d      	cbnz	r5, 800bbd2 <__d2b+0x7a>
 800bb86:	9301      	str	r3, [sp, #4]
 800bb88:	f1b8 0300 	subs.w	r3, r8, #0
 800bb8c:	d026      	beq.n	800bbdc <__d2b+0x84>
 800bb8e:	4668      	mov	r0, sp
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	f7ff fd87 	bl	800b6a4 <__lo0bits>
 800bb96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb9a:	b1e8      	cbz	r0, 800bbd8 <__d2b+0x80>
 800bb9c:	f1c0 0320 	rsb	r3, r0, #32
 800bba0:	fa02 f303 	lsl.w	r3, r2, r3
 800bba4:	430b      	orrs	r3, r1
 800bba6:	40c2      	lsrs	r2, r0
 800bba8:	6163      	str	r3, [r4, #20]
 800bbaa:	9201      	str	r2, [sp, #4]
 800bbac:	9b01      	ldr	r3, [sp, #4]
 800bbae:	61a3      	str	r3, [r4, #24]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	bf14      	ite	ne
 800bbb4:	2202      	movne	r2, #2
 800bbb6:	2201      	moveq	r2, #1
 800bbb8:	6122      	str	r2, [r4, #16]
 800bbba:	b1bd      	cbz	r5, 800bbec <__d2b+0x94>
 800bbbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bbc0:	4405      	add	r5, r0
 800bbc2:	603d      	str	r5, [r7, #0]
 800bbc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bbc8:	6030      	str	r0, [r6, #0]
 800bbca:	4620      	mov	r0, r4
 800bbcc:	b003      	add	sp, #12
 800bbce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbd6:	e7d6      	b.n	800bb86 <__d2b+0x2e>
 800bbd8:	6161      	str	r1, [r4, #20]
 800bbda:	e7e7      	b.n	800bbac <__d2b+0x54>
 800bbdc:	a801      	add	r0, sp, #4
 800bbde:	f7ff fd61 	bl	800b6a4 <__lo0bits>
 800bbe2:	9b01      	ldr	r3, [sp, #4]
 800bbe4:	6163      	str	r3, [r4, #20]
 800bbe6:	3020      	adds	r0, #32
 800bbe8:	2201      	movs	r2, #1
 800bbea:	e7e5      	b.n	800bbb8 <__d2b+0x60>
 800bbec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bbf4:	6038      	str	r0, [r7, #0]
 800bbf6:	6918      	ldr	r0, [r3, #16]
 800bbf8:	f7ff fd34 	bl	800b664 <__hi0bits>
 800bbfc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc00:	e7e2      	b.n	800bbc8 <__d2b+0x70>
 800bc02:	bf00      	nop
 800bc04:	0800d0ae 	.word	0x0800d0ae
 800bc08:	0800d0bf 	.word	0x0800d0bf

0800bc0c <__ssputs_r>:
 800bc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc10:	688e      	ldr	r6, [r1, #8]
 800bc12:	461f      	mov	r7, r3
 800bc14:	42be      	cmp	r6, r7
 800bc16:	680b      	ldr	r3, [r1, #0]
 800bc18:	4682      	mov	sl, r0
 800bc1a:	460c      	mov	r4, r1
 800bc1c:	4690      	mov	r8, r2
 800bc1e:	d82c      	bhi.n	800bc7a <__ssputs_r+0x6e>
 800bc20:	898a      	ldrh	r2, [r1, #12]
 800bc22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc26:	d026      	beq.n	800bc76 <__ssputs_r+0x6a>
 800bc28:	6965      	ldr	r5, [r4, #20]
 800bc2a:	6909      	ldr	r1, [r1, #16]
 800bc2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc30:	eba3 0901 	sub.w	r9, r3, r1
 800bc34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc38:	1c7b      	adds	r3, r7, #1
 800bc3a:	444b      	add	r3, r9
 800bc3c:	106d      	asrs	r5, r5, #1
 800bc3e:	429d      	cmp	r5, r3
 800bc40:	bf38      	it	cc
 800bc42:	461d      	movcc	r5, r3
 800bc44:	0553      	lsls	r3, r2, #21
 800bc46:	d527      	bpl.n	800bc98 <__ssputs_r+0x8c>
 800bc48:	4629      	mov	r1, r5
 800bc4a:	f7ff fbd7 	bl	800b3fc <_malloc_r>
 800bc4e:	4606      	mov	r6, r0
 800bc50:	b360      	cbz	r0, 800bcac <__ssputs_r+0xa0>
 800bc52:	6921      	ldr	r1, [r4, #16]
 800bc54:	464a      	mov	r2, r9
 800bc56:	f7fe fcd2 	bl	800a5fe <memcpy>
 800bc5a:	89a3      	ldrh	r3, [r4, #12]
 800bc5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc64:	81a3      	strh	r3, [r4, #12]
 800bc66:	6126      	str	r6, [r4, #16]
 800bc68:	6165      	str	r5, [r4, #20]
 800bc6a:	444e      	add	r6, r9
 800bc6c:	eba5 0509 	sub.w	r5, r5, r9
 800bc70:	6026      	str	r6, [r4, #0]
 800bc72:	60a5      	str	r5, [r4, #8]
 800bc74:	463e      	mov	r6, r7
 800bc76:	42be      	cmp	r6, r7
 800bc78:	d900      	bls.n	800bc7c <__ssputs_r+0x70>
 800bc7a:	463e      	mov	r6, r7
 800bc7c:	6820      	ldr	r0, [r4, #0]
 800bc7e:	4632      	mov	r2, r6
 800bc80:	4641      	mov	r1, r8
 800bc82:	f000 fdbe 	bl	800c802 <memmove>
 800bc86:	68a3      	ldr	r3, [r4, #8]
 800bc88:	1b9b      	subs	r3, r3, r6
 800bc8a:	60a3      	str	r3, [r4, #8]
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	4433      	add	r3, r6
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	2000      	movs	r0, #0
 800bc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc98:	462a      	mov	r2, r5
 800bc9a:	f000 fe45 	bl	800c928 <_realloc_r>
 800bc9e:	4606      	mov	r6, r0
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d1e0      	bne.n	800bc66 <__ssputs_r+0x5a>
 800bca4:	6921      	ldr	r1, [r4, #16]
 800bca6:	4650      	mov	r0, sl
 800bca8:	f7ff fb34 	bl	800b314 <_free_r>
 800bcac:	230c      	movs	r3, #12
 800bcae:	f8ca 3000 	str.w	r3, [sl]
 800bcb2:	89a3      	ldrh	r3, [r4, #12]
 800bcb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcb8:	81a3      	strh	r3, [r4, #12]
 800bcba:	f04f 30ff 	mov.w	r0, #4294967295
 800bcbe:	e7e9      	b.n	800bc94 <__ssputs_r+0x88>

0800bcc0 <_svfiprintf_r>:
 800bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc4:	4698      	mov	r8, r3
 800bcc6:	898b      	ldrh	r3, [r1, #12]
 800bcc8:	061b      	lsls	r3, r3, #24
 800bcca:	b09d      	sub	sp, #116	; 0x74
 800bccc:	4607      	mov	r7, r0
 800bcce:	460d      	mov	r5, r1
 800bcd0:	4614      	mov	r4, r2
 800bcd2:	d50e      	bpl.n	800bcf2 <_svfiprintf_r+0x32>
 800bcd4:	690b      	ldr	r3, [r1, #16]
 800bcd6:	b963      	cbnz	r3, 800bcf2 <_svfiprintf_r+0x32>
 800bcd8:	2140      	movs	r1, #64	; 0x40
 800bcda:	f7ff fb8f 	bl	800b3fc <_malloc_r>
 800bcde:	6028      	str	r0, [r5, #0]
 800bce0:	6128      	str	r0, [r5, #16]
 800bce2:	b920      	cbnz	r0, 800bcee <_svfiprintf_r+0x2e>
 800bce4:	230c      	movs	r3, #12
 800bce6:	603b      	str	r3, [r7, #0]
 800bce8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcec:	e0d0      	b.n	800be90 <_svfiprintf_r+0x1d0>
 800bcee:	2340      	movs	r3, #64	; 0x40
 800bcf0:	616b      	str	r3, [r5, #20]
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf6:	2320      	movs	r3, #32
 800bcf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd00:	2330      	movs	r3, #48	; 0x30
 800bd02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bea8 <_svfiprintf_r+0x1e8>
 800bd06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd0a:	f04f 0901 	mov.w	r9, #1
 800bd0e:	4623      	mov	r3, r4
 800bd10:	469a      	mov	sl, r3
 800bd12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd16:	b10a      	cbz	r2, 800bd1c <_svfiprintf_r+0x5c>
 800bd18:	2a25      	cmp	r2, #37	; 0x25
 800bd1a:	d1f9      	bne.n	800bd10 <_svfiprintf_r+0x50>
 800bd1c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd20:	d00b      	beq.n	800bd3a <_svfiprintf_r+0x7a>
 800bd22:	465b      	mov	r3, fp
 800bd24:	4622      	mov	r2, r4
 800bd26:	4629      	mov	r1, r5
 800bd28:	4638      	mov	r0, r7
 800bd2a:	f7ff ff6f 	bl	800bc0c <__ssputs_r>
 800bd2e:	3001      	adds	r0, #1
 800bd30:	f000 80a9 	beq.w	800be86 <_svfiprintf_r+0x1c6>
 800bd34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd36:	445a      	add	r2, fp
 800bd38:	9209      	str	r2, [sp, #36]	; 0x24
 800bd3a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f000 80a1 	beq.w	800be86 <_svfiprintf_r+0x1c6>
 800bd44:	2300      	movs	r3, #0
 800bd46:	f04f 32ff 	mov.w	r2, #4294967295
 800bd4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd4e:	f10a 0a01 	add.w	sl, sl, #1
 800bd52:	9304      	str	r3, [sp, #16]
 800bd54:	9307      	str	r3, [sp, #28]
 800bd56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd5a:	931a      	str	r3, [sp, #104]	; 0x68
 800bd5c:	4654      	mov	r4, sl
 800bd5e:	2205      	movs	r2, #5
 800bd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd64:	4850      	ldr	r0, [pc, #320]	; (800bea8 <_svfiprintf_r+0x1e8>)
 800bd66:	f7f4 fa33 	bl	80001d0 <memchr>
 800bd6a:	9a04      	ldr	r2, [sp, #16]
 800bd6c:	b9d8      	cbnz	r0, 800bda6 <_svfiprintf_r+0xe6>
 800bd6e:	06d0      	lsls	r0, r2, #27
 800bd70:	bf44      	itt	mi
 800bd72:	2320      	movmi	r3, #32
 800bd74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd78:	0711      	lsls	r1, r2, #28
 800bd7a:	bf44      	itt	mi
 800bd7c:	232b      	movmi	r3, #43	; 0x2b
 800bd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd82:	f89a 3000 	ldrb.w	r3, [sl]
 800bd86:	2b2a      	cmp	r3, #42	; 0x2a
 800bd88:	d015      	beq.n	800bdb6 <_svfiprintf_r+0xf6>
 800bd8a:	9a07      	ldr	r2, [sp, #28]
 800bd8c:	4654      	mov	r4, sl
 800bd8e:	2000      	movs	r0, #0
 800bd90:	f04f 0c0a 	mov.w	ip, #10
 800bd94:	4621      	mov	r1, r4
 800bd96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd9a:	3b30      	subs	r3, #48	; 0x30
 800bd9c:	2b09      	cmp	r3, #9
 800bd9e:	d94d      	bls.n	800be3c <_svfiprintf_r+0x17c>
 800bda0:	b1b0      	cbz	r0, 800bdd0 <_svfiprintf_r+0x110>
 800bda2:	9207      	str	r2, [sp, #28]
 800bda4:	e014      	b.n	800bdd0 <_svfiprintf_r+0x110>
 800bda6:	eba0 0308 	sub.w	r3, r0, r8
 800bdaa:	fa09 f303 	lsl.w	r3, r9, r3
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	9304      	str	r3, [sp, #16]
 800bdb2:	46a2      	mov	sl, r4
 800bdb4:	e7d2      	b.n	800bd5c <_svfiprintf_r+0x9c>
 800bdb6:	9b03      	ldr	r3, [sp, #12]
 800bdb8:	1d19      	adds	r1, r3, #4
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	9103      	str	r1, [sp, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	bfbb      	ittet	lt
 800bdc2:	425b      	neglt	r3, r3
 800bdc4:	f042 0202 	orrlt.w	r2, r2, #2
 800bdc8:	9307      	strge	r3, [sp, #28]
 800bdca:	9307      	strlt	r3, [sp, #28]
 800bdcc:	bfb8      	it	lt
 800bdce:	9204      	strlt	r2, [sp, #16]
 800bdd0:	7823      	ldrb	r3, [r4, #0]
 800bdd2:	2b2e      	cmp	r3, #46	; 0x2e
 800bdd4:	d10c      	bne.n	800bdf0 <_svfiprintf_r+0x130>
 800bdd6:	7863      	ldrb	r3, [r4, #1]
 800bdd8:	2b2a      	cmp	r3, #42	; 0x2a
 800bdda:	d134      	bne.n	800be46 <_svfiprintf_r+0x186>
 800bddc:	9b03      	ldr	r3, [sp, #12]
 800bdde:	1d1a      	adds	r2, r3, #4
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	9203      	str	r2, [sp, #12]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	bfb8      	it	lt
 800bde8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdec:	3402      	adds	r4, #2
 800bdee:	9305      	str	r3, [sp, #20]
 800bdf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800beb8 <_svfiprintf_r+0x1f8>
 800bdf4:	7821      	ldrb	r1, [r4, #0]
 800bdf6:	2203      	movs	r2, #3
 800bdf8:	4650      	mov	r0, sl
 800bdfa:	f7f4 f9e9 	bl	80001d0 <memchr>
 800bdfe:	b138      	cbz	r0, 800be10 <_svfiprintf_r+0x150>
 800be00:	9b04      	ldr	r3, [sp, #16]
 800be02:	eba0 000a 	sub.w	r0, r0, sl
 800be06:	2240      	movs	r2, #64	; 0x40
 800be08:	4082      	lsls	r2, r0
 800be0a:	4313      	orrs	r3, r2
 800be0c:	3401      	adds	r4, #1
 800be0e:	9304      	str	r3, [sp, #16]
 800be10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be14:	4825      	ldr	r0, [pc, #148]	; (800beac <_svfiprintf_r+0x1ec>)
 800be16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be1a:	2206      	movs	r2, #6
 800be1c:	f7f4 f9d8 	bl	80001d0 <memchr>
 800be20:	2800      	cmp	r0, #0
 800be22:	d038      	beq.n	800be96 <_svfiprintf_r+0x1d6>
 800be24:	4b22      	ldr	r3, [pc, #136]	; (800beb0 <_svfiprintf_r+0x1f0>)
 800be26:	bb1b      	cbnz	r3, 800be70 <_svfiprintf_r+0x1b0>
 800be28:	9b03      	ldr	r3, [sp, #12]
 800be2a:	3307      	adds	r3, #7
 800be2c:	f023 0307 	bic.w	r3, r3, #7
 800be30:	3308      	adds	r3, #8
 800be32:	9303      	str	r3, [sp, #12]
 800be34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be36:	4433      	add	r3, r6
 800be38:	9309      	str	r3, [sp, #36]	; 0x24
 800be3a:	e768      	b.n	800bd0e <_svfiprintf_r+0x4e>
 800be3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800be40:	460c      	mov	r4, r1
 800be42:	2001      	movs	r0, #1
 800be44:	e7a6      	b.n	800bd94 <_svfiprintf_r+0xd4>
 800be46:	2300      	movs	r3, #0
 800be48:	3401      	adds	r4, #1
 800be4a:	9305      	str	r3, [sp, #20]
 800be4c:	4619      	mov	r1, r3
 800be4e:	f04f 0c0a 	mov.w	ip, #10
 800be52:	4620      	mov	r0, r4
 800be54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be58:	3a30      	subs	r2, #48	; 0x30
 800be5a:	2a09      	cmp	r2, #9
 800be5c:	d903      	bls.n	800be66 <_svfiprintf_r+0x1a6>
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d0c6      	beq.n	800bdf0 <_svfiprintf_r+0x130>
 800be62:	9105      	str	r1, [sp, #20]
 800be64:	e7c4      	b.n	800bdf0 <_svfiprintf_r+0x130>
 800be66:	fb0c 2101 	mla	r1, ip, r1, r2
 800be6a:	4604      	mov	r4, r0
 800be6c:	2301      	movs	r3, #1
 800be6e:	e7f0      	b.n	800be52 <_svfiprintf_r+0x192>
 800be70:	ab03      	add	r3, sp, #12
 800be72:	9300      	str	r3, [sp, #0]
 800be74:	462a      	mov	r2, r5
 800be76:	4b0f      	ldr	r3, [pc, #60]	; (800beb4 <_svfiprintf_r+0x1f4>)
 800be78:	a904      	add	r1, sp, #16
 800be7a:	4638      	mov	r0, r7
 800be7c:	f7fd fd36 	bl	80098ec <_printf_float>
 800be80:	1c42      	adds	r2, r0, #1
 800be82:	4606      	mov	r6, r0
 800be84:	d1d6      	bne.n	800be34 <_svfiprintf_r+0x174>
 800be86:	89ab      	ldrh	r3, [r5, #12]
 800be88:	065b      	lsls	r3, r3, #25
 800be8a:	f53f af2d 	bmi.w	800bce8 <_svfiprintf_r+0x28>
 800be8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be90:	b01d      	add	sp, #116	; 0x74
 800be92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be96:	ab03      	add	r3, sp, #12
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	462a      	mov	r2, r5
 800be9c:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <_svfiprintf_r+0x1f4>)
 800be9e:	a904      	add	r1, sp, #16
 800bea0:	4638      	mov	r0, r7
 800bea2:	f7fd ffc7 	bl	8009e34 <_printf_i>
 800bea6:	e7eb      	b.n	800be80 <_svfiprintf_r+0x1c0>
 800bea8:	0800d214 	.word	0x0800d214
 800beac:	0800d21e 	.word	0x0800d21e
 800beb0:	080098ed 	.word	0x080098ed
 800beb4:	0800bc0d 	.word	0x0800bc0d
 800beb8:	0800d21a 	.word	0x0800d21a

0800bebc <_sungetc_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	1c4b      	adds	r3, r1, #1
 800bec0:	4614      	mov	r4, r2
 800bec2:	d103      	bne.n	800becc <_sungetc_r+0x10>
 800bec4:	f04f 35ff 	mov.w	r5, #4294967295
 800bec8:	4628      	mov	r0, r5
 800beca:	bd38      	pop	{r3, r4, r5, pc}
 800becc:	8993      	ldrh	r3, [r2, #12]
 800bece:	f023 0320 	bic.w	r3, r3, #32
 800bed2:	8193      	strh	r3, [r2, #12]
 800bed4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bed6:	6852      	ldr	r2, [r2, #4]
 800bed8:	b2cd      	uxtb	r5, r1
 800beda:	b18b      	cbz	r3, 800bf00 <_sungetc_r+0x44>
 800bedc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bede:	4293      	cmp	r3, r2
 800bee0:	dd08      	ble.n	800bef4 <_sungetc_r+0x38>
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	1e5a      	subs	r2, r3, #1
 800bee6:	6022      	str	r2, [r4, #0]
 800bee8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800beec:	6863      	ldr	r3, [r4, #4]
 800beee:	3301      	adds	r3, #1
 800bef0:	6063      	str	r3, [r4, #4]
 800bef2:	e7e9      	b.n	800bec8 <_sungetc_r+0xc>
 800bef4:	4621      	mov	r1, r4
 800bef6:	f000 fc4a 	bl	800c78e <__submore>
 800befa:	2800      	cmp	r0, #0
 800befc:	d0f1      	beq.n	800bee2 <_sungetc_r+0x26>
 800befe:	e7e1      	b.n	800bec4 <_sungetc_r+0x8>
 800bf00:	6921      	ldr	r1, [r4, #16]
 800bf02:	6823      	ldr	r3, [r4, #0]
 800bf04:	b151      	cbz	r1, 800bf1c <_sungetc_r+0x60>
 800bf06:	4299      	cmp	r1, r3
 800bf08:	d208      	bcs.n	800bf1c <_sungetc_r+0x60>
 800bf0a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bf0e:	42a9      	cmp	r1, r5
 800bf10:	d104      	bne.n	800bf1c <_sungetc_r+0x60>
 800bf12:	3b01      	subs	r3, #1
 800bf14:	3201      	adds	r2, #1
 800bf16:	6023      	str	r3, [r4, #0]
 800bf18:	6062      	str	r2, [r4, #4]
 800bf1a:	e7d5      	b.n	800bec8 <_sungetc_r+0xc>
 800bf1c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bf20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf24:	6363      	str	r3, [r4, #52]	; 0x34
 800bf26:	2303      	movs	r3, #3
 800bf28:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf2a:	4623      	mov	r3, r4
 800bf2c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bf30:	6023      	str	r3, [r4, #0]
 800bf32:	2301      	movs	r3, #1
 800bf34:	e7dc      	b.n	800bef0 <_sungetc_r+0x34>

0800bf36 <__ssrefill_r>:
 800bf36:	b510      	push	{r4, lr}
 800bf38:	460c      	mov	r4, r1
 800bf3a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bf3c:	b169      	cbz	r1, 800bf5a <__ssrefill_r+0x24>
 800bf3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf42:	4299      	cmp	r1, r3
 800bf44:	d001      	beq.n	800bf4a <__ssrefill_r+0x14>
 800bf46:	f7ff f9e5 	bl	800b314 <_free_r>
 800bf4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf4c:	6063      	str	r3, [r4, #4]
 800bf4e:	2000      	movs	r0, #0
 800bf50:	6360      	str	r0, [r4, #52]	; 0x34
 800bf52:	b113      	cbz	r3, 800bf5a <__ssrefill_r+0x24>
 800bf54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf56:	6023      	str	r3, [r4, #0]
 800bf58:	bd10      	pop	{r4, pc}
 800bf5a:	6923      	ldr	r3, [r4, #16]
 800bf5c:	6023      	str	r3, [r4, #0]
 800bf5e:	2300      	movs	r3, #0
 800bf60:	6063      	str	r3, [r4, #4]
 800bf62:	89a3      	ldrh	r3, [r4, #12]
 800bf64:	f043 0320 	orr.w	r3, r3, #32
 800bf68:	81a3      	strh	r3, [r4, #12]
 800bf6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6e:	e7f3      	b.n	800bf58 <__ssrefill_r+0x22>

0800bf70 <__ssvfiscanf_r>:
 800bf70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf74:	460c      	mov	r4, r1
 800bf76:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bf7a:	2100      	movs	r1, #0
 800bf7c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bf80:	49a6      	ldr	r1, [pc, #664]	; (800c21c <__ssvfiscanf_r+0x2ac>)
 800bf82:	91a0      	str	r1, [sp, #640]	; 0x280
 800bf84:	f10d 0804 	add.w	r8, sp, #4
 800bf88:	49a5      	ldr	r1, [pc, #660]	; (800c220 <__ssvfiscanf_r+0x2b0>)
 800bf8a:	4fa6      	ldr	r7, [pc, #664]	; (800c224 <__ssvfiscanf_r+0x2b4>)
 800bf8c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c228 <__ssvfiscanf_r+0x2b8>
 800bf90:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bf94:	4606      	mov	r6, r0
 800bf96:	91a1      	str	r1, [sp, #644]	; 0x284
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	7813      	ldrb	r3, [r2, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 815a 	beq.w	800c256 <__ssvfiscanf_r+0x2e6>
 800bfa2:	5cf9      	ldrb	r1, [r7, r3]
 800bfa4:	f011 0108 	ands.w	r1, r1, #8
 800bfa8:	f102 0501 	add.w	r5, r2, #1
 800bfac:	d019      	beq.n	800bfe2 <__ssvfiscanf_r+0x72>
 800bfae:	6863      	ldr	r3, [r4, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	dd0f      	ble.n	800bfd4 <__ssvfiscanf_r+0x64>
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	781a      	ldrb	r2, [r3, #0]
 800bfb8:	5cba      	ldrb	r2, [r7, r2]
 800bfba:	0712      	lsls	r2, r2, #28
 800bfbc:	d401      	bmi.n	800bfc2 <__ssvfiscanf_r+0x52>
 800bfbe:	462a      	mov	r2, r5
 800bfc0:	e7eb      	b.n	800bf9a <__ssvfiscanf_r+0x2a>
 800bfc2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bfc4:	3201      	adds	r2, #1
 800bfc6:	9245      	str	r2, [sp, #276]	; 0x114
 800bfc8:	6862      	ldr	r2, [r4, #4]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	3a01      	subs	r2, #1
 800bfce:	6062      	str	r2, [r4, #4]
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	e7ec      	b.n	800bfae <__ssvfiscanf_r+0x3e>
 800bfd4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	4630      	mov	r0, r6
 800bfda:	4798      	blx	r3
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	d0e9      	beq.n	800bfb4 <__ssvfiscanf_r+0x44>
 800bfe0:	e7ed      	b.n	800bfbe <__ssvfiscanf_r+0x4e>
 800bfe2:	2b25      	cmp	r3, #37	; 0x25
 800bfe4:	d012      	beq.n	800c00c <__ssvfiscanf_r+0x9c>
 800bfe6:	469a      	mov	sl, r3
 800bfe8:	6863      	ldr	r3, [r4, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f340 8091 	ble.w	800c112 <__ssvfiscanf_r+0x1a2>
 800bff0:	6822      	ldr	r2, [r4, #0]
 800bff2:	7813      	ldrb	r3, [r2, #0]
 800bff4:	4553      	cmp	r3, sl
 800bff6:	f040 812e 	bne.w	800c256 <__ssvfiscanf_r+0x2e6>
 800bffa:	6863      	ldr	r3, [r4, #4]
 800bffc:	3b01      	subs	r3, #1
 800bffe:	6063      	str	r3, [r4, #4]
 800c000:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c002:	3201      	adds	r2, #1
 800c004:	3301      	adds	r3, #1
 800c006:	6022      	str	r2, [r4, #0]
 800c008:	9345      	str	r3, [sp, #276]	; 0x114
 800c00a:	e7d8      	b.n	800bfbe <__ssvfiscanf_r+0x4e>
 800c00c:	9141      	str	r1, [sp, #260]	; 0x104
 800c00e:	9143      	str	r1, [sp, #268]	; 0x10c
 800c010:	7853      	ldrb	r3, [r2, #1]
 800c012:	2b2a      	cmp	r3, #42	; 0x2a
 800c014:	bf02      	ittt	eq
 800c016:	2310      	moveq	r3, #16
 800c018:	1c95      	addeq	r5, r2, #2
 800c01a:	9341      	streq	r3, [sp, #260]	; 0x104
 800c01c:	220a      	movs	r2, #10
 800c01e:	46aa      	mov	sl, r5
 800c020:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c024:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c028:	2b09      	cmp	r3, #9
 800c02a:	d91c      	bls.n	800c066 <__ssvfiscanf_r+0xf6>
 800c02c:	487e      	ldr	r0, [pc, #504]	; (800c228 <__ssvfiscanf_r+0x2b8>)
 800c02e:	2203      	movs	r2, #3
 800c030:	f7f4 f8ce 	bl	80001d0 <memchr>
 800c034:	b138      	cbz	r0, 800c046 <__ssvfiscanf_r+0xd6>
 800c036:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c038:	eba0 0009 	sub.w	r0, r0, r9
 800c03c:	2301      	movs	r3, #1
 800c03e:	4083      	lsls	r3, r0
 800c040:	4313      	orrs	r3, r2
 800c042:	9341      	str	r3, [sp, #260]	; 0x104
 800c044:	4655      	mov	r5, sl
 800c046:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c04a:	2b78      	cmp	r3, #120	; 0x78
 800c04c:	d806      	bhi.n	800c05c <__ssvfiscanf_r+0xec>
 800c04e:	2b57      	cmp	r3, #87	; 0x57
 800c050:	d810      	bhi.n	800c074 <__ssvfiscanf_r+0x104>
 800c052:	2b25      	cmp	r3, #37	; 0x25
 800c054:	d0c7      	beq.n	800bfe6 <__ssvfiscanf_r+0x76>
 800c056:	d857      	bhi.n	800c108 <__ssvfiscanf_r+0x198>
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d065      	beq.n	800c128 <__ssvfiscanf_r+0x1b8>
 800c05c:	2303      	movs	r3, #3
 800c05e:	9347      	str	r3, [sp, #284]	; 0x11c
 800c060:	230a      	movs	r3, #10
 800c062:	9342      	str	r3, [sp, #264]	; 0x108
 800c064:	e076      	b.n	800c154 <__ssvfiscanf_r+0x1e4>
 800c066:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c068:	fb02 1103 	mla	r1, r2, r3, r1
 800c06c:	3930      	subs	r1, #48	; 0x30
 800c06e:	9143      	str	r1, [sp, #268]	; 0x10c
 800c070:	4655      	mov	r5, sl
 800c072:	e7d4      	b.n	800c01e <__ssvfiscanf_r+0xae>
 800c074:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c078:	2a20      	cmp	r2, #32
 800c07a:	d8ef      	bhi.n	800c05c <__ssvfiscanf_r+0xec>
 800c07c:	a101      	add	r1, pc, #4	; (adr r1, 800c084 <__ssvfiscanf_r+0x114>)
 800c07e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c082:	bf00      	nop
 800c084:	0800c137 	.word	0x0800c137
 800c088:	0800c05d 	.word	0x0800c05d
 800c08c:	0800c05d 	.word	0x0800c05d
 800c090:	0800c195 	.word	0x0800c195
 800c094:	0800c05d 	.word	0x0800c05d
 800c098:	0800c05d 	.word	0x0800c05d
 800c09c:	0800c05d 	.word	0x0800c05d
 800c0a0:	0800c05d 	.word	0x0800c05d
 800c0a4:	0800c05d 	.word	0x0800c05d
 800c0a8:	0800c05d 	.word	0x0800c05d
 800c0ac:	0800c05d 	.word	0x0800c05d
 800c0b0:	0800c1ab 	.word	0x0800c1ab
 800c0b4:	0800c191 	.word	0x0800c191
 800c0b8:	0800c10f 	.word	0x0800c10f
 800c0bc:	0800c10f 	.word	0x0800c10f
 800c0c0:	0800c10f 	.word	0x0800c10f
 800c0c4:	0800c05d 	.word	0x0800c05d
 800c0c8:	0800c14d 	.word	0x0800c14d
 800c0cc:	0800c05d 	.word	0x0800c05d
 800c0d0:	0800c05d 	.word	0x0800c05d
 800c0d4:	0800c05d 	.word	0x0800c05d
 800c0d8:	0800c05d 	.word	0x0800c05d
 800c0dc:	0800c1bb 	.word	0x0800c1bb
 800c0e0:	0800c189 	.word	0x0800c189
 800c0e4:	0800c12f 	.word	0x0800c12f
 800c0e8:	0800c05d 	.word	0x0800c05d
 800c0ec:	0800c05d 	.word	0x0800c05d
 800c0f0:	0800c1b7 	.word	0x0800c1b7
 800c0f4:	0800c05d 	.word	0x0800c05d
 800c0f8:	0800c191 	.word	0x0800c191
 800c0fc:	0800c05d 	.word	0x0800c05d
 800c100:	0800c05d 	.word	0x0800c05d
 800c104:	0800c137 	.word	0x0800c137
 800c108:	3b45      	subs	r3, #69	; 0x45
 800c10a:	2b02      	cmp	r3, #2
 800c10c:	d8a6      	bhi.n	800c05c <__ssvfiscanf_r+0xec>
 800c10e:	2305      	movs	r3, #5
 800c110:	e01f      	b.n	800c152 <__ssvfiscanf_r+0x1e2>
 800c112:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c114:	4621      	mov	r1, r4
 800c116:	4630      	mov	r0, r6
 800c118:	4798      	blx	r3
 800c11a:	2800      	cmp	r0, #0
 800c11c:	f43f af68 	beq.w	800bff0 <__ssvfiscanf_r+0x80>
 800c120:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c122:	2800      	cmp	r0, #0
 800c124:	f040 808d 	bne.w	800c242 <__ssvfiscanf_r+0x2d2>
 800c128:	f04f 30ff 	mov.w	r0, #4294967295
 800c12c:	e08f      	b.n	800c24e <__ssvfiscanf_r+0x2de>
 800c12e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c130:	f042 0220 	orr.w	r2, r2, #32
 800c134:	9241      	str	r2, [sp, #260]	; 0x104
 800c136:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c13c:	9241      	str	r2, [sp, #260]	; 0x104
 800c13e:	2210      	movs	r2, #16
 800c140:	2b6f      	cmp	r3, #111	; 0x6f
 800c142:	9242      	str	r2, [sp, #264]	; 0x108
 800c144:	bf34      	ite	cc
 800c146:	2303      	movcc	r3, #3
 800c148:	2304      	movcs	r3, #4
 800c14a:	e002      	b.n	800c152 <__ssvfiscanf_r+0x1e2>
 800c14c:	2300      	movs	r3, #0
 800c14e:	9342      	str	r3, [sp, #264]	; 0x108
 800c150:	2303      	movs	r3, #3
 800c152:	9347      	str	r3, [sp, #284]	; 0x11c
 800c154:	6863      	ldr	r3, [r4, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	dd3d      	ble.n	800c1d6 <__ssvfiscanf_r+0x266>
 800c15a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c15c:	0659      	lsls	r1, r3, #25
 800c15e:	d404      	bmi.n	800c16a <__ssvfiscanf_r+0x1fa>
 800c160:	6823      	ldr	r3, [r4, #0]
 800c162:	781a      	ldrb	r2, [r3, #0]
 800c164:	5cba      	ldrb	r2, [r7, r2]
 800c166:	0712      	lsls	r2, r2, #28
 800c168:	d43c      	bmi.n	800c1e4 <__ssvfiscanf_r+0x274>
 800c16a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	dc4b      	bgt.n	800c208 <__ssvfiscanf_r+0x298>
 800c170:	466b      	mov	r3, sp
 800c172:	4622      	mov	r2, r4
 800c174:	a941      	add	r1, sp, #260	; 0x104
 800c176:	4630      	mov	r0, r6
 800c178:	f000 f872 	bl	800c260 <_scanf_chars>
 800c17c:	2801      	cmp	r0, #1
 800c17e:	d06a      	beq.n	800c256 <__ssvfiscanf_r+0x2e6>
 800c180:	2802      	cmp	r0, #2
 800c182:	f47f af1c 	bne.w	800bfbe <__ssvfiscanf_r+0x4e>
 800c186:	e7cb      	b.n	800c120 <__ssvfiscanf_r+0x1b0>
 800c188:	2308      	movs	r3, #8
 800c18a:	9342      	str	r3, [sp, #264]	; 0x108
 800c18c:	2304      	movs	r3, #4
 800c18e:	e7e0      	b.n	800c152 <__ssvfiscanf_r+0x1e2>
 800c190:	220a      	movs	r2, #10
 800c192:	e7d5      	b.n	800c140 <__ssvfiscanf_r+0x1d0>
 800c194:	4629      	mov	r1, r5
 800c196:	4640      	mov	r0, r8
 800c198:	f000 fac0 	bl	800c71c <__sccl>
 800c19c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1a2:	9341      	str	r3, [sp, #260]	; 0x104
 800c1a4:	4605      	mov	r5, r0
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e7d3      	b.n	800c152 <__ssvfiscanf_r+0x1e2>
 800c1aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c1ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1b0:	9341      	str	r3, [sp, #260]	; 0x104
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	e7cd      	b.n	800c152 <__ssvfiscanf_r+0x1e2>
 800c1b6:	2302      	movs	r3, #2
 800c1b8:	e7cb      	b.n	800c152 <__ssvfiscanf_r+0x1e2>
 800c1ba:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c1bc:	06c3      	lsls	r3, r0, #27
 800c1be:	f53f aefe 	bmi.w	800bfbe <__ssvfiscanf_r+0x4e>
 800c1c2:	9b00      	ldr	r3, [sp, #0]
 800c1c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c1c6:	1d19      	adds	r1, r3, #4
 800c1c8:	9100      	str	r1, [sp, #0]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	07c0      	lsls	r0, r0, #31
 800c1ce:	bf4c      	ite	mi
 800c1d0:	801a      	strhmi	r2, [r3, #0]
 800c1d2:	601a      	strpl	r2, [r3, #0]
 800c1d4:	e6f3      	b.n	800bfbe <__ssvfiscanf_r+0x4e>
 800c1d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1d8:	4621      	mov	r1, r4
 800c1da:	4630      	mov	r0, r6
 800c1dc:	4798      	blx	r3
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	d0bb      	beq.n	800c15a <__ssvfiscanf_r+0x1ea>
 800c1e2:	e79d      	b.n	800c120 <__ssvfiscanf_r+0x1b0>
 800c1e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c1e6:	3201      	adds	r2, #1
 800c1e8:	9245      	str	r2, [sp, #276]	; 0x114
 800c1ea:	6862      	ldr	r2, [r4, #4]
 800c1ec:	3a01      	subs	r2, #1
 800c1ee:	2a00      	cmp	r2, #0
 800c1f0:	6062      	str	r2, [r4, #4]
 800c1f2:	dd02      	ble.n	800c1fa <__ssvfiscanf_r+0x28a>
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	6023      	str	r3, [r4, #0]
 800c1f8:	e7b2      	b.n	800c160 <__ssvfiscanf_r+0x1f0>
 800c1fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c1fc:	4621      	mov	r1, r4
 800c1fe:	4630      	mov	r0, r6
 800c200:	4798      	blx	r3
 800c202:	2800      	cmp	r0, #0
 800c204:	d0ac      	beq.n	800c160 <__ssvfiscanf_r+0x1f0>
 800c206:	e78b      	b.n	800c120 <__ssvfiscanf_r+0x1b0>
 800c208:	2b04      	cmp	r3, #4
 800c20a:	dc0f      	bgt.n	800c22c <__ssvfiscanf_r+0x2bc>
 800c20c:	466b      	mov	r3, sp
 800c20e:	4622      	mov	r2, r4
 800c210:	a941      	add	r1, sp, #260	; 0x104
 800c212:	4630      	mov	r0, r6
 800c214:	f000 f87e 	bl	800c314 <_scanf_i>
 800c218:	e7b0      	b.n	800c17c <__ssvfiscanf_r+0x20c>
 800c21a:	bf00      	nop
 800c21c:	0800bebd 	.word	0x0800bebd
 800c220:	0800bf37 	.word	0x0800bf37
 800c224:	0800d287 	.word	0x0800d287
 800c228:	0800d21a 	.word	0x0800d21a
 800c22c:	4b0b      	ldr	r3, [pc, #44]	; (800c25c <__ssvfiscanf_r+0x2ec>)
 800c22e:	2b00      	cmp	r3, #0
 800c230:	f43f aec5 	beq.w	800bfbe <__ssvfiscanf_r+0x4e>
 800c234:	466b      	mov	r3, sp
 800c236:	4622      	mov	r2, r4
 800c238:	a941      	add	r1, sp, #260	; 0x104
 800c23a:	4630      	mov	r0, r6
 800c23c:	f3af 8000 	nop.w
 800c240:	e79c      	b.n	800c17c <__ssvfiscanf_r+0x20c>
 800c242:	89a3      	ldrh	r3, [r4, #12]
 800c244:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c248:	bf18      	it	ne
 800c24a:	f04f 30ff 	movne.w	r0, #4294967295
 800c24e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c256:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c258:	e7f9      	b.n	800c24e <__ssvfiscanf_r+0x2de>
 800c25a:	bf00      	nop
 800c25c:	00000000 	.word	0x00000000

0800c260 <_scanf_chars>:
 800c260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c264:	4615      	mov	r5, r2
 800c266:	688a      	ldr	r2, [r1, #8]
 800c268:	4680      	mov	r8, r0
 800c26a:	460c      	mov	r4, r1
 800c26c:	b932      	cbnz	r2, 800c27c <_scanf_chars+0x1c>
 800c26e:	698a      	ldr	r2, [r1, #24]
 800c270:	2a00      	cmp	r2, #0
 800c272:	bf0c      	ite	eq
 800c274:	2201      	moveq	r2, #1
 800c276:	f04f 32ff 	movne.w	r2, #4294967295
 800c27a:	608a      	str	r2, [r1, #8]
 800c27c:	6822      	ldr	r2, [r4, #0]
 800c27e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c310 <_scanf_chars+0xb0>
 800c282:	06d1      	lsls	r1, r2, #27
 800c284:	bf5f      	itttt	pl
 800c286:	681a      	ldrpl	r2, [r3, #0]
 800c288:	1d11      	addpl	r1, r2, #4
 800c28a:	6019      	strpl	r1, [r3, #0]
 800c28c:	6816      	ldrpl	r6, [r2, #0]
 800c28e:	2700      	movs	r7, #0
 800c290:	69a0      	ldr	r0, [r4, #24]
 800c292:	b188      	cbz	r0, 800c2b8 <_scanf_chars+0x58>
 800c294:	2801      	cmp	r0, #1
 800c296:	d107      	bne.n	800c2a8 <_scanf_chars+0x48>
 800c298:	682a      	ldr	r2, [r5, #0]
 800c29a:	7811      	ldrb	r1, [r2, #0]
 800c29c:	6962      	ldr	r2, [r4, #20]
 800c29e:	5c52      	ldrb	r2, [r2, r1]
 800c2a0:	b952      	cbnz	r2, 800c2b8 <_scanf_chars+0x58>
 800c2a2:	2f00      	cmp	r7, #0
 800c2a4:	d031      	beq.n	800c30a <_scanf_chars+0xaa>
 800c2a6:	e022      	b.n	800c2ee <_scanf_chars+0x8e>
 800c2a8:	2802      	cmp	r0, #2
 800c2aa:	d120      	bne.n	800c2ee <_scanf_chars+0x8e>
 800c2ac:	682b      	ldr	r3, [r5, #0]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c2b4:	071b      	lsls	r3, r3, #28
 800c2b6:	d41a      	bmi.n	800c2ee <_scanf_chars+0x8e>
 800c2b8:	6823      	ldr	r3, [r4, #0]
 800c2ba:	06da      	lsls	r2, r3, #27
 800c2bc:	bf5e      	ittt	pl
 800c2be:	682b      	ldrpl	r3, [r5, #0]
 800c2c0:	781b      	ldrbpl	r3, [r3, #0]
 800c2c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c2c6:	682a      	ldr	r2, [r5, #0]
 800c2c8:	686b      	ldr	r3, [r5, #4]
 800c2ca:	3201      	adds	r2, #1
 800c2cc:	602a      	str	r2, [r5, #0]
 800c2ce:	68a2      	ldr	r2, [r4, #8]
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	3a01      	subs	r2, #1
 800c2d4:	606b      	str	r3, [r5, #4]
 800c2d6:	3701      	adds	r7, #1
 800c2d8:	60a2      	str	r2, [r4, #8]
 800c2da:	b142      	cbz	r2, 800c2ee <_scanf_chars+0x8e>
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	dcd7      	bgt.n	800c290 <_scanf_chars+0x30>
 800c2e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	4640      	mov	r0, r8
 800c2e8:	4798      	blx	r3
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d0d0      	beq.n	800c290 <_scanf_chars+0x30>
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	f013 0310 	ands.w	r3, r3, #16
 800c2f4:	d105      	bne.n	800c302 <_scanf_chars+0xa2>
 800c2f6:	68e2      	ldr	r2, [r4, #12]
 800c2f8:	3201      	adds	r2, #1
 800c2fa:	60e2      	str	r2, [r4, #12]
 800c2fc:	69a2      	ldr	r2, [r4, #24]
 800c2fe:	b102      	cbz	r2, 800c302 <_scanf_chars+0xa2>
 800c300:	7033      	strb	r3, [r6, #0]
 800c302:	6923      	ldr	r3, [r4, #16]
 800c304:	443b      	add	r3, r7
 800c306:	6123      	str	r3, [r4, #16]
 800c308:	2000      	movs	r0, #0
 800c30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c30e:	bf00      	nop
 800c310:	0800d287 	.word	0x0800d287

0800c314 <_scanf_i>:
 800c314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c318:	4698      	mov	r8, r3
 800c31a:	4b74      	ldr	r3, [pc, #464]	; (800c4ec <_scanf_i+0x1d8>)
 800c31c:	460c      	mov	r4, r1
 800c31e:	4682      	mov	sl, r0
 800c320:	4616      	mov	r6, r2
 800c322:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c326:	b087      	sub	sp, #28
 800c328:	ab03      	add	r3, sp, #12
 800c32a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c32e:	4b70      	ldr	r3, [pc, #448]	; (800c4f0 <_scanf_i+0x1dc>)
 800c330:	69a1      	ldr	r1, [r4, #24]
 800c332:	4a70      	ldr	r2, [pc, #448]	; (800c4f4 <_scanf_i+0x1e0>)
 800c334:	2903      	cmp	r1, #3
 800c336:	bf18      	it	ne
 800c338:	461a      	movne	r2, r3
 800c33a:	68a3      	ldr	r3, [r4, #8]
 800c33c:	9201      	str	r2, [sp, #4]
 800c33e:	1e5a      	subs	r2, r3, #1
 800c340:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c344:	bf88      	it	hi
 800c346:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c34a:	4627      	mov	r7, r4
 800c34c:	bf82      	ittt	hi
 800c34e:	eb03 0905 	addhi.w	r9, r3, r5
 800c352:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c356:	60a3      	strhi	r3, [r4, #8]
 800c358:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c35c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c360:	bf98      	it	ls
 800c362:	f04f 0900 	movls.w	r9, #0
 800c366:	6023      	str	r3, [r4, #0]
 800c368:	463d      	mov	r5, r7
 800c36a:	f04f 0b00 	mov.w	fp, #0
 800c36e:	6831      	ldr	r1, [r6, #0]
 800c370:	ab03      	add	r3, sp, #12
 800c372:	7809      	ldrb	r1, [r1, #0]
 800c374:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c378:	2202      	movs	r2, #2
 800c37a:	f7f3 ff29 	bl	80001d0 <memchr>
 800c37e:	b328      	cbz	r0, 800c3cc <_scanf_i+0xb8>
 800c380:	f1bb 0f01 	cmp.w	fp, #1
 800c384:	d159      	bne.n	800c43a <_scanf_i+0x126>
 800c386:	6862      	ldr	r2, [r4, #4]
 800c388:	b92a      	cbnz	r2, 800c396 <_scanf_i+0x82>
 800c38a:	6822      	ldr	r2, [r4, #0]
 800c38c:	2308      	movs	r3, #8
 800c38e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c392:	6063      	str	r3, [r4, #4]
 800c394:	6022      	str	r2, [r4, #0]
 800c396:	6822      	ldr	r2, [r4, #0]
 800c398:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c39c:	6022      	str	r2, [r4, #0]
 800c39e:	68a2      	ldr	r2, [r4, #8]
 800c3a0:	1e51      	subs	r1, r2, #1
 800c3a2:	60a1      	str	r1, [r4, #8]
 800c3a4:	b192      	cbz	r2, 800c3cc <_scanf_i+0xb8>
 800c3a6:	6832      	ldr	r2, [r6, #0]
 800c3a8:	1c51      	adds	r1, r2, #1
 800c3aa:	6031      	str	r1, [r6, #0]
 800c3ac:	7812      	ldrb	r2, [r2, #0]
 800c3ae:	f805 2b01 	strb.w	r2, [r5], #1
 800c3b2:	6872      	ldr	r2, [r6, #4]
 800c3b4:	3a01      	subs	r2, #1
 800c3b6:	2a00      	cmp	r2, #0
 800c3b8:	6072      	str	r2, [r6, #4]
 800c3ba:	dc07      	bgt.n	800c3cc <_scanf_i+0xb8>
 800c3bc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c3c0:	4631      	mov	r1, r6
 800c3c2:	4650      	mov	r0, sl
 800c3c4:	4790      	blx	r2
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	f040 8085 	bne.w	800c4d6 <_scanf_i+0x1c2>
 800c3cc:	f10b 0b01 	add.w	fp, fp, #1
 800c3d0:	f1bb 0f03 	cmp.w	fp, #3
 800c3d4:	d1cb      	bne.n	800c36e <_scanf_i+0x5a>
 800c3d6:	6863      	ldr	r3, [r4, #4]
 800c3d8:	b90b      	cbnz	r3, 800c3de <_scanf_i+0xca>
 800c3da:	230a      	movs	r3, #10
 800c3dc:	6063      	str	r3, [r4, #4]
 800c3de:	6863      	ldr	r3, [r4, #4]
 800c3e0:	4945      	ldr	r1, [pc, #276]	; (800c4f8 <_scanf_i+0x1e4>)
 800c3e2:	6960      	ldr	r0, [r4, #20]
 800c3e4:	1ac9      	subs	r1, r1, r3
 800c3e6:	f000 f999 	bl	800c71c <__sccl>
 800c3ea:	f04f 0b00 	mov.w	fp, #0
 800c3ee:	68a3      	ldr	r3, [r4, #8]
 800c3f0:	6822      	ldr	r2, [r4, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d03d      	beq.n	800c472 <_scanf_i+0x15e>
 800c3f6:	6831      	ldr	r1, [r6, #0]
 800c3f8:	6960      	ldr	r0, [r4, #20]
 800c3fa:	f891 c000 	ldrb.w	ip, [r1]
 800c3fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c402:	2800      	cmp	r0, #0
 800c404:	d035      	beq.n	800c472 <_scanf_i+0x15e>
 800c406:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c40a:	d124      	bne.n	800c456 <_scanf_i+0x142>
 800c40c:	0510      	lsls	r0, r2, #20
 800c40e:	d522      	bpl.n	800c456 <_scanf_i+0x142>
 800c410:	f10b 0b01 	add.w	fp, fp, #1
 800c414:	f1b9 0f00 	cmp.w	r9, #0
 800c418:	d003      	beq.n	800c422 <_scanf_i+0x10e>
 800c41a:	3301      	adds	r3, #1
 800c41c:	f109 39ff 	add.w	r9, r9, #4294967295
 800c420:	60a3      	str	r3, [r4, #8]
 800c422:	6873      	ldr	r3, [r6, #4]
 800c424:	3b01      	subs	r3, #1
 800c426:	2b00      	cmp	r3, #0
 800c428:	6073      	str	r3, [r6, #4]
 800c42a:	dd1b      	ble.n	800c464 <_scanf_i+0x150>
 800c42c:	6833      	ldr	r3, [r6, #0]
 800c42e:	3301      	adds	r3, #1
 800c430:	6033      	str	r3, [r6, #0]
 800c432:	68a3      	ldr	r3, [r4, #8]
 800c434:	3b01      	subs	r3, #1
 800c436:	60a3      	str	r3, [r4, #8]
 800c438:	e7d9      	b.n	800c3ee <_scanf_i+0xda>
 800c43a:	f1bb 0f02 	cmp.w	fp, #2
 800c43e:	d1ae      	bne.n	800c39e <_scanf_i+0x8a>
 800c440:	6822      	ldr	r2, [r4, #0]
 800c442:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c446:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c44a:	d1bf      	bne.n	800c3cc <_scanf_i+0xb8>
 800c44c:	2310      	movs	r3, #16
 800c44e:	6063      	str	r3, [r4, #4]
 800c450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c454:	e7a2      	b.n	800c39c <_scanf_i+0x88>
 800c456:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c45a:	6022      	str	r2, [r4, #0]
 800c45c:	780b      	ldrb	r3, [r1, #0]
 800c45e:	f805 3b01 	strb.w	r3, [r5], #1
 800c462:	e7de      	b.n	800c422 <_scanf_i+0x10e>
 800c464:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c468:	4631      	mov	r1, r6
 800c46a:	4650      	mov	r0, sl
 800c46c:	4798      	blx	r3
 800c46e:	2800      	cmp	r0, #0
 800c470:	d0df      	beq.n	800c432 <_scanf_i+0x11e>
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	05d9      	lsls	r1, r3, #23
 800c476:	d50d      	bpl.n	800c494 <_scanf_i+0x180>
 800c478:	42bd      	cmp	r5, r7
 800c47a:	d909      	bls.n	800c490 <_scanf_i+0x17c>
 800c47c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c480:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c484:	4632      	mov	r2, r6
 800c486:	4650      	mov	r0, sl
 800c488:	4798      	blx	r3
 800c48a:	f105 39ff 	add.w	r9, r5, #4294967295
 800c48e:	464d      	mov	r5, r9
 800c490:	42bd      	cmp	r5, r7
 800c492:	d028      	beq.n	800c4e6 <_scanf_i+0x1d2>
 800c494:	6822      	ldr	r2, [r4, #0]
 800c496:	f012 0210 	ands.w	r2, r2, #16
 800c49a:	d113      	bne.n	800c4c4 <_scanf_i+0x1b0>
 800c49c:	702a      	strb	r2, [r5, #0]
 800c49e:	6863      	ldr	r3, [r4, #4]
 800c4a0:	9e01      	ldr	r6, [sp, #4]
 800c4a2:	4639      	mov	r1, r7
 800c4a4:	4650      	mov	r0, sl
 800c4a6:	47b0      	blx	r6
 800c4a8:	f8d8 3000 	ldr.w	r3, [r8]
 800c4ac:	6821      	ldr	r1, [r4, #0]
 800c4ae:	1d1a      	adds	r2, r3, #4
 800c4b0:	f8c8 2000 	str.w	r2, [r8]
 800c4b4:	f011 0f20 	tst.w	r1, #32
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	d00f      	beq.n	800c4dc <_scanf_i+0x1c8>
 800c4bc:	6018      	str	r0, [r3, #0]
 800c4be:	68e3      	ldr	r3, [r4, #12]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	60e3      	str	r3, [r4, #12]
 800c4c4:	6923      	ldr	r3, [r4, #16]
 800c4c6:	1bed      	subs	r5, r5, r7
 800c4c8:	445d      	add	r5, fp
 800c4ca:	442b      	add	r3, r5
 800c4cc:	6123      	str	r3, [r4, #16]
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	b007      	add	sp, #28
 800c4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d6:	f04f 0b00 	mov.w	fp, #0
 800c4da:	e7ca      	b.n	800c472 <_scanf_i+0x15e>
 800c4dc:	07ca      	lsls	r2, r1, #31
 800c4de:	bf4c      	ite	mi
 800c4e0:	8018      	strhmi	r0, [r3, #0]
 800c4e2:	6018      	strpl	r0, [r3, #0]
 800c4e4:	e7eb      	b.n	800c4be <_scanf_i+0x1aa>
 800c4e6:	2001      	movs	r0, #1
 800c4e8:	e7f2      	b.n	800c4d0 <_scanf_i+0x1bc>
 800c4ea:	bf00      	nop
 800c4ec:	0800cfac 	.word	0x0800cfac
 800c4f0:	0800cb75 	.word	0x0800cb75
 800c4f4:	0800ca8d 	.word	0x0800ca8d
 800c4f8:	0800d235 	.word	0x0800d235

0800c4fc <__sflush_r>:
 800c4fc:	898a      	ldrh	r2, [r1, #12]
 800c4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c502:	4605      	mov	r5, r0
 800c504:	0710      	lsls	r0, r2, #28
 800c506:	460c      	mov	r4, r1
 800c508:	d458      	bmi.n	800c5bc <__sflush_r+0xc0>
 800c50a:	684b      	ldr	r3, [r1, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	dc05      	bgt.n	800c51c <__sflush_r+0x20>
 800c510:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c512:	2b00      	cmp	r3, #0
 800c514:	dc02      	bgt.n	800c51c <__sflush_r+0x20>
 800c516:	2000      	movs	r0, #0
 800c518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c51c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c51e:	2e00      	cmp	r6, #0
 800c520:	d0f9      	beq.n	800c516 <__sflush_r+0x1a>
 800c522:	2300      	movs	r3, #0
 800c524:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c528:	682f      	ldr	r7, [r5, #0]
 800c52a:	6a21      	ldr	r1, [r4, #32]
 800c52c:	602b      	str	r3, [r5, #0]
 800c52e:	d032      	beq.n	800c596 <__sflush_r+0x9a>
 800c530:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c532:	89a3      	ldrh	r3, [r4, #12]
 800c534:	075a      	lsls	r2, r3, #29
 800c536:	d505      	bpl.n	800c544 <__sflush_r+0x48>
 800c538:	6863      	ldr	r3, [r4, #4]
 800c53a:	1ac0      	subs	r0, r0, r3
 800c53c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c53e:	b10b      	cbz	r3, 800c544 <__sflush_r+0x48>
 800c540:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c542:	1ac0      	subs	r0, r0, r3
 800c544:	2300      	movs	r3, #0
 800c546:	4602      	mov	r2, r0
 800c548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c54a:	6a21      	ldr	r1, [r4, #32]
 800c54c:	4628      	mov	r0, r5
 800c54e:	47b0      	blx	r6
 800c550:	1c43      	adds	r3, r0, #1
 800c552:	89a3      	ldrh	r3, [r4, #12]
 800c554:	d106      	bne.n	800c564 <__sflush_r+0x68>
 800c556:	6829      	ldr	r1, [r5, #0]
 800c558:	291d      	cmp	r1, #29
 800c55a:	d82b      	bhi.n	800c5b4 <__sflush_r+0xb8>
 800c55c:	4a29      	ldr	r2, [pc, #164]	; (800c604 <__sflush_r+0x108>)
 800c55e:	410a      	asrs	r2, r1
 800c560:	07d6      	lsls	r6, r2, #31
 800c562:	d427      	bmi.n	800c5b4 <__sflush_r+0xb8>
 800c564:	2200      	movs	r2, #0
 800c566:	6062      	str	r2, [r4, #4]
 800c568:	04d9      	lsls	r1, r3, #19
 800c56a:	6922      	ldr	r2, [r4, #16]
 800c56c:	6022      	str	r2, [r4, #0]
 800c56e:	d504      	bpl.n	800c57a <__sflush_r+0x7e>
 800c570:	1c42      	adds	r2, r0, #1
 800c572:	d101      	bne.n	800c578 <__sflush_r+0x7c>
 800c574:	682b      	ldr	r3, [r5, #0]
 800c576:	b903      	cbnz	r3, 800c57a <__sflush_r+0x7e>
 800c578:	6560      	str	r0, [r4, #84]	; 0x54
 800c57a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c57c:	602f      	str	r7, [r5, #0]
 800c57e:	2900      	cmp	r1, #0
 800c580:	d0c9      	beq.n	800c516 <__sflush_r+0x1a>
 800c582:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c586:	4299      	cmp	r1, r3
 800c588:	d002      	beq.n	800c590 <__sflush_r+0x94>
 800c58a:	4628      	mov	r0, r5
 800c58c:	f7fe fec2 	bl	800b314 <_free_r>
 800c590:	2000      	movs	r0, #0
 800c592:	6360      	str	r0, [r4, #52]	; 0x34
 800c594:	e7c0      	b.n	800c518 <__sflush_r+0x1c>
 800c596:	2301      	movs	r3, #1
 800c598:	4628      	mov	r0, r5
 800c59a:	47b0      	blx	r6
 800c59c:	1c41      	adds	r1, r0, #1
 800c59e:	d1c8      	bne.n	800c532 <__sflush_r+0x36>
 800c5a0:	682b      	ldr	r3, [r5, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d0c5      	beq.n	800c532 <__sflush_r+0x36>
 800c5a6:	2b1d      	cmp	r3, #29
 800c5a8:	d001      	beq.n	800c5ae <__sflush_r+0xb2>
 800c5aa:	2b16      	cmp	r3, #22
 800c5ac:	d101      	bne.n	800c5b2 <__sflush_r+0xb6>
 800c5ae:	602f      	str	r7, [r5, #0]
 800c5b0:	e7b1      	b.n	800c516 <__sflush_r+0x1a>
 800c5b2:	89a3      	ldrh	r3, [r4, #12]
 800c5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5b8:	81a3      	strh	r3, [r4, #12]
 800c5ba:	e7ad      	b.n	800c518 <__sflush_r+0x1c>
 800c5bc:	690f      	ldr	r7, [r1, #16]
 800c5be:	2f00      	cmp	r7, #0
 800c5c0:	d0a9      	beq.n	800c516 <__sflush_r+0x1a>
 800c5c2:	0793      	lsls	r3, r2, #30
 800c5c4:	680e      	ldr	r6, [r1, #0]
 800c5c6:	bf08      	it	eq
 800c5c8:	694b      	ldreq	r3, [r1, #20]
 800c5ca:	600f      	str	r7, [r1, #0]
 800c5cc:	bf18      	it	ne
 800c5ce:	2300      	movne	r3, #0
 800c5d0:	eba6 0807 	sub.w	r8, r6, r7
 800c5d4:	608b      	str	r3, [r1, #8]
 800c5d6:	f1b8 0f00 	cmp.w	r8, #0
 800c5da:	dd9c      	ble.n	800c516 <__sflush_r+0x1a>
 800c5dc:	6a21      	ldr	r1, [r4, #32]
 800c5de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c5e0:	4643      	mov	r3, r8
 800c5e2:	463a      	mov	r2, r7
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	47b0      	blx	r6
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	dc06      	bgt.n	800c5fa <__sflush_r+0xfe>
 800c5ec:	89a3      	ldrh	r3, [r4, #12]
 800c5ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5f2:	81a3      	strh	r3, [r4, #12]
 800c5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f8:	e78e      	b.n	800c518 <__sflush_r+0x1c>
 800c5fa:	4407      	add	r7, r0
 800c5fc:	eba8 0800 	sub.w	r8, r8, r0
 800c600:	e7e9      	b.n	800c5d6 <__sflush_r+0xda>
 800c602:	bf00      	nop
 800c604:	dfbffffe 	.word	0xdfbffffe

0800c608 <_fflush_r>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	690b      	ldr	r3, [r1, #16]
 800c60c:	4605      	mov	r5, r0
 800c60e:	460c      	mov	r4, r1
 800c610:	b913      	cbnz	r3, 800c618 <_fflush_r+0x10>
 800c612:	2500      	movs	r5, #0
 800c614:	4628      	mov	r0, r5
 800c616:	bd38      	pop	{r3, r4, r5, pc}
 800c618:	b118      	cbz	r0, 800c622 <_fflush_r+0x1a>
 800c61a:	6a03      	ldr	r3, [r0, #32]
 800c61c:	b90b      	cbnz	r3, 800c622 <_fflush_r+0x1a>
 800c61e:	f7fd fdb7 	bl	800a190 <__sinit>
 800c622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d0f3      	beq.n	800c612 <_fflush_r+0xa>
 800c62a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c62c:	07d0      	lsls	r0, r2, #31
 800c62e:	d404      	bmi.n	800c63a <_fflush_r+0x32>
 800c630:	0599      	lsls	r1, r3, #22
 800c632:	d402      	bmi.n	800c63a <_fflush_r+0x32>
 800c634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c636:	f7fd ffe0 	bl	800a5fa <__retarget_lock_acquire_recursive>
 800c63a:	4628      	mov	r0, r5
 800c63c:	4621      	mov	r1, r4
 800c63e:	f7ff ff5d 	bl	800c4fc <__sflush_r>
 800c642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c644:	07da      	lsls	r2, r3, #31
 800c646:	4605      	mov	r5, r0
 800c648:	d4e4      	bmi.n	800c614 <_fflush_r+0xc>
 800c64a:	89a3      	ldrh	r3, [r4, #12]
 800c64c:	059b      	lsls	r3, r3, #22
 800c64e:	d4e1      	bmi.n	800c614 <_fflush_r+0xc>
 800c650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c652:	f7fd ffd3 	bl	800a5fc <__retarget_lock_release_recursive>
 800c656:	e7dd      	b.n	800c614 <_fflush_r+0xc>

0800c658 <__swhatbuf_r>:
 800c658:	b570      	push	{r4, r5, r6, lr}
 800c65a:	460c      	mov	r4, r1
 800c65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c660:	2900      	cmp	r1, #0
 800c662:	b096      	sub	sp, #88	; 0x58
 800c664:	4615      	mov	r5, r2
 800c666:	461e      	mov	r6, r3
 800c668:	da0d      	bge.n	800c686 <__swhatbuf_r+0x2e>
 800c66a:	89a3      	ldrh	r3, [r4, #12]
 800c66c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c670:	f04f 0100 	mov.w	r1, #0
 800c674:	bf0c      	ite	eq
 800c676:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c67a:	2340      	movne	r3, #64	; 0x40
 800c67c:	2000      	movs	r0, #0
 800c67e:	6031      	str	r1, [r6, #0]
 800c680:	602b      	str	r3, [r5, #0]
 800c682:	b016      	add	sp, #88	; 0x58
 800c684:	bd70      	pop	{r4, r5, r6, pc}
 800c686:	466a      	mov	r2, sp
 800c688:	f000 f8d6 	bl	800c838 <_fstat_r>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	dbec      	blt.n	800c66a <__swhatbuf_r+0x12>
 800c690:	9901      	ldr	r1, [sp, #4]
 800c692:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c696:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c69a:	4259      	negs	r1, r3
 800c69c:	4159      	adcs	r1, r3
 800c69e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6a2:	e7eb      	b.n	800c67c <__swhatbuf_r+0x24>

0800c6a4 <__smakebuf_r>:
 800c6a4:	898b      	ldrh	r3, [r1, #12]
 800c6a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6a8:	079d      	lsls	r5, r3, #30
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	460c      	mov	r4, r1
 800c6ae:	d507      	bpl.n	800c6c0 <__smakebuf_r+0x1c>
 800c6b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6b4:	6023      	str	r3, [r4, #0]
 800c6b6:	6123      	str	r3, [r4, #16]
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	6163      	str	r3, [r4, #20]
 800c6bc:	b002      	add	sp, #8
 800c6be:	bd70      	pop	{r4, r5, r6, pc}
 800c6c0:	ab01      	add	r3, sp, #4
 800c6c2:	466a      	mov	r2, sp
 800c6c4:	f7ff ffc8 	bl	800c658 <__swhatbuf_r>
 800c6c8:	9900      	ldr	r1, [sp, #0]
 800c6ca:	4605      	mov	r5, r0
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	f7fe fe95 	bl	800b3fc <_malloc_r>
 800c6d2:	b948      	cbnz	r0, 800c6e8 <__smakebuf_r+0x44>
 800c6d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6d8:	059a      	lsls	r2, r3, #22
 800c6da:	d4ef      	bmi.n	800c6bc <__smakebuf_r+0x18>
 800c6dc:	f023 0303 	bic.w	r3, r3, #3
 800c6e0:	f043 0302 	orr.w	r3, r3, #2
 800c6e4:	81a3      	strh	r3, [r4, #12]
 800c6e6:	e7e3      	b.n	800c6b0 <__smakebuf_r+0xc>
 800c6e8:	89a3      	ldrh	r3, [r4, #12]
 800c6ea:	6020      	str	r0, [r4, #0]
 800c6ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6f0:	81a3      	strh	r3, [r4, #12]
 800c6f2:	9b00      	ldr	r3, [sp, #0]
 800c6f4:	6163      	str	r3, [r4, #20]
 800c6f6:	9b01      	ldr	r3, [sp, #4]
 800c6f8:	6120      	str	r0, [r4, #16]
 800c6fa:	b15b      	cbz	r3, 800c714 <__smakebuf_r+0x70>
 800c6fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c700:	4630      	mov	r0, r6
 800c702:	f000 f8ab 	bl	800c85c <_isatty_r>
 800c706:	b128      	cbz	r0, 800c714 <__smakebuf_r+0x70>
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	f023 0303 	bic.w	r3, r3, #3
 800c70e:	f043 0301 	orr.w	r3, r3, #1
 800c712:	81a3      	strh	r3, [r4, #12]
 800c714:	89a3      	ldrh	r3, [r4, #12]
 800c716:	431d      	orrs	r5, r3
 800c718:	81a5      	strh	r5, [r4, #12]
 800c71a:	e7cf      	b.n	800c6bc <__smakebuf_r+0x18>

0800c71c <__sccl>:
 800c71c:	b570      	push	{r4, r5, r6, lr}
 800c71e:	780b      	ldrb	r3, [r1, #0]
 800c720:	4604      	mov	r4, r0
 800c722:	2b5e      	cmp	r3, #94	; 0x5e
 800c724:	bf0b      	itete	eq
 800c726:	784b      	ldrbeq	r3, [r1, #1]
 800c728:	1c4a      	addne	r2, r1, #1
 800c72a:	1c8a      	addeq	r2, r1, #2
 800c72c:	2100      	movne	r1, #0
 800c72e:	bf08      	it	eq
 800c730:	2101      	moveq	r1, #1
 800c732:	3801      	subs	r0, #1
 800c734:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c738:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c73c:	42a8      	cmp	r0, r5
 800c73e:	d1fb      	bne.n	800c738 <__sccl+0x1c>
 800c740:	b90b      	cbnz	r3, 800c746 <__sccl+0x2a>
 800c742:	1e50      	subs	r0, r2, #1
 800c744:	bd70      	pop	{r4, r5, r6, pc}
 800c746:	f081 0101 	eor.w	r1, r1, #1
 800c74a:	54e1      	strb	r1, [r4, r3]
 800c74c:	4610      	mov	r0, r2
 800c74e:	4602      	mov	r2, r0
 800c750:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c754:	2d2d      	cmp	r5, #45	; 0x2d
 800c756:	d005      	beq.n	800c764 <__sccl+0x48>
 800c758:	2d5d      	cmp	r5, #93	; 0x5d
 800c75a:	d016      	beq.n	800c78a <__sccl+0x6e>
 800c75c:	2d00      	cmp	r5, #0
 800c75e:	d0f1      	beq.n	800c744 <__sccl+0x28>
 800c760:	462b      	mov	r3, r5
 800c762:	e7f2      	b.n	800c74a <__sccl+0x2e>
 800c764:	7846      	ldrb	r6, [r0, #1]
 800c766:	2e5d      	cmp	r6, #93	; 0x5d
 800c768:	d0fa      	beq.n	800c760 <__sccl+0x44>
 800c76a:	42b3      	cmp	r3, r6
 800c76c:	dcf8      	bgt.n	800c760 <__sccl+0x44>
 800c76e:	3002      	adds	r0, #2
 800c770:	461a      	mov	r2, r3
 800c772:	3201      	adds	r2, #1
 800c774:	4296      	cmp	r6, r2
 800c776:	54a1      	strb	r1, [r4, r2]
 800c778:	dcfb      	bgt.n	800c772 <__sccl+0x56>
 800c77a:	1af2      	subs	r2, r6, r3
 800c77c:	3a01      	subs	r2, #1
 800c77e:	1c5d      	adds	r5, r3, #1
 800c780:	42b3      	cmp	r3, r6
 800c782:	bfa8      	it	ge
 800c784:	2200      	movge	r2, #0
 800c786:	18ab      	adds	r3, r5, r2
 800c788:	e7e1      	b.n	800c74e <__sccl+0x32>
 800c78a:	4610      	mov	r0, r2
 800c78c:	e7da      	b.n	800c744 <__sccl+0x28>

0800c78e <__submore>:
 800c78e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c792:	460c      	mov	r4, r1
 800c794:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c79a:	4299      	cmp	r1, r3
 800c79c:	d11d      	bne.n	800c7da <__submore+0x4c>
 800c79e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c7a2:	f7fe fe2b 	bl	800b3fc <_malloc_r>
 800c7a6:	b918      	cbnz	r0, 800c7b0 <__submore+0x22>
 800c7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7b4:	63a3      	str	r3, [r4, #56]	; 0x38
 800c7b6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c7ba:	6360      	str	r0, [r4, #52]	; 0x34
 800c7bc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c7c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c7c4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c7c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c7cc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c7d0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c7d4:	6020      	str	r0, [r4, #0]
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	e7e8      	b.n	800c7ac <__submore+0x1e>
 800c7da:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c7dc:	0077      	lsls	r7, r6, #1
 800c7de:	463a      	mov	r2, r7
 800c7e0:	f000 f8a2 	bl	800c928 <_realloc_r>
 800c7e4:	4605      	mov	r5, r0
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	d0de      	beq.n	800c7a8 <__submore+0x1a>
 800c7ea:	eb00 0806 	add.w	r8, r0, r6
 800c7ee:	4601      	mov	r1, r0
 800c7f0:	4632      	mov	r2, r6
 800c7f2:	4640      	mov	r0, r8
 800c7f4:	f7fd ff03 	bl	800a5fe <memcpy>
 800c7f8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c7fc:	f8c4 8000 	str.w	r8, [r4]
 800c800:	e7e9      	b.n	800c7d6 <__submore+0x48>

0800c802 <memmove>:
 800c802:	4288      	cmp	r0, r1
 800c804:	b510      	push	{r4, lr}
 800c806:	eb01 0402 	add.w	r4, r1, r2
 800c80a:	d902      	bls.n	800c812 <memmove+0x10>
 800c80c:	4284      	cmp	r4, r0
 800c80e:	4623      	mov	r3, r4
 800c810:	d807      	bhi.n	800c822 <memmove+0x20>
 800c812:	1e43      	subs	r3, r0, #1
 800c814:	42a1      	cmp	r1, r4
 800c816:	d008      	beq.n	800c82a <memmove+0x28>
 800c818:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c81c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c820:	e7f8      	b.n	800c814 <memmove+0x12>
 800c822:	4402      	add	r2, r0
 800c824:	4601      	mov	r1, r0
 800c826:	428a      	cmp	r2, r1
 800c828:	d100      	bne.n	800c82c <memmove+0x2a>
 800c82a:	bd10      	pop	{r4, pc}
 800c82c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c830:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c834:	e7f7      	b.n	800c826 <memmove+0x24>
	...

0800c838 <_fstat_r>:
 800c838:	b538      	push	{r3, r4, r5, lr}
 800c83a:	4d07      	ldr	r5, [pc, #28]	; (800c858 <_fstat_r+0x20>)
 800c83c:	2300      	movs	r3, #0
 800c83e:	4604      	mov	r4, r0
 800c840:	4608      	mov	r0, r1
 800c842:	4611      	mov	r1, r2
 800c844:	602b      	str	r3, [r5, #0]
 800c846:	f7f6 fa14 	bl	8002c72 <_fstat>
 800c84a:	1c43      	adds	r3, r0, #1
 800c84c:	d102      	bne.n	800c854 <_fstat_r+0x1c>
 800c84e:	682b      	ldr	r3, [r5, #0]
 800c850:	b103      	cbz	r3, 800c854 <_fstat_r+0x1c>
 800c852:	6023      	str	r3, [r4, #0]
 800c854:	bd38      	pop	{r3, r4, r5, pc}
 800c856:	bf00      	nop
 800c858:	20001654 	.word	0x20001654

0800c85c <_isatty_r>:
 800c85c:	b538      	push	{r3, r4, r5, lr}
 800c85e:	4d06      	ldr	r5, [pc, #24]	; (800c878 <_isatty_r+0x1c>)
 800c860:	2300      	movs	r3, #0
 800c862:	4604      	mov	r4, r0
 800c864:	4608      	mov	r0, r1
 800c866:	602b      	str	r3, [r5, #0]
 800c868:	f7f6 fa13 	bl	8002c92 <_isatty>
 800c86c:	1c43      	adds	r3, r0, #1
 800c86e:	d102      	bne.n	800c876 <_isatty_r+0x1a>
 800c870:	682b      	ldr	r3, [r5, #0]
 800c872:	b103      	cbz	r3, 800c876 <_isatty_r+0x1a>
 800c874:	6023      	str	r3, [r4, #0]
 800c876:	bd38      	pop	{r3, r4, r5, pc}
 800c878:	20001654 	.word	0x20001654

0800c87c <_sbrk_r>:
 800c87c:	b538      	push	{r3, r4, r5, lr}
 800c87e:	4d06      	ldr	r5, [pc, #24]	; (800c898 <_sbrk_r+0x1c>)
 800c880:	2300      	movs	r3, #0
 800c882:	4604      	mov	r4, r0
 800c884:	4608      	mov	r0, r1
 800c886:	602b      	str	r3, [r5, #0]
 800c888:	f7f6 fa1c 	bl	8002cc4 <_sbrk>
 800c88c:	1c43      	adds	r3, r0, #1
 800c88e:	d102      	bne.n	800c896 <_sbrk_r+0x1a>
 800c890:	682b      	ldr	r3, [r5, #0]
 800c892:	b103      	cbz	r3, 800c896 <_sbrk_r+0x1a>
 800c894:	6023      	str	r3, [r4, #0]
 800c896:	bd38      	pop	{r3, r4, r5, pc}
 800c898:	20001654 	.word	0x20001654

0800c89c <__assert_func>:
 800c89c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c89e:	4614      	mov	r4, r2
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	4b09      	ldr	r3, [pc, #36]	; (800c8c8 <__assert_func+0x2c>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4605      	mov	r5, r0
 800c8a8:	68d8      	ldr	r0, [r3, #12]
 800c8aa:	b14c      	cbz	r4, 800c8c0 <__assert_func+0x24>
 800c8ac:	4b07      	ldr	r3, [pc, #28]	; (800c8cc <__assert_func+0x30>)
 800c8ae:	9100      	str	r1, [sp, #0]
 800c8b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8b4:	4906      	ldr	r1, [pc, #24]	; (800c8d0 <__assert_func+0x34>)
 800c8b6:	462b      	mov	r3, r5
 800c8b8:	f000 f96c 	bl	800cb94 <fiprintf>
 800c8bc:	f000 f97c 	bl	800cbb8 <abort>
 800c8c0:	4b04      	ldr	r3, [pc, #16]	; (800c8d4 <__assert_func+0x38>)
 800c8c2:	461c      	mov	r4, r3
 800c8c4:	e7f3      	b.n	800c8ae <__assert_func+0x12>
 800c8c6:	bf00      	nop
 800c8c8:	20000098 	.word	0x20000098
 800c8cc:	0800d24a 	.word	0x0800d24a
 800c8d0:	0800d257 	.word	0x0800d257
 800c8d4:	0800d285 	.word	0x0800d285

0800c8d8 <_calloc_r>:
 800c8d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8da:	fba1 2402 	umull	r2, r4, r1, r2
 800c8de:	b94c      	cbnz	r4, 800c8f4 <_calloc_r+0x1c>
 800c8e0:	4611      	mov	r1, r2
 800c8e2:	9201      	str	r2, [sp, #4]
 800c8e4:	f7fe fd8a 	bl	800b3fc <_malloc_r>
 800c8e8:	9a01      	ldr	r2, [sp, #4]
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	b930      	cbnz	r0, 800c8fc <_calloc_r+0x24>
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	b003      	add	sp, #12
 800c8f2:	bd30      	pop	{r4, r5, pc}
 800c8f4:	220c      	movs	r2, #12
 800c8f6:	6002      	str	r2, [r0, #0]
 800c8f8:	2500      	movs	r5, #0
 800c8fa:	e7f8      	b.n	800c8ee <_calloc_r+0x16>
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	f7fd fdff 	bl	800a500 <memset>
 800c902:	e7f4      	b.n	800c8ee <_calloc_r+0x16>

0800c904 <__ascii_mbtowc>:
 800c904:	b082      	sub	sp, #8
 800c906:	b901      	cbnz	r1, 800c90a <__ascii_mbtowc+0x6>
 800c908:	a901      	add	r1, sp, #4
 800c90a:	b142      	cbz	r2, 800c91e <__ascii_mbtowc+0x1a>
 800c90c:	b14b      	cbz	r3, 800c922 <__ascii_mbtowc+0x1e>
 800c90e:	7813      	ldrb	r3, [r2, #0]
 800c910:	600b      	str	r3, [r1, #0]
 800c912:	7812      	ldrb	r2, [r2, #0]
 800c914:	1e10      	subs	r0, r2, #0
 800c916:	bf18      	it	ne
 800c918:	2001      	movne	r0, #1
 800c91a:	b002      	add	sp, #8
 800c91c:	4770      	bx	lr
 800c91e:	4610      	mov	r0, r2
 800c920:	e7fb      	b.n	800c91a <__ascii_mbtowc+0x16>
 800c922:	f06f 0001 	mvn.w	r0, #1
 800c926:	e7f8      	b.n	800c91a <__ascii_mbtowc+0x16>

0800c928 <_realloc_r>:
 800c928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c92c:	4680      	mov	r8, r0
 800c92e:	4614      	mov	r4, r2
 800c930:	460e      	mov	r6, r1
 800c932:	b921      	cbnz	r1, 800c93e <_realloc_r+0x16>
 800c934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c938:	4611      	mov	r1, r2
 800c93a:	f7fe bd5f 	b.w	800b3fc <_malloc_r>
 800c93e:	b92a      	cbnz	r2, 800c94c <_realloc_r+0x24>
 800c940:	f7fe fce8 	bl	800b314 <_free_r>
 800c944:	4625      	mov	r5, r4
 800c946:	4628      	mov	r0, r5
 800c948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c94c:	f000 f93b 	bl	800cbc6 <_malloc_usable_size_r>
 800c950:	4284      	cmp	r4, r0
 800c952:	4607      	mov	r7, r0
 800c954:	d802      	bhi.n	800c95c <_realloc_r+0x34>
 800c956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c95a:	d812      	bhi.n	800c982 <_realloc_r+0x5a>
 800c95c:	4621      	mov	r1, r4
 800c95e:	4640      	mov	r0, r8
 800c960:	f7fe fd4c 	bl	800b3fc <_malloc_r>
 800c964:	4605      	mov	r5, r0
 800c966:	2800      	cmp	r0, #0
 800c968:	d0ed      	beq.n	800c946 <_realloc_r+0x1e>
 800c96a:	42bc      	cmp	r4, r7
 800c96c:	4622      	mov	r2, r4
 800c96e:	4631      	mov	r1, r6
 800c970:	bf28      	it	cs
 800c972:	463a      	movcs	r2, r7
 800c974:	f7fd fe43 	bl	800a5fe <memcpy>
 800c978:	4631      	mov	r1, r6
 800c97a:	4640      	mov	r0, r8
 800c97c:	f7fe fcca 	bl	800b314 <_free_r>
 800c980:	e7e1      	b.n	800c946 <_realloc_r+0x1e>
 800c982:	4635      	mov	r5, r6
 800c984:	e7df      	b.n	800c946 <_realloc_r+0x1e>
	...

0800c988 <_strtol_l.constprop.0>:
 800c988:	2b01      	cmp	r3, #1
 800c98a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c98e:	d001      	beq.n	800c994 <_strtol_l.constprop.0+0xc>
 800c990:	2b24      	cmp	r3, #36	; 0x24
 800c992:	d906      	bls.n	800c9a2 <_strtol_l.constprop.0+0x1a>
 800c994:	f7fd fe06 	bl	800a5a4 <__errno>
 800c998:	2316      	movs	r3, #22
 800c99a:	6003      	str	r3, [r0, #0]
 800c99c:	2000      	movs	r0, #0
 800c99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ca88 <_strtol_l.constprop.0+0x100>
 800c9a6:	460d      	mov	r5, r1
 800c9a8:	462e      	mov	r6, r5
 800c9aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9ae:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c9b2:	f017 0708 	ands.w	r7, r7, #8
 800c9b6:	d1f7      	bne.n	800c9a8 <_strtol_l.constprop.0+0x20>
 800c9b8:	2c2d      	cmp	r4, #45	; 0x2d
 800c9ba:	d132      	bne.n	800ca22 <_strtol_l.constprop.0+0x9a>
 800c9bc:	782c      	ldrb	r4, [r5, #0]
 800c9be:	2701      	movs	r7, #1
 800c9c0:	1cb5      	adds	r5, r6, #2
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d05b      	beq.n	800ca7e <_strtol_l.constprop.0+0xf6>
 800c9c6:	2b10      	cmp	r3, #16
 800c9c8:	d109      	bne.n	800c9de <_strtol_l.constprop.0+0x56>
 800c9ca:	2c30      	cmp	r4, #48	; 0x30
 800c9cc:	d107      	bne.n	800c9de <_strtol_l.constprop.0+0x56>
 800c9ce:	782c      	ldrb	r4, [r5, #0]
 800c9d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c9d4:	2c58      	cmp	r4, #88	; 0x58
 800c9d6:	d14d      	bne.n	800ca74 <_strtol_l.constprop.0+0xec>
 800c9d8:	786c      	ldrb	r4, [r5, #1]
 800c9da:	2310      	movs	r3, #16
 800c9dc:	3502      	adds	r5, #2
 800c9de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c9e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c9e6:	f04f 0e00 	mov.w	lr, #0
 800c9ea:	fbb8 f9f3 	udiv	r9, r8, r3
 800c9ee:	4676      	mov	r6, lr
 800c9f0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c9f4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c9f8:	f1bc 0f09 	cmp.w	ip, #9
 800c9fc:	d816      	bhi.n	800ca2c <_strtol_l.constprop.0+0xa4>
 800c9fe:	4664      	mov	r4, ip
 800ca00:	42a3      	cmp	r3, r4
 800ca02:	dd24      	ble.n	800ca4e <_strtol_l.constprop.0+0xc6>
 800ca04:	f1be 3fff 	cmp.w	lr, #4294967295
 800ca08:	d008      	beq.n	800ca1c <_strtol_l.constprop.0+0x94>
 800ca0a:	45b1      	cmp	r9, r6
 800ca0c:	d31c      	bcc.n	800ca48 <_strtol_l.constprop.0+0xc0>
 800ca0e:	d101      	bne.n	800ca14 <_strtol_l.constprop.0+0x8c>
 800ca10:	45a2      	cmp	sl, r4
 800ca12:	db19      	blt.n	800ca48 <_strtol_l.constprop.0+0xc0>
 800ca14:	fb06 4603 	mla	r6, r6, r3, r4
 800ca18:	f04f 0e01 	mov.w	lr, #1
 800ca1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca20:	e7e8      	b.n	800c9f4 <_strtol_l.constprop.0+0x6c>
 800ca22:	2c2b      	cmp	r4, #43	; 0x2b
 800ca24:	bf04      	itt	eq
 800ca26:	782c      	ldrbeq	r4, [r5, #0]
 800ca28:	1cb5      	addeq	r5, r6, #2
 800ca2a:	e7ca      	b.n	800c9c2 <_strtol_l.constprop.0+0x3a>
 800ca2c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ca30:	f1bc 0f19 	cmp.w	ip, #25
 800ca34:	d801      	bhi.n	800ca3a <_strtol_l.constprop.0+0xb2>
 800ca36:	3c37      	subs	r4, #55	; 0x37
 800ca38:	e7e2      	b.n	800ca00 <_strtol_l.constprop.0+0x78>
 800ca3a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ca3e:	f1bc 0f19 	cmp.w	ip, #25
 800ca42:	d804      	bhi.n	800ca4e <_strtol_l.constprop.0+0xc6>
 800ca44:	3c57      	subs	r4, #87	; 0x57
 800ca46:	e7db      	b.n	800ca00 <_strtol_l.constprop.0+0x78>
 800ca48:	f04f 3eff 	mov.w	lr, #4294967295
 800ca4c:	e7e6      	b.n	800ca1c <_strtol_l.constprop.0+0x94>
 800ca4e:	f1be 3fff 	cmp.w	lr, #4294967295
 800ca52:	d105      	bne.n	800ca60 <_strtol_l.constprop.0+0xd8>
 800ca54:	2322      	movs	r3, #34	; 0x22
 800ca56:	6003      	str	r3, [r0, #0]
 800ca58:	4646      	mov	r6, r8
 800ca5a:	b942      	cbnz	r2, 800ca6e <_strtol_l.constprop.0+0xe6>
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	e79e      	b.n	800c99e <_strtol_l.constprop.0+0x16>
 800ca60:	b107      	cbz	r7, 800ca64 <_strtol_l.constprop.0+0xdc>
 800ca62:	4276      	negs	r6, r6
 800ca64:	2a00      	cmp	r2, #0
 800ca66:	d0f9      	beq.n	800ca5c <_strtol_l.constprop.0+0xd4>
 800ca68:	f1be 0f00 	cmp.w	lr, #0
 800ca6c:	d000      	beq.n	800ca70 <_strtol_l.constprop.0+0xe8>
 800ca6e:	1e69      	subs	r1, r5, #1
 800ca70:	6011      	str	r1, [r2, #0]
 800ca72:	e7f3      	b.n	800ca5c <_strtol_l.constprop.0+0xd4>
 800ca74:	2430      	movs	r4, #48	; 0x30
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d1b1      	bne.n	800c9de <_strtol_l.constprop.0+0x56>
 800ca7a:	2308      	movs	r3, #8
 800ca7c:	e7af      	b.n	800c9de <_strtol_l.constprop.0+0x56>
 800ca7e:	2c30      	cmp	r4, #48	; 0x30
 800ca80:	d0a5      	beq.n	800c9ce <_strtol_l.constprop.0+0x46>
 800ca82:	230a      	movs	r3, #10
 800ca84:	e7ab      	b.n	800c9de <_strtol_l.constprop.0+0x56>
 800ca86:	bf00      	nop
 800ca88:	0800d287 	.word	0x0800d287

0800ca8c <_strtol_r>:
 800ca8c:	f7ff bf7c 	b.w	800c988 <_strtol_l.constprop.0>

0800ca90 <_strtoul_l.constprop.0>:
 800ca90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca94:	4f36      	ldr	r7, [pc, #216]	; (800cb70 <_strtoul_l.constprop.0+0xe0>)
 800ca96:	4686      	mov	lr, r0
 800ca98:	460d      	mov	r5, r1
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800caa0:	5d3e      	ldrb	r6, [r7, r4]
 800caa2:	f016 0608 	ands.w	r6, r6, #8
 800caa6:	d1f8      	bne.n	800ca9a <_strtoul_l.constprop.0+0xa>
 800caa8:	2c2d      	cmp	r4, #45	; 0x2d
 800caaa:	d130      	bne.n	800cb0e <_strtoul_l.constprop.0+0x7e>
 800caac:	782c      	ldrb	r4, [r5, #0]
 800caae:	2601      	movs	r6, #1
 800cab0:	1c85      	adds	r5, r0, #2
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d057      	beq.n	800cb66 <_strtoul_l.constprop.0+0xd6>
 800cab6:	2b10      	cmp	r3, #16
 800cab8:	d109      	bne.n	800cace <_strtoul_l.constprop.0+0x3e>
 800caba:	2c30      	cmp	r4, #48	; 0x30
 800cabc:	d107      	bne.n	800cace <_strtoul_l.constprop.0+0x3e>
 800cabe:	7828      	ldrb	r0, [r5, #0]
 800cac0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cac4:	2858      	cmp	r0, #88	; 0x58
 800cac6:	d149      	bne.n	800cb5c <_strtoul_l.constprop.0+0xcc>
 800cac8:	786c      	ldrb	r4, [r5, #1]
 800caca:	2310      	movs	r3, #16
 800cacc:	3502      	adds	r5, #2
 800cace:	f04f 38ff 	mov.w	r8, #4294967295
 800cad2:	2700      	movs	r7, #0
 800cad4:	fbb8 f8f3 	udiv	r8, r8, r3
 800cad8:	fb03 f908 	mul.w	r9, r3, r8
 800cadc:	ea6f 0909 	mvn.w	r9, r9
 800cae0:	4638      	mov	r0, r7
 800cae2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cae6:	f1bc 0f09 	cmp.w	ip, #9
 800caea:	d815      	bhi.n	800cb18 <_strtoul_l.constprop.0+0x88>
 800caec:	4664      	mov	r4, ip
 800caee:	42a3      	cmp	r3, r4
 800caf0:	dd23      	ble.n	800cb3a <_strtoul_l.constprop.0+0xaa>
 800caf2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800caf6:	d007      	beq.n	800cb08 <_strtoul_l.constprop.0+0x78>
 800caf8:	4580      	cmp	r8, r0
 800cafa:	d31b      	bcc.n	800cb34 <_strtoul_l.constprop.0+0xa4>
 800cafc:	d101      	bne.n	800cb02 <_strtoul_l.constprop.0+0x72>
 800cafe:	45a1      	cmp	r9, r4
 800cb00:	db18      	blt.n	800cb34 <_strtoul_l.constprop.0+0xa4>
 800cb02:	fb00 4003 	mla	r0, r0, r3, r4
 800cb06:	2701      	movs	r7, #1
 800cb08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb0c:	e7e9      	b.n	800cae2 <_strtoul_l.constprop.0+0x52>
 800cb0e:	2c2b      	cmp	r4, #43	; 0x2b
 800cb10:	bf04      	itt	eq
 800cb12:	782c      	ldrbeq	r4, [r5, #0]
 800cb14:	1c85      	addeq	r5, r0, #2
 800cb16:	e7cc      	b.n	800cab2 <_strtoul_l.constprop.0+0x22>
 800cb18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cb1c:	f1bc 0f19 	cmp.w	ip, #25
 800cb20:	d801      	bhi.n	800cb26 <_strtoul_l.constprop.0+0x96>
 800cb22:	3c37      	subs	r4, #55	; 0x37
 800cb24:	e7e3      	b.n	800caee <_strtoul_l.constprop.0+0x5e>
 800cb26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cb2a:	f1bc 0f19 	cmp.w	ip, #25
 800cb2e:	d804      	bhi.n	800cb3a <_strtoul_l.constprop.0+0xaa>
 800cb30:	3c57      	subs	r4, #87	; 0x57
 800cb32:	e7dc      	b.n	800caee <_strtoul_l.constprop.0+0x5e>
 800cb34:	f04f 37ff 	mov.w	r7, #4294967295
 800cb38:	e7e6      	b.n	800cb08 <_strtoul_l.constprop.0+0x78>
 800cb3a:	1c7b      	adds	r3, r7, #1
 800cb3c:	d106      	bne.n	800cb4c <_strtoul_l.constprop.0+0xbc>
 800cb3e:	2322      	movs	r3, #34	; 0x22
 800cb40:	f8ce 3000 	str.w	r3, [lr]
 800cb44:	4638      	mov	r0, r7
 800cb46:	b932      	cbnz	r2, 800cb56 <_strtoul_l.constprop.0+0xc6>
 800cb48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb4c:	b106      	cbz	r6, 800cb50 <_strtoul_l.constprop.0+0xc0>
 800cb4e:	4240      	negs	r0, r0
 800cb50:	2a00      	cmp	r2, #0
 800cb52:	d0f9      	beq.n	800cb48 <_strtoul_l.constprop.0+0xb8>
 800cb54:	b107      	cbz	r7, 800cb58 <_strtoul_l.constprop.0+0xc8>
 800cb56:	1e69      	subs	r1, r5, #1
 800cb58:	6011      	str	r1, [r2, #0]
 800cb5a:	e7f5      	b.n	800cb48 <_strtoul_l.constprop.0+0xb8>
 800cb5c:	2430      	movs	r4, #48	; 0x30
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d1b5      	bne.n	800cace <_strtoul_l.constprop.0+0x3e>
 800cb62:	2308      	movs	r3, #8
 800cb64:	e7b3      	b.n	800cace <_strtoul_l.constprop.0+0x3e>
 800cb66:	2c30      	cmp	r4, #48	; 0x30
 800cb68:	d0a9      	beq.n	800cabe <_strtoul_l.constprop.0+0x2e>
 800cb6a:	230a      	movs	r3, #10
 800cb6c:	e7af      	b.n	800cace <_strtoul_l.constprop.0+0x3e>
 800cb6e:	bf00      	nop
 800cb70:	0800d287 	.word	0x0800d287

0800cb74 <_strtoul_r>:
 800cb74:	f7ff bf8c 	b.w	800ca90 <_strtoul_l.constprop.0>

0800cb78 <__ascii_wctomb>:
 800cb78:	b149      	cbz	r1, 800cb8e <__ascii_wctomb+0x16>
 800cb7a:	2aff      	cmp	r2, #255	; 0xff
 800cb7c:	bf85      	ittet	hi
 800cb7e:	238a      	movhi	r3, #138	; 0x8a
 800cb80:	6003      	strhi	r3, [r0, #0]
 800cb82:	700a      	strbls	r2, [r1, #0]
 800cb84:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb88:	bf98      	it	ls
 800cb8a:	2001      	movls	r0, #1
 800cb8c:	4770      	bx	lr
 800cb8e:	4608      	mov	r0, r1
 800cb90:	4770      	bx	lr
	...

0800cb94 <fiprintf>:
 800cb94:	b40e      	push	{r1, r2, r3}
 800cb96:	b503      	push	{r0, r1, lr}
 800cb98:	4601      	mov	r1, r0
 800cb9a:	ab03      	add	r3, sp, #12
 800cb9c:	4805      	ldr	r0, [pc, #20]	; (800cbb4 <fiprintf+0x20>)
 800cb9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cba2:	6800      	ldr	r0, [r0, #0]
 800cba4:	9301      	str	r3, [sp, #4]
 800cba6:	f000 f83f 	bl	800cc28 <_vfiprintf_r>
 800cbaa:	b002      	add	sp, #8
 800cbac:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbb0:	b003      	add	sp, #12
 800cbb2:	4770      	bx	lr
 800cbb4:	20000098 	.word	0x20000098

0800cbb8 <abort>:
 800cbb8:	b508      	push	{r3, lr}
 800cbba:	2006      	movs	r0, #6
 800cbbc:	f000 f976 	bl	800ceac <raise>
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	f7f6 f807 	bl	8002bd4 <_exit>

0800cbc6 <_malloc_usable_size_r>:
 800cbc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbca:	1f18      	subs	r0, r3, #4
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	bfbc      	itt	lt
 800cbd0:	580b      	ldrlt	r3, [r1, r0]
 800cbd2:	18c0      	addlt	r0, r0, r3
 800cbd4:	4770      	bx	lr

0800cbd6 <__sfputc_r>:
 800cbd6:	6893      	ldr	r3, [r2, #8]
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	b410      	push	{r4}
 800cbde:	6093      	str	r3, [r2, #8]
 800cbe0:	da08      	bge.n	800cbf4 <__sfputc_r+0x1e>
 800cbe2:	6994      	ldr	r4, [r2, #24]
 800cbe4:	42a3      	cmp	r3, r4
 800cbe6:	db01      	blt.n	800cbec <__sfputc_r+0x16>
 800cbe8:	290a      	cmp	r1, #10
 800cbea:	d103      	bne.n	800cbf4 <__sfputc_r+0x1e>
 800cbec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbf0:	f7fd bbf1 	b.w	800a3d6 <__swbuf_r>
 800cbf4:	6813      	ldr	r3, [r2, #0]
 800cbf6:	1c58      	adds	r0, r3, #1
 800cbf8:	6010      	str	r0, [r2, #0]
 800cbfa:	7019      	strb	r1, [r3, #0]
 800cbfc:	4608      	mov	r0, r1
 800cbfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <__sfputs_r>:
 800cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc06:	4606      	mov	r6, r0
 800cc08:	460f      	mov	r7, r1
 800cc0a:	4614      	mov	r4, r2
 800cc0c:	18d5      	adds	r5, r2, r3
 800cc0e:	42ac      	cmp	r4, r5
 800cc10:	d101      	bne.n	800cc16 <__sfputs_r+0x12>
 800cc12:	2000      	movs	r0, #0
 800cc14:	e007      	b.n	800cc26 <__sfputs_r+0x22>
 800cc16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc1a:	463a      	mov	r2, r7
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f7ff ffda 	bl	800cbd6 <__sfputc_r>
 800cc22:	1c43      	adds	r3, r0, #1
 800cc24:	d1f3      	bne.n	800cc0e <__sfputs_r+0xa>
 800cc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc28 <_vfiprintf_r>:
 800cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc2c:	460d      	mov	r5, r1
 800cc2e:	b09d      	sub	sp, #116	; 0x74
 800cc30:	4614      	mov	r4, r2
 800cc32:	4698      	mov	r8, r3
 800cc34:	4606      	mov	r6, r0
 800cc36:	b118      	cbz	r0, 800cc40 <_vfiprintf_r+0x18>
 800cc38:	6a03      	ldr	r3, [r0, #32]
 800cc3a:	b90b      	cbnz	r3, 800cc40 <_vfiprintf_r+0x18>
 800cc3c:	f7fd faa8 	bl	800a190 <__sinit>
 800cc40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc42:	07d9      	lsls	r1, r3, #31
 800cc44:	d405      	bmi.n	800cc52 <_vfiprintf_r+0x2a>
 800cc46:	89ab      	ldrh	r3, [r5, #12]
 800cc48:	059a      	lsls	r2, r3, #22
 800cc4a:	d402      	bmi.n	800cc52 <_vfiprintf_r+0x2a>
 800cc4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc4e:	f7fd fcd4 	bl	800a5fa <__retarget_lock_acquire_recursive>
 800cc52:	89ab      	ldrh	r3, [r5, #12]
 800cc54:	071b      	lsls	r3, r3, #28
 800cc56:	d501      	bpl.n	800cc5c <_vfiprintf_r+0x34>
 800cc58:	692b      	ldr	r3, [r5, #16]
 800cc5a:	b99b      	cbnz	r3, 800cc84 <_vfiprintf_r+0x5c>
 800cc5c:	4629      	mov	r1, r5
 800cc5e:	4630      	mov	r0, r6
 800cc60:	f7fd fbf6 	bl	800a450 <__swsetup_r>
 800cc64:	b170      	cbz	r0, 800cc84 <_vfiprintf_r+0x5c>
 800cc66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc68:	07dc      	lsls	r4, r3, #31
 800cc6a:	d504      	bpl.n	800cc76 <_vfiprintf_r+0x4e>
 800cc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc70:	b01d      	add	sp, #116	; 0x74
 800cc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc76:	89ab      	ldrh	r3, [r5, #12]
 800cc78:	0598      	lsls	r0, r3, #22
 800cc7a:	d4f7      	bmi.n	800cc6c <_vfiprintf_r+0x44>
 800cc7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc7e:	f7fd fcbd 	bl	800a5fc <__retarget_lock_release_recursive>
 800cc82:	e7f3      	b.n	800cc6c <_vfiprintf_r+0x44>
 800cc84:	2300      	movs	r3, #0
 800cc86:	9309      	str	r3, [sp, #36]	; 0x24
 800cc88:	2320      	movs	r3, #32
 800cc8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc92:	2330      	movs	r3, #48	; 0x30
 800cc94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ce48 <_vfiprintf_r+0x220>
 800cc98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc9c:	f04f 0901 	mov.w	r9, #1
 800cca0:	4623      	mov	r3, r4
 800cca2:	469a      	mov	sl, r3
 800cca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cca8:	b10a      	cbz	r2, 800ccae <_vfiprintf_r+0x86>
 800ccaa:	2a25      	cmp	r2, #37	; 0x25
 800ccac:	d1f9      	bne.n	800cca2 <_vfiprintf_r+0x7a>
 800ccae:	ebba 0b04 	subs.w	fp, sl, r4
 800ccb2:	d00b      	beq.n	800cccc <_vfiprintf_r+0xa4>
 800ccb4:	465b      	mov	r3, fp
 800ccb6:	4622      	mov	r2, r4
 800ccb8:	4629      	mov	r1, r5
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f7ff ffa2 	bl	800cc04 <__sfputs_r>
 800ccc0:	3001      	adds	r0, #1
 800ccc2:	f000 80a9 	beq.w	800ce18 <_vfiprintf_r+0x1f0>
 800ccc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccc8:	445a      	add	r2, fp
 800ccca:	9209      	str	r2, [sp, #36]	; 0x24
 800cccc:	f89a 3000 	ldrb.w	r3, [sl]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f000 80a1 	beq.w	800ce18 <_vfiprintf_r+0x1f0>
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	f04f 32ff 	mov.w	r2, #4294967295
 800ccdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cce0:	f10a 0a01 	add.w	sl, sl, #1
 800cce4:	9304      	str	r3, [sp, #16]
 800cce6:	9307      	str	r3, [sp, #28]
 800cce8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccec:	931a      	str	r3, [sp, #104]	; 0x68
 800ccee:	4654      	mov	r4, sl
 800ccf0:	2205      	movs	r2, #5
 800ccf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccf6:	4854      	ldr	r0, [pc, #336]	; (800ce48 <_vfiprintf_r+0x220>)
 800ccf8:	f7f3 fa6a 	bl	80001d0 <memchr>
 800ccfc:	9a04      	ldr	r2, [sp, #16]
 800ccfe:	b9d8      	cbnz	r0, 800cd38 <_vfiprintf_r+0x110>
 800cd00:	06d1      	lsls	r1, r2, #27
 800cd02:	bf44      	itt	mi
 800cd04:	2320      	movmi	r3, #32
 800cd06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd0a:	0713      	lsls	r3, r2, #28
 800cd0c:	bf44      	itt	mi
 800cd0e:	232b      	movmi	r3, #43	; 0x2b
 800cd10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd14:	f89a 3000 	ldrb.w	r3, [sl]
 800cd18:	2b2a      	cmp	r3, #42	; 0x2a
 800cd1a:	d015      	beq.n	800cd48 <_vfiprintf_r+0x120>
 800cd1c:	9a07      	ldr	r2, [sp, #28]
 800cd1e:	4654      	mov	r4, sl
 800cd20:	2000      	movs	r0, #0
 800cd22:	f04f 0c0a 	mov.w	ip, #10
 800cd26:	4621      	mov	r1, r4
 800cd28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd2c:	3b30      	subs	r3, #48	; 0x30
 800cd2e:	2b09      	cmp	r3, #9
 800cd30:	d94d      	bls.n	800cdce <_vfiprintf_r+0x1a6>
 800cd32:	b1b0      	cbz	r0, 800cd62 <_vfiprintf_r+0x13a>
 800cd34:	9207      	str	r2, [sp, #28]
 800cd36:	e014      	b.n	800cd62 <_vfiprintf_r+0x13a>
 800cd38:	eba0 0308 	sub.w	r3, r0, r8
 800cd3c:	fa09 f303 	lsl.w	r3, r9, r3
 800cd40:	4313      	orrs	r3, r2
 800cd42:	9304      	str	r3, [sp, #16]
 800cd44:	46a2      	mov	sl, r4
 800cd46:	e7d2      	b.n	800ccee <_vfiprintf_r+0xc6>
 800cd48:	9b03      	ldr	r3, [sp, #12]
 800cd4a:	1d19      	adds	r1, r3, #4
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	9103      	str	r1, [sp, #12]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	bfbb      	ittet	lt
 800cd54:	425b      	neglt	r3, r3
 800cd56:	f042 0202 	orrlt.w	r2, r2, #2
 800cd5a:	9307      	strge	r3, [sp, #28]
 800cd5c:	9307      	strlt	r3, [sp, #28]
 800cd5e:	bfb8      	it	lt
 800cd60:	9204      	strlt	r2, [sp, #16]
 800cd62:	7823      	ldrb	r3, [r4, #0]
 800cd64:	2b2e      	cmp	r3, #46	; 0x2e
 800cd66:	d10c      	bne.n	800cd82 <_vfiprintf_r+0x15a>
 800cd68:	7863      	ldrb	r3, [r4, #1]
 800cd6a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd6c:	d134      	bne.n	800cdd8 <_vfiprintf_r+0x1b0>
 800cd6e:	9b03      	ldr	r3, [sp, #12]
 800cd70:	1d1a      	adds	r2, r3, #4
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	9203      	str	r2, [sp, #12]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	bfb8      	it	lt
 800cd7a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd7e:	3402      	adds	r4, #2
 800cd80:	9305      	str	r3, [sp, #20]
 800cd82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ce58 <_vfiprintf_r+0x230>
 800cd86:	7821      	ldrb	r1, [r4, #0]
 800cd88:	2203      	movs	r2, #3
 800cd8a:	4650      	mov	r0, sl
 800cd8c:	f7f3 fa20 	bl	80001d0 <memchr>
 800cd90:	b138      	cbz	r0, 800cda2 <_vfiprintf_r+0x17a>
 800cd92:	9b04      	ldr	r3, [sp, #16]
 800cd94:	eba0 000a 	sub.w	r0, r0, sl
 800cd98:	2240      	movs	r2, #64	; 0x40
 800cd9a:	4082      	lsls	r2, r0
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	3401      	adds	r4, #1
 800cda0:	9304      	str	r3, [sp, #16]
 800cda2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cda6:	4829      	ldr	r0, [pc, #164]	; (800ce4c <_vfiprintf_r+0x224>)
 800cda8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdac:	2206      	movs	r2, #6
 800cdae:	f7f3 fa0f 	bl	80001d0 <memchr>
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	d03f      	beq.n	800ce36 <_vfiprintf_r+0x20e>
 800cdb6:	4b26      	ldr	r3, [pc, #152]	; (800ce50 <_vfiprintf_r+0x228>)
 800cdb8:	bb1b      	cbnz	r3, 800ce02 <_vfiprintf_r+0x1da>
 800cdba:	9b03      	ldr	r3, [sp, #12]
 800cdbc:	3307      	adds	r3, #7
 800cdbe:	f023 0307 	bic.w	r3, r3, #7
 800cdc2:	3308      	adds	r3, #8
 800cdc4:	9303      	str	r3, [sp, #12]
 800cdc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdc8:	443b      	add	r3, r7
 800cdca:	9309      	str	r3, [sp, #36]	; 0x24
 800cdcc:	e768      	b.n	800cca0 <_vfiprintf_r+0x78>
 800cdce:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdd2:	460c      	mov	r4, r1
 800cdd4:	2001      	movs	r0, #1
 800cdd6:	e7a6      	b.n	800cd26 <_vfiprintf_r+0xfe>
 800cdd8:	2300      	movs	r3, #0
 800cdda:	3401      	adds	r4, #1
 800cddc:	9305      	str	r3, [sp, #20]
 800cdde:	4619      	mov	r1, r3
 800cde0:	f04f 0c0a 	mov.w	ip, #10
 800cde4:	4620      	mov	r0, r4
 800cde6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdea:	3a30      	subs	r2, #48	; 0x30
 800cdec:	2a09      	cmp	r2, #9
 800cdee:	d903      	bls.n	800cdf8 <_vfiprintf_r+0x1d0>
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d0c6      	beq.n	800cd82 <_vfiprintf_r+0x15a>
 800cdf4:	9105      	str	r1, [sp, #20]
 800cdf6:	e7c4      	b.n	800cd82 <_vfiprintf_r+0x15a>
 800cdf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e7f0      	b.n	800cde4 <_vfiprintf_r+0x1bc>
 800ce02:	ab03      	add	r3, sp, #12
 800ce04:	9300      	str	r3, [sp, #0]
 800ce06:	462a      	mov	r2, r5
 800ce08:	4b12      	ldr	r3, [pc, #72]	; (800ce54 <_vfiprintf_r+0x22c>)
 800ce0a:	a904      	add	r1, sp, #16
 800ce0c:	4630      	mov	r0, r6
 800ce0e:	f7fc fd6d 	bl	80098ec <_printf_float>
 800ce12:	4607      	mov	r7, r0
 800ce14:	1c78      	adds	r0, r7, #1
 800ce16:	d1d6      	bne.n	800cdc6 <_vfiprintf_r+0x19e>
 800ce18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce1a:	07d9      	lsls	r1, r3, #31
 800ce1c:	d405      	bmi.n	800ce2a <_vfiprintf_r+0x202>
 800ce1e:	89ab      	ldrh	r3, [r5, #12]
 800ce20:	059a      	lsls	r2, r3, #22
 800ce22:	d402      	bmi.n	800ce2a <_vfiprintf_r+0x202>
 800ce24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce26:	f7fd fbe9 	bl	800a5fc <__retarget_lock_release_recursive>
 800ce2a:	89ab      	ldrh	r3, [r5, #12]
 800ce2c:	065b      	lsls	r3, r3, #25
 800ce2e:	f53f af1d 	bmi.w	800cc6c <_vfiprintf_r+0x44>
 800ce32:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce34:	e71c      	b.n	800cc70 <_vfiprintf_r+0x48>
 800ce36:	ab03      	add	r3, sp, #12
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	462a      	mov	r2, r5
 800ce3c:	4b05      	ldr	r3, [pc, #20]	; (800ce54 <_vfiprintf_r+0x22c>)
 800ce3e:	a904      	add	r1, sp, #16
 800ce40:	4630      	mov	r0, r6
 800ce42:	f7fc fff7 	bl	8009e34 <_printf_i>
 800ce46:	e7e4      	b.n	800ce12 <_vfiprintf_r+0x1ea>
 800ce48:	0800d214 	.word	0x0800d214
 800ce4c:	0800d21e 	.word	0x0800d21e
 800ce50:	080098ed 	.word	0x080098ed
 800ce54:	0800cc05 	.word	0x0800cc05
 800ce58:	0800d21a 	.word	0x0800d21a

0800ce5c <_raise_r>:
 800ce5c:	291f      	cmp	r1, #31
 800ce5e:	b538      	push	{r3, r4, r5, lr}
 800ce60:	4604      	mov	r4, r0
 800ce62:	460d      	mov	r5, r1
 800ce64:	d904      	bls.n	800ce70 <_raise_r+0x14>
 800ce66:	2316      	movs	r3, #22
 800ce68:	6003      	str	r3, [r0, #0]
 800ce6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6e:	bd38      	pop	{r3, r4, r5, pc}
 800ce70:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ce72:	b112      	cbz	r2, 800ce7a <_raise_r+0x1e>
 800ce74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce78:	b94b      	cbnz	r3, 800ce8e <_raise_r+0x32>
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f000 f830 	bl	800cee0 <_getpid_r>
 800ce80:	462a      	mov	r2, r5
 800ce82:	4601      	mov	r1, r0
 800ce84:	4620      	mov	r0, r4
 800ce86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce8a:	f000 b817 	b.w	800cebc <_kill_r>
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d00a      	beq.n	800cea8 <_raise_r+0x4c>
 800ce92:	1c59      	adds	r1, r3, #1
 800ce94:	d103      	bne.n	800ce9e <_raise_r+0x42>
 800ce96:	2316      	movs	r3, #22
 800ce98:	6003      	str	r3, [r0, #0]
 800ce9a:	2001      	movs	r0, #1
 800ce9c:	e7e7      	b.n	800ce6e <_raise_r+0x12>
 800ce9e:	2400      	movs	r4, #0
 800cea0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cea4:	4628      	mov	r0, r5
 800cea6:	4798      	blx	r3
 800cea8:	2000      	movs	r0, #0
 800ceaa:	e7e0      	b.n	800ce6e <_raise_r+0x12>

0800ceac <raise>:
 800ceac:	4b02      	ldr	r3, [pc, #8]	; (800ceb8 <raise+0xc>)
 800ceae:	4601      	mov	r1, r0
 800ceb0:	6818      	ldr	r0, [r3, #0]
 800ceb2:	f7ff bfd3 	b.w	800ce5c <_raise_r>
 800ceb6:	bf00      	nop
 800ceb8:	20000098 	.word	0x20000098

0800cebc <_kill_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	4d07      	ldr	r5, [pc, #28]	; (800cedc <_kill_r+0x20>)
 800cec0:	2300      	movs	r3, #0
 800cec2:	4604      	mov	r4, r0
 800cec4:	4608      	mov	r0, r1
 800cec6:	4611      	mov	r1, r2
 800cec8:	602b      	str	r3, [r5, #0]
 800ceca:	f7f5 fe73 	bl	8002bb4 <_kill>
 800cece:	1c43      	adds	r3, r0, #1
 800ced0:	d102      	bne.n	800ced8 <_kill_r+0x1c>
 800ced2:	682b      	ldr	r3, [r5, #0]
 800ced4:	b103      	cbz	r3, 800ced8 <_kill_r+0x1c>
 800ced6:	6023      	str	r3, [r4, #0]
 800ced8:	bd38      	pop	{r3, r4, r5, pc}
 800ceda:	bf00      	nop
 800cedc:	20001654 	.word	0x20001654

0800cee0 <_getpid_r>:
 800cee0:	f7f5 be60 	b.w	8002ba4 <_getpid>

0800cee4 <_init>:
 800cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee6:	bf00      	nop
 800cee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceea:	bc08      	pop	{r3}
 800ceec:	469e      	mov	lr, r3
 800ceee:	4770      	bx	lr

0800cef0 <_fini>:
 800cef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef2:	bf00      	nop
 800cef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cef6:	bc08      	pop	{r3}
 800cef8:	469e      	mov	lr, r3
 800cefa:	4770      	bx	lr
