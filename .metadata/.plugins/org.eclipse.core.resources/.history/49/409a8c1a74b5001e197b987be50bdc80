/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <stdlib.h>
#include <pendulum.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define MAX_COUNTER_VALUE 65535
#define STEPS_TO_DEG 0.04394531

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

UART_HandleTypeDef huart2;

osThreadId controlAlgoHandle;
osThreadId sendMessageHandle;
osThreadId safetyLimitsHandle;
/* USER CODE BEGIN PV */
SemaphoreHandle_t threadLock;
PID_Controller pend_controller, arm_controller;
uint32_t counter = 0;
uint32_t previousCounterArm = 0;
uint32_t previousCounterPend = 0;
int32_t netPositionPend = 0;
int32_t netPositionArm = 0;
uint8_t disturbance_threshold = 0;
double pendPrevPos;
double pendCurrVel;
double armPrevPos;
double armCurrVel;

uint8_t posOffsetFlag = 0;
uint8_t swingDownFlag = 0;
uint8_t velCount = 0;
uint8_t swingUpFlag = 0;
uint8_t balanceState = 0;
uint8_t paramStringFlag = 0;
int P1t, I1t, D1t, P2t, I2t, D2t, dzt, voltageLim;
char rx_buffer[MAX_MSG_LENGTH];
uint8_t rx_data;
int rx_index = 0;
uint32_t swingUpCount = 0;
uint32_t swingDownCount = 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM8_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART2_UART_Init(void);
void computeControlEffort(void const * argument);
void sendData(void const * argument);
void checkLimits(void const * argument);

/* USER CODE BEGIN PFP */
void updatePosition(uint32_t currentCounter, uint32_t *prevCounter, int32_t *net);
void swingUpPendulum();
void swingDownPendulum();
void checkFallDirection();
void updatePendulumState(uint32_t armEncoder, uint32_t pendEncoder);
void balanceControl();
void swingUpControl();
double calculateVelocity(double *currPos, double *prevPos, double period);
void swingDownControl();


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void updatePosition(uint32_t currentCounter, uint32_t *prevCounter, int32_t *net) {
    // Calculate the change in counter value since the last callback
    int32_t counterChange = currentCounter - *prevCounter;

    // Update the previous counter value for the next iteration
    *prevCounter = currentCounter;

    // Handle wrap-around by checking if the change is larger than half the range
    if (counterChange > MAX_COUNTER_VALUE / 2) {
        counterChange -= MAX_COUNTER_VALUE + 1;  // Handle wrap from high to low
    } else if (counterChange < -MAX_COUNTER_VALUE / 2) {
        counterChange += MAX_COUNTER_VALUE + 1;  // Handle wrap from low to high
    }

    // Update the net position
    *net += counterChange;
}

void updatePendulumState(uint32_t armEncoder, uint32_t pendEncoder){

	// Read current pendulum position state (in encoder pulses)
	updatePosition(armEncoder, &previousCounterArm, &netPositionArm);
	updatePosition(pendEncoder, &previousCounterPend, &netPositionPend);

	// Updates pendulum & arm position in degrees from encoder readings
	armCurrPos = netPositionArm*STEPS_TO_DEG;
	pendCurrPos = -1*netPositionPend*STEPS_TO_DEG;

	if(!swingUpFlag) {
		pendSetPoint = *arm_controller.Output;
	}
}


void swingUpPendulum() {

	if(balanceState) {
		return;
	}

	disturbance_threshold = SWINGUP_THRESH;
	netPositionPend = 180.0/STEPS_TO_DEG;
	Controller_SetOutputLimits(&arm_controller, -VOLTAGE_LIMIT_SWINGUP, VOLTAGE_LIMIT_SWINGUP);
	Controller_SetTunings(&arm_controller, 2, 0.15, 0.045);
	arm_controller.OutputSum = 0.00;
	armSetPoint = armCurrPos + SWINGUP_SETPOINT + SWINGUP_MULTIPLIER*armCurrPos;
	swingUpFlag = 1;
	balanceState = 1;
}

double calculateVelocity(double *currPos, double *prevPos, double period) {
	double vel = (*currPos - *prevPos)/(period/1000.0);
	return vel;
}

void swingDownPendulum() {

	swingUpFlag = 0;
	posOffsetFlag = 1;
	swingDownFlag = 1;
	armSetPoint = 0;
	Controller_SetTunings(&arm_controller, 0.45, 0.1, 0.15);
	Controller_SetTunings(&pend_controller, 0.8, 0, 0.01);
}

void swingDownControl() {

	// Update control output
	updateControllers(&pend_controller, &arm_controller);

	double outVoltage = *pend_controller.Output;

	// Set Motor Direction
	if(outVoltage > 0)
	{

		HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_RESET);
	}

	else
	{
		HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_SET);
	}

	// Calculate PWM counter for given voltage
	int dutyCycle = (abs(outVoltage) + dz)* MAX_PWM / MAX_MOTOR_VOLTAGE;

	// Set Motor PWM Cycle
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dutyCycle);

}

void checkFallDirection() {


	if(abs(pendCurrPos) > MAX_DISTURBANCE){
		netPositionPend += 180/STEPS_TO_DEG*(pendCurrPos)/abs(pendCurrPos);
		balanceState = 0;
	}
}

void swingUpControl() {

	// Update control output
	updateControllers(&pend_controller, &arm_controller);

	double outVoltage = *arm_controller.Output;

	// Set Motor Direction
	if(outVoltage > 0)
	{

		HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_RESET);
	}

	else
	{
		HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_SET);
	}

	// Calculate PWM counter for given voltage
	int dutyCycle = (abs(outVoltage) + dz)* MAX_PWM / MAX_MOTOR_VOLTAGE;

	// Set Motor PWM Cycle
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dutyCycle);
}

void balanceControl() {

	// Update Pendulum Control Output
	updateControllers(&pend_controller, &arm_controller);

	double outVoltage = *pend_controller.Output;

	// Set Motor Direction
	if(outVoltage < 0)
	{

		HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_RESET);
	}

	else
	{
		HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_SET);
	}

	// Calculate PWM counter for given voltage
	int dutyCycle = (abs(outVoltage) + dz)* MAX_PWM / MAX_MOTOR_VOLTAGE;

	// Set Motor PWM Cycle
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, dutyCycle);
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* Initialize PID Controllers for Pendulum angle and Motor Arm Angle */
  Controller_Init(&pend_controller, &pendCurrPos, &pendOutCmd, &pendSetPoint, P1, I1, D1, SAMPLE_PERIOD);
  Controller_Init(&arm_controller, &armCurrPos, &armOutCmd, &armSetPoint, P2, I2, D2, SAMPLE_PERIOD);

  /* Set Saturation Limits on Control Output */
  Controller_SetOutputLimits(&pend_controller, -VOLTAGE_LIMIT_BALANCE, VOLTAGE_LIMIT_BALANCE);
  Controller_SetOutputLimits(&arm_controller, -VOLTAGE_LIMIT_SWINGUP, VOLTAGE_LIMIT_SWINGUP);

  /* Initialize Variables */
  pendCurrPos = 180;
  pendPrevPos = pendCurrPos;
  armPrevPos = armCurrPos;
  pendOutCmd = 0;
  armCurrPos = 0;
  armOutCmd = 0;
  pendSetPoint = 0;
  armSetPoint = 0;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM8_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  // Initialize UART Receive
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);

  /* Start PWM for DC Motor and timers for encoders */
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);

  threadLock = xSemaphoreCreateMutex();
  if(threadLock == NULL) {
	  ;
  }

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of controlAlgo */
  osThreadDef(controlAlgo, computeControlEffort, osPriorityHigh, 0, 128);
  controlAlgoHandle = osThreadCreate(osThread(controlAlgo), NULL);

  /* definition and creation of sendMessage */
  osThreadDef(sendMessage, sendData, osPriorityLow, 0, 128);
  sendMessageHandle = osThreadCreate(osThread(sendMessage), NULL);

  /* definition and creation of safetyLimits */
  osThreadDef(safetyLimits, checkLimits, osPriorityHigh, 0, 128);
  safetyLimitsHandle = osThreadCreate(osThread(safetyLimits), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Illuminate status LED
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_10, GPIO_PIN_SET);


  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
  htim8.Init.Prescaler = 0;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim8.Init.Period = 10000;
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim8.Init.RepetitionCounter = 0;
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN_1_Pin|IN_2_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : IN_1_Pin IN_2_Pin */
  GPIO_InitStruct.Pin = IN_1_Pin|IN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART2) // Adjust accordingly if using a different USART instance
    {

    	if(rx_data == 'P') {
    		paramStringFlag = 1;
    	}

    	if(paramStringFlag) {

    		// Z indicates end of parameter message string
    		if (rx_data == 'Z')
			{

				// Extract values from the received string
				sscanf(rx_buffer, "P%dA%dA%dA%dA%dA%dA%dA%dAZ",
					   &P1t, &I1t, &D1t, &P2t, &I2t, &D2t, &dzt, &voltageLim);

				printf("%s\n", rx_buffer);

				// divide dead zone;
				dz = dzt/1000.0;

				// Reset the buffer and index for the next message
				memset(rx_buffer, 0, sizeof(rx_buffer));
				rx_index = 0;


				if(!(swingUpFlag || swingDownFlag)) {
					Controller_SetTunings(&arm_controller, P2t/1000.0, I2t/1000.0, D2t/1000.0);
					Controller_SetTunings(&pend_controller, P1t/1000.0, I1t/1000.0, D1t/1000.0);
					Controller_SetOutputLimits(&pend_controller, -voltageLim, voltageLim);
				}

				paramStringFlag = 0;
			}

			else
			{
				// Add the received character to the buffer
				rx_buffer[rx_index++] = rx_data;

			}
    	}

    	// Swing up pendulum
    	else if(rx_data == 'U') {
    		swingUpPendulum();
    	}

    	// Swing down pendulum
    	else if(rx_data == 'D') {
    		swingDownPendulum();
    	}

    	else if(rx_data == 'Y') {
    		*arm_controller.Setpoint += 90;
    	}

    	else if(rx_data == 'J') {
    		*arm_controller.Setpoint -= 90;
    	}

    	// Enable UART to receive another byte
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
    }
}


/* USER CODE END 4 */

/* USER CODE BEGIN Header_computeControlEffort */
/**
  * @brief  Function implementing the controlAlgorith thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_computeControlEffort */
void computeControlEffort(void const * argument)
{
  /* USER CODE BEGIN 5 */

	for(;;)
	{

		// Refresh device position values
		updatePendulumState(TIM2->CNT, TIM3->CNT);

		// Calculate velocity of pendulum and motor
		if(velCount++ == VEL_SAMPLE_PERIOD){

			pendCurrVel = calculateVelocity(&pendCurrPos, &pendPrevPos, VEL_SAMPLE_PERIOD);
			armCurrVel = calculateVelocity(&armCurrPos, &armPrevPos, VEL_SAMPLE_PERIOD);

			// Update Pendulum Position
			pendPrevPos = pendCurrPos;
			armPrevPos = armCurrPos;

			// Reset velocity period counter
			velCount = 0;
		}

		// Swing up and balance is enabled
		if(balanceState) {

			// Swing up
			if(swingUpFlag) {
				swingUpControl();

				// Delay entering the balancing loop until the pendulum has started to move
				swingUpCount++;
			}

			//Balance pendulum
			if (swingUpCount > SWINGUP_DELAY && !swingDownFlag && ((abs(pendCurrPos) < disturbance_threshold) || ((abs(pendCurrVel) < VELOCITY_SWINGUP_THRESH || pendCurrPos > 0))))
			{
				// Reset flag once swing up is complete and update control parameters and disturbance threshold
				if(swingUpFlag)
				{
					swingUpFlag = 0;
					Controller_SetTunings(&arm_controller, P2t/1000.0, I2t/1000.0, D2t/1000.0);
					Controller_SetTunings(&pend_controller, P1t/1000.0, I1t/1000.0, D1t/1000.0);
					Controller_SetOutputLimits(&arm_controller, -ARM_CONTROL_LIMIT, ARM_CONTROL_LIMIT);
					disturbance_threshold = MAX_DISTURBANCE;
					armSetPoint = 0;
				}

				// Compute balancing control effort
				balanceControl();
			}

			else if(swingDownFlag) {

				if(swingDownCount++ < SWINGDOWN_DELAY) {
					HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_RESET);
					HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_SET);
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, SWINGDOWN_INIT_DUTY);
				}

				else if(abs(pendCurrPos) > SWINGDOWN_THRESH || abs(armCurrPos) > SWINGDOWN_THRESH || abs(pendCurrVel) > VELOCITY_SWINGUP_THRESH || abs(armCurrVel) > VELOCITY_SWINGUP_THRESH){

					if(posOffsetFlag){
						// Refresh pendulum values
						updatePendulumState(TIM2->CNT, TIM3->CNT);

						// Adjust based on new set point in stable position
						netPositionPend += 180.0/STEPS_TO_DEG;

						// Halt the motor
						HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_RESET);
						HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_RESET);

						// Reset position offset flag
						posOffsetFlag = 0;
					}

					// Don't begin active swing down controller until pendulum has naturally fallen below the midway point
					else if(abs(pendCurrPos) < SWINGDOWN_BEGIN_ANGLE) {
						swingDownControl();
					}
				}

				// Pendulum is still in stable position, reset swing down flags and indicate that the pendulum is not balancing
				else {
					swingDownFlag = 0;
					balanceState = 0;
					swingDownCount = 0;
					swingUpCount = 0;
				}
			}


			else if(!swingUpFlag){
				// Reset balance flag to indicate pendulum is not balancing
				balanceState = 0;
				checkFallDirection();

			}
		}

		else {
			// Brake Motor if outside of balancing range
			HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_RESET);
		}

		// Thread sleep for sample time
		osDelay(SAMPLE_PERIOD);

	}
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_sendData */
/**
* @brief Function implementing the sendUARTData thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendData */
void sendData(void const * argument)
{
  /* USER CODE BEGIN sendData */
  /* Infinite loop */
  for(;;)
  {
	  char tx_buf[30];

	  // Convert angles to string with two decimal places
	  sprintf(tx_buf, "%ldA%ldZ\n\r", netPositionArm, -1*netPositionPend);

	  // Transmit the string via UART
	  HAL_UART_Transmit(&huart2, (uint8_t*)tx_buf, strlen(tx_buf), 100);

      osDelay(20);
  }
  /* USER CODE END sendData */
}

/* USER CODE BEGIN Header_checkLimits */
/**
* @brief Function implementing the safetyLimits thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_checkLimits */
void checkLimits(void const * argument)
{
  /* USER CODE BEGIN checkLimits */
  /* Infinite loop */
  for(;;)
  {
    osDelay(SAMPLE_PERIOD);

    // Shut down main motor if pendulum passes through physical limits
    if(abs(armCurrPos) > DEVICE_LIMIT) {
		HAL_GPIO_WritePin(GPIOA, IN_1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, IN_2_Pin, GPIO_PIN_RESET);
		balanceState = 0;
		swingUpFlag = 0;
		swingDownFlag = 0;
		swingUpCount = 0;
		swingDownCount = 0;
    }
  }
  /* USER CODE END checkLimits */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM6 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
